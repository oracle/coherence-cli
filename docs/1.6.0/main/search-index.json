{
    "docs": [
        {
            "location": "/docs/installation/01_installation",
            "text": " For macOS or Linux platforms, use the following to install the latest version of the CLI: <markup lang=\"bash\" >curl -sL https://raw.githubusercontent.com/oracle/coherence-cli/main/scripts/install.sh | bash When you install the CLI, administrative privileges are required as the cohctl executable is moved to the /usr/local/bin directory. You can move it out of this directory if you wish after installation. ",
            "title": "macOS or Linux"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " Install the latest version using the curl command below and copy to a directory in your PATH : Alternativley you can download the relevant exe from here . <markup lang=\"bash\" >curl -Lo cohctl.exe \"https://github.com/oracle/coherence-cli/releases/download/1.6.0/cohctl-1.6.0-windows-amd64.exe\" Change the amd64 to arm for ARM based processor. ",
            "title": "Windows"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " To uninstall cohctl , for Mac, issue the following: <markup lang=\"command\" >sudo rm /usr/local/bin/cohctl For all other platforms, remove the cohctl executable from where you copied it to. If you also wish to uninstall the hidden configuration directory, .cohctl , where cohctl stores its configuration, you will find this off the users home directory. See here for more information. For example on macOS or Linux the directory is $HOME/.cohctl , for Windows it will be under %HOME%\\.cohctl . ",
            "title": "Removing the CLI"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " Run the Quick Start ",
            "title": "Next Steps"
        },
        {
            "location": "/docs/installation/01_installation",
            "text": " The Coherence CLI is installable on a variety of platforms and architectures including macOS, Linux and Windows. Refer to your operating system below: The latest version of the CLI is 1.6.0 . Install on macOS or Linux Install on Windows Removing the CLI See here for all supported platforms. If there is a platform you would like included, please submit an issue here . macOS or Linux For macOS or Linux platforms, use the following to install the latest version of the CLI: <markup lang=\"bash\" >curl -sL https://raw.githubusercontent.com/oracle/coherence-cli/main/scripts/install.sh | bash When you install the CLI, administrative privileges are required as the cohctl executable is moved to the /usr/local/bin directory. You can move it out of this directory if you wish after installation. Windows Install the latest version using the curl command below and copy to a directory in your PATH : Alternativley you can download the relevant exe from here . <markup lang=\"bash\" >curl -Lo cohctl.exe \"https://github.com/oracle/coherence-cli/releases/download/1.6.0/cohctl-1.6.0-windows-amd64.exe\" Change the amd64 to arm for ARM based processor. Removing the CLI To uninstall cohctl , for Mac, issue the following: <markup lang=\"command\" >sudo rm /usr/local/bin/cohctl For all other platforms, remove the cohctl executable from where you copied it to. If you also wish to uninstall the hidden configuration directory, .cohctl , where cohctl stores its configuration, you will find this off the users home directory. See here for more information. For example on macOS or Linux the directory is $HOME/.cohctl , for Windows it will be under %HOME%\\.cohctl . Next Steps Run the Quick Start ",
            "title": "Coherence CLI Installation"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'get caches' command displays caches for a cluster. If no service name is specified then all services are queried. You can specify '-o wide' to display addition information. Use '-I' to ignore internal caches such as those used by Federation. Usage cohctl get caches [flags] Flags -h, --help help for caches -I, --ignore-special ignore caches with $ in name -s, --service string Service name Examples Display all caches and display cache size in MB using -m option. <markup lang=\"bash\" >cohctl get caches -c local -o wide -m Output: <markup lang=\"bash\" >Total Caches: 2, Total primary storage: 36 MB SERVICE CACHE COUNT SIZE AVG SIZE PUTS GETS REMOVES HITS MISSES HIT PROB PartitionedCache customers 100,000 25 MB 262 200,000 0 0 0 0 0.00% PartitionedCache orders 10,000 11 MB 1,160 20,000 20,000 0 20,000 0 100.00% If you do not use the -o wide option, then you will only see service, cache name, count and size. Display all caches for a particular service. <markup lang=\"bash\" >cohctl get caches -c local -s PartitionedCache -o wide -m Output: <markup lang=\"bash\" >Total Caches: 2, Total primary storage: 36 MB SERVICE CACHE COUNT SIZE AVG SIZE PUTS GETS REMOVES HITS MISSES HIT PROB PartitionedCache customers 100,000 25 MB 262 200,000 0 0 0 0 0.00% PartitionedCache orders 10,000 11 MB 1,160 20,000 20,000 0 20,000 0 100.00% ",
            "title": "Get Caches"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'describe cache' command displays information related to a specific cache. This includes cache size, access, storage and index information across all nodes. You can specify '-o wide' to display addition information. Usage cohctl describe cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name Examples <markup lang=\"bash\" >cohctl describe cache orders -c local -s PartitionedCache -m Output: <markup lang=\"bash\" >CACHE DETAILS ------------- Service : PartitionedCache Name : orders Type : Cache Description : Implementation: com.tangosol.net.cache.LocalCache Cache Store Type: NONE CACHE SIZE AND ACCESS DETAILS ----------------------------- NODE ID TIER COUNT SIZE PUTS GETS REMOVES 1 back 5,022 5 MB 5,022 10,044 0 2 back 4,978 5 MB 4,978 9,956 0 3 front 0 0 MB 10,000 0 0 CACHE STORAGE DETAILS --------------------- NODE ID TIER LOCKS GRANTED LOCKS PENDING LISTENERS MAX QUERY MS MAX QUERY DESC 1 back 0 0 0 0 2 back 0 0 0 0 3 front 0 0 0 0 INDEX DETAILS ------------- Total Indexing Bytes: 2,720,664 Total Indexing: 2 MB Total Indexing Millis: 263 Node:1: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=784KB, Content=5022 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=549KB, Content=5022 Node:2: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=777KB, Content=4978 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=544KB, Content=4978 CACHE STORE DETAILS ------------------- Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE TOTAL WRITE FAILURES READS AVG READ TOTAL READ 1 2,261,151 8,042 127 266ms 35m 43s 0 0 0ms 0.0s 2 2,222,822 7,966 127 266ms 35m 21s 0 0 0ms 0.0s 3 2,224,958 7,937 127 266ms 35m 18s 0 0 0ms 0.0s You may omit the service name option if the cache name is unique. You can also use the -o wide option to display more detailed information. The default memory display format is bytes but can be changed by using -k , -m or -g . <markup lang=\"bash\" >cohctl describe cache test -c local -s PartitionedCache -o wide -m Output: <markup lang=\"bash\" >CACHE DETAILS ------------- Service : PartitionedCache Name : orders Type : Cache Description : Implementation: com.tangosol.net.cache.LocalCache Cache Store Type: NONE CACHE SIZE AND ACCESS DETAILS ----------------------------- NODE ID TIER COUNT SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES HITS MISSES HIT PROB STORE READS WRITES FAILURES 1 back 5,022 5 MB 5,022 10,044 0 10,044 0 100.00% -1 -1 -1 2 back 4,978 5 MB 4,978 9,956 0 9,956 0 100.00% -1 -1 -1 3 front 0 0 MB 10,000 0 0 0 0 0.00% -1 -1 -1 CACHE STORAGE DETAILS --------------------- NODE ID TIER LOCKS GRANTED LOCKS PENDING LISTENERS MAX QUERY MS MAX QUERY DESC NO OPT AVG OPT AVG INDEX SIZE INDEXING MILLIS 1 back 0 0 0 0 0.0000 0.0000 1 MB 118 2 back 0 0 0 0 0.0000 0.0000 1 MB 145 3 front 0 0 0 0 0.0000 0.0000 0 MB 0 INDEX DETAILS ------------- Total Indexing Bytes: 2,720,664 Total Indexing: 2 MB Total Indexing Millis: 263 Node:1: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=784KB, Content=5022 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=549KB, Content=5022 Node:2: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=777KB, Content=4978 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=544KB, Content=4978 CACHE STORE DETAILS ------------------- Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE FAILURES READS AVG READ 1 2,261,151 8,042 127 266ms 0 0 0ms 2 2,222,822 7,966 127 266ms 0 0 0ms 3 2,224,958 7,937 127 266ms 0 0 0ms ",
            "title": "Describe Cache"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'get cache-stores' command displays cache store information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-stores cache-name [flags] Flags -h, --help help for cache-stores -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-stores -c local test -s DistributedCache Output: <markup lang=\"bash\" >Service/Cache: DistributedCache/test Cache Store Type: WRITE-BEHIND Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE FAILURES READS AVG READ 1 2,261,151 8,042 127 266ms 0 0 0ms 2 2,222,822 7,966 127 266ms 0 0 0ms 3 2,224,958 7,937 127 266ms 0 0 0ms You may omit the service name if the cache name is unique. If you do not use the -o wide option, then you will only see service, cache name, count and size. ",
            "title": "Get Cache Stores"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'get cache-storage' command displays cache storage information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-storage cache-name [flags] Flags -h, --help help for cache-storage -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-storage -c local test Output: <markup lang=\"bash\" >Cache: test NODE ID TIER LOCKS GRANTED LOCKS PENDING KEY LISTENERS FILTER LISTENERS MAX QUERY MS MAX QUERY DESC 1 back 0 0 0 0 0 2 back 0 0 0 0 0 3 back 0 0 0 0 0 ",
            "title": "Get Cache Storage"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'get cache-access' command displays cache access information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-access cache-name [flags] Flags -h, --help help for cache-access -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-access -c local test Output: <markup lang=\"bash\" >Cache: test NODE ID TIER COUNT SIZE PUTS GETS REMOVES CLEARS EVICTIONS 1 back 0 0 MB 0 0 0 2 0 2 back 0 0 MB 2 0 2 2 0 3 back 0 0 MB 0 0 0 2 0 ",
            "title": "Get Cache Access"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'get cache-indexes' command displays cache index information related to a specific cache. Usage cohctl get cache-indexes cache-name [flags] Flags -h, --help help for cache-indexes -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-indexes -c local test Output: <markup lang=\"bash\" >Cache: test Total Indexing Bytes: 49,756 Total Indexing: 0 MB Total Indexing Millis: 1,942 Node:2: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.2KB Node:1: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.2KB Node:3: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.0KB Depending upon the Coherence version, you may not see all the above information. ",
            "title": "Get Cache Indexes"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'get cache-partitions' command displays cache partition information related to a specific cache. This information includes: partition id, count of entries and size of entries (binary key + value lengths). Usage cohctl get cache-partitions cache-name [flags] Flags -h, --help help for cache-partitions -s, --service string Service name --sort-count sort by count descending --sort-max sort by maximum entry descending --sort-size sort by size descending -S, --summary show a cache summary Examples Get a summary of partition information for a cache. <markup lang=\"bash\" >cohctl get cache-partitions -c local test -S Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 116 MB Get all partition information for a cache. <markup lang=\"bash\" >cohctl get cache-partitions -c local test Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 116 MB PARTITION COUNT SIZE 0 789 0 MB 1 790 0 MB 2 747 0 MB 3 784 0 MB 4 730 0 MB ... 253 782 0 MB 254 752 0 MB 255 773 0 MB 256 785 0 MB Get partition information and sort by size of cache in partition descending. (Using KB format) <markup lang=\"bash\" >cohctl get cache-partitions test -c local -k --sort-size | head -20 Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 119,706 KB PARTITION COUNT SIZE 159 852 509 KB 229 841 503 KB 140 836 500 KB 5 833 498 KB 25 828 495 KB 203 826 494 KB 145 821 491 KB 179 821 491 KB 235 819 490 KB 199 819 490 KB 193 818 489 KB 188 817 488 KB Get partition information and sort by count of entries in partition descending. (Using KB format) <markup lang=\"bash\" >cohctl get cache-partitions test -c local -k --sort-count | head -20 Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 119,706 KB PARTITION COUNT SIZE 159 852 509 KB 229 841 503 KB 140 836 500 KB 5 833 498 KB 25 828 495 KB 203 826 494 KB 179 821 491 KB 145 821 491 KB 199 819 490 KB 235 819 490 KB 193 818 489 KB 188 817 488 KB ",
            "title": "Get Cache Partitions"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'set cache' command sets an attribute for a cache across one or member nodes. The following attribute names are allowed: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor or requeueThreshold. Usage cohctl set cache cache-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for cache -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -t, --tier string tier to apply to, back or front (default \"back\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Cache MBean Reference for more information on the above attributes. Examples Set the expiry delay for all nodes to 30 seconds. (we are assuming we have 3 storage-enabled nodes) <markup lang=\"bash\" >cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache -c local Output: <markup lang=\"bash\" >Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed See here for a more detailed example of this command. ",
            "title": "Set Cache"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'truncate cache' command issues a truncate against a specific cache. The truncate cache will not generate cache events. Usage cohctl truncate cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl truncate cache test -c local Output: <markup lang=\"bash\" >Are you sure you want to truncate cache test in service PartitionedCache? (y/n) y operation completed You may omit the service name option if the cache name is unique. ",
            "title": "Truncate Cache"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " The 'clear cache' command issues a clear against a specific cache. Usage cohctl clear cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl clear cache test -c local Output: <markup lang=\"bash\" >Are you sure you want to clear cache test in service PartitionedCache? (y/n) y operation completed You may omit the service name option if the cache name is unique. ",
            "title": "Clear Cache"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " There are various commands that allow you to work with and manage cluster caches. cohctl get caches - displays the caches for a cluster cohctl describe cache - shows information related to a specific cache and service cohctl get cache-stores - displays cache stores for a cache and service cohctl get cache-storage - displays storage information for a cache and service cohctl get cache-access - displays access information for a cache and service cohctl get cache-indexes - displays cache index information for a cache and service cohctl get cache-partitions - displays partition information for a cache and service cohctl set cache - sets an attribute for a cache across one or more members cohctl truncate cache - truncates a caches contents, not generating any cache events cohctl clear cache - clears a caches contents Get Caches The 'get caches' command displays caches for a cluster. If no service name is specified then all services are queried. You can specify '-o wide' to display addition information. Use '-I' to ignore internal caches such as those used by Federation. Usage cohctl get caches [flags] Flags -h, --help help for caches -I, --ignore-special ignore caches with $ in name -s, --service string Service name Examples Display all caches and display cache size in MB using -m option. <markup lang=\"bash\" >cohctl get caches -c local -o wide -m Output: <markup lang=\"bash\" >Total Caches: 2, Total primary storage: 36 MB SERVICE CACHE COUNT SIZE AVG SIZE PUTS GETS REMOVES HITS MISSES HIT PROB PartitionedCache customers 100,000 25 MB 262 200,000 0 0 0 0 0.00% PartitionedCache orders 10,000 11 MB 1,160 20,000 20,000 0 20,000 0 100.00% If you do not use the -o wide option, then you will only see service, cache name, count and size. Display all caches for a particular service. <markup lang=\"bash\" >cohctl get caches -c local -s PartitionedCache -o wide -m Output: <markup lang=\"bash\" >Total Caches: 2, Total primary storage: 36 MB SERVICE CACHE COUNT SIZE AVG SIZE PUTS GETS REMOVES HITS MISSES HIT PROB PartitionedCache customers 100,000 25 MB 262 200,000 0 0 0 0 0.00% PartitionedCache orders 10,000 11 MB 1,160 20,000 20,000 0 20,000 0 100.00% Describe Cache The 'describe cache' command displays information related to a specific cache. This includes cache size, access, storage and index information across all nodes. You can specify '-o wide' to display addition information. Usage cohctl describe cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name Examples <markup lang=\"bash\" >cohctl describe cache orders -c local -s PartitionedCache -m Output: <markup lang=\"bash\" >CACHE DETAILS ------------- Service : PartitionedCache Name : orders Type : Cache Description : Implementation: com.tangosol.net.cache.LocalCache Cache Store Type: NONE CACHE SIZE AND ACCESS DETAILS ----------------------------- NODE ID TIER COUNT SIZE PUTS GETS REMOVES 1 back 5,022 5 MB 5,022 10,044 0 2 back 4,978 5 MB 4,978 9,956 0 3 front 0 0 MB 10,000 0 0 CACHE STORAGE DETAILS --------------------- NODE ID TIER LOCKS GRANTED LOCKS PENDING LISTENERS MAX QUERY MS MAX QUERY DESC 1 back 0 0 0 0 2 back 0 0 0 0 3 front 0 0 0 0 INDEX DETAILS ------------- Total Indexing Bytes: 2,720,664 Total Indexing: 2 MB Total Indexing Millis: 263 Node:1: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=784KB, Content=5022 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=549KB, Content=5022 Node:2: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=777KB, Content=4978 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=544KB, Content=4978 CACHE STORE DETAILS ------------------- Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE TOTAL WRITE FAILURES READS AVG READ TOTAL READ 1 2,261,151 8,042 127 266ms 35m 43s 0 0 0ms 0.0s 2 2,222,822 7,966 127 266ms 35m 21s 0 0 0ms 0.0s 3 2,224,958 7,937 127 266ms 35m 18s 0 0 0ms 0.0s You may omit the service name option if the cache name is unique. You can also use the -o wide option to display more detailed information. The default memory display format is bytes but can be changed by using -k , -m or -g . <markup lang=\"bash\" >cohctl describe cache test -c local -s PartitionedCache -o wide -m Output: <markup lang=\"bash\" >CACHE DETAILS ------------- Service : PartitionedCache Name : orders Type : Cache Description : Implementation: com.tangosol.net.cache.LocalCache Cache Store Type: NONE CACHE SIZE AND ACCESS DETAILS ----------------------------- NODE ID TIER COUNT SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES HITS MISSES HIT PROB STORE READS WRITES FAILURES 1 back 5,022 5 MB 5,022 10,044 0 10,044 0 100.00% -1 -1 -1 2 back 4,978 5 MB 4,978 9,956 0 9,956 0 100.00% -1 -1 -1 3 front 0 0 MB 10,000 0 0 0 0 0.00% -1 -1 -1 CACHE STORAGE DETAILS --------------------- NODE ID TIER LOCKS GRANTED LOCKS PENDING LISTENERS MAX QUERY MS MAX QUERY DESC NO OPT AVG OPT AVG INDEX SIZE INDEXING MILLIS 1 back 0 0 0 0 0.0000 0.0000 1 MB 118 2 back 0 0 0 0 0.0000 0.0000 1 MB 145 3 front 0 0 0 0 0.0000 0.0000 0 MB 0 INDEX DETAILS ------------- Total Indexing Bytes: 2,720,664 Total Indexing: 2 MB Total Indexing Millis: 263 Node:1: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=784KB, Content=5022 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=549KB, Content=5022 Node:2: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=777KB, Content=4978 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=544KB, Content=4978 CACHE STORE DETAILS ------------------- Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE FAILURES READS AVG READ 1 2,261,151 8,042 127 266ms 0 0 0ms 2 2,222,822 7,966 127 266ms 0 0 0ms 3 2,224,958 7,937 127 266ms 0 0 0ms Get Cache Stores The 'get cache-stores' command displays cache store information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-stores cache-name [flags] Flags -h, --help help for cache-stores -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-stores -c local test -s DistributedCache Output: <markup lang=\"bash\" >Service/Cache: DistributedCache/test Cache Store Type: WRITE-BEHIND Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE FAILURES READS AVG READ 1 2,261,151 8,042 127 266ms 0 0 0ms 2 2,222,822 7,966 127 266ms 0 0 0ms 3 2,224,958 7,937 127 266ms 0 0 0ms You may omit the service name if the cache name is unique. If you do not use the -o wide option, then you will only see service, cache name, count and size. Get Cache Storage The 'get cache-storage' command displays cache storage information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-storage cache-name [flags] Flags -h, --help help for cache-storage -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-storage -c local test Output: <markup lang=\"bash\" >Cache: test NODE ID TIER LOCKS GRANTED LOCKS PENDING KEY LISTENERS FILTER LISTENERS MAX QUERY MS MAX QUERY DESC 1 back 0 0 0 0 0 2 back 0 0 0 0 0 3 back 0 0 0 0 0 Get Cache Access The 'get cache-access' command displays cache access information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-access cache-name [flags] Flags -h, --help help for cache-access -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-access -c local test Output: <markup lang=\"bash\" >Cache: test NODE ID TIER COUNT SIZE PUTS GETS REMOVES CLEARS EVICTIONS 1 back 0 0 MB 0 0 0 2 0 2 back 0 0 MB 2 0 2 2 0 3 back 0 0 MB 0 0 0 2 0 Get Cache Indexes The 'get cache-indexes' command displays cache index information related to a specific cache. Usage cohctl get cache-indexes cache-name [flags] Flags -h, --help help for cache-indexes -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-indexes -c local test Output: <markup lang=\"bash\" >Cache: test Total Indexing Bytes: 49,756 Total Indexing: 0 MB Total Indexing Millis: 1,942 Node:2: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.2KB Node:1: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.2KB Node:3: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.0KB Depending upon the Coherence version, you may not see all the above information. Get Cache Partitions The 'get cache-partitions' command displays cache partition information related to a specific cache. This information includes: partition id, count of entries and size of entries (binary key + value lengths). Usage cohctl get cache-partitions cache-name [flags] Flags -h, --help help for cache-partitions -s, --service string Service name --sort-count sort by count descending --sort-max sort by maximum entry descending --sort-size sort by size descending -S, --summary show a cache summary Examples Get a summary of partition information for a cache. <markup lang=\"bash\" >cohctl get cache-partitions -c local test -S Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 116 MB Get all partition information for a cache. <markup lang=\"bash\" >cohctl get cache-partitions -c local test Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 116 MB PARTITION COUNT SIZE 0 789 0 MB 1 790 0 MB 2 747 0 MB 3 784 0 MB 4 730 0 MB ... 253 782 0 MB 254 752 0 MB 255 773 0 MB 256 785 0 MB Get partition information and sort by size of cache in partition descending. (Using KB format) <markup lang=\"bash\" >cohctl get cache-partitions test -c local -k --sort-size | head -20 Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 119,706 KB PARTITION COUNT SIZE 159 852 509 KB 229 841 503 KB 140 836 500 KB 5 833 498 KB 25 828 495 KB 203 826 494 KB 145 821 491 KB 179 821 491 KB 235 819 490 KB 199 819 490 KB 193 818 489 KB 188 817 488 KB Get partition information and sort by count of entries in partition descending. (Using KB format) <markup lang=\"bash\" >cohctl get cache-partitions test -c local -k --sort-count | head -20 Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 119,706 KB PARTITION COUNT SIZE 159 852 509 KB 229 841 503 KB 140 836 500 KB 5 833 498 KB 25 828 495 KB 203 826 494 KB 179 821 491 KB 145 821 491 KB 199 819 490 KB 235 819 490 KB 193 818 489 KB 188 817 488 KB Set Cache The 'set cache' command sets an attribute for a cache across one or member nodes. The following attribute names are allowed: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor or requeueThreshold. Usage cohctl set cache cache-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for cache -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -t, --tier string tier to apply to, back or front (default \"back\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Cache MBean Reference for more information on the above attributes. Examples Set the expiry delay for all nodes to 30 seconds. (we are assuming we have 3 storage-enabled nodes) <markup lang=\"bash\" >cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache -c local Output: <markup lang=\"bash\" >Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed See here for a more detailed example of this command. Truncate Cache The 'truncate cache' command issues a truncate against a specific cache. The truncate cache will not generate cache events. Usage cohctl truncate cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl truncate cache test -c local Output: <markup lang=\"bash\" >Are you sure you want to truncate cache test in service PartitionedCache? (y/n) y operation completed You may omit the service name option if the cache name is unique. Clear Cache The 'clear cache' command issues a clear against a specific cache. Usage cohctl clear cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl clear cache test -c local Output: <markup lang=\"bash\" >Are you sure you want to clear cache test in service PartitionedCache? (y/n) y operation completed You may omit the service name option if the cache name is unique. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " Services Topics ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/25_caches",
            "text": " Overview There are various commands that allow you to work with and manage cluster caches. cohctl get caches - displays the caches for a cluster cohctl describe cache - shows information related to a specific cache and service cohctl get cache-stores - displays cache stores for a cache and service cohctl get cache-storage - displays storage information for a cache and service cohctl get cache-access - displays access information for a cache and service cohctl get cache-indexes - displays cache index information for a cache and service cohctl get cache-partitions - displays partition information for a cache and service cohctl set cache - sets an attribute for a cache across one or more members cohctl truncate cache - truncates a caches contents, not generating any cache events cohctl clear cache - clears a caches contents Get Caches The 'get caches' command displays caches for a cluster. If no service name is specified then all services are queried. You can specify '-o wide' to display addition information. Use '-I' to ignore internal caches such as those used by Federation. Usage cohctl get caches [flags] Flags -h, --help help for caches -I, --ignore-special ignore caches with $ in name -s, --service string Service name Examples Display all caches and display cache size in MB using -m option. <markup lang=\"bash\" >cohctl get caches -c local -o wide -m Output: <markup lang=\"bash\" >Total Caches: 2, Total primary storage: 36 MB SERVICE CACHE COUNT SIZE AVG SIZE PUTS GETS REMOVES HITS MISSES HIT PROB PartitionedCache customers 100,000 25 MB 262 200,000 0 0 0 0 0.00% PartitionedCache orders 10,000 11 MB 1,160 20,000 20,000 0 20,000 0 100.00% If you do not use the -o wide option, then you will only see service, cache name, count and size. Display all caches for a particular service. <markup lang=\"bash\" >cohctl get caches -c local -s PartitionedCache -o wide -m Output: <markup lang=\"bash\" >Total Caches: 2, Total primary storage: 36 MB SERVICE CACHE COUNT SIZE AVG SIZE PUTS GETS REMOVES HITS MISSES HIT PROB PartitionedCache customers 100,000 25 MB 262 200,000 0 0 0 0 0.00% PartitionedCache orders 10,000 11 MB 1,160 20,000 20,000 0 20,000 0 100.00% Describe Cache The 'describe cache' command displays information related to a specific cache. This includes cache size, access, storage and index information across all nodes. You can specify '-o wide' to display addition information. Usage cohctl describe cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name Examples <markup lang=\"bash\" >cohctl describe cache orders -c local -s PartitionedCache -m Output: <markup lang=\"bash\" >CACHE DETAILS ------------- Service : PartitionedCache Name : orders Type : Cache Description : Implementation: com.tangosol.net.cache.LocalCache Cache Store Type: NONE CACHE SIZE AND ACCESS DETAILS ----------------------------- NODE ID TIER COUNT SIZE PUTS GETS REMOVES 1 back 5,022 5 MB 5,022 10,044 0 2 back 4,978 5 MB 4,978 9,956 0 3 front 0 0 MB 10,000 0 0 CACHE STORAGE DETAILS --------------------- NODE ID TIER LOCKS GRANTED LOCKS PENDING LISTENERS MAX QUERY MS MAX QUERY DESC 1 back 0 0 0 0 2 back 0 0 0 0 3 front 0 0 0 0 INDEX DETAILS ------------- Total Indexing Bytes: 2,720,664 Total Indexing: 2 MB Total Indexing Millis: 263 Node:1: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=784KB, Content=5022 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=549KB, Content=5022 Node:2: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=777KB, Content=4978 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=544KB, Content=4978 CACHE STORE DETAILS ------------------- Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE TOTAL WRITE FAILURES READS AVG READ TOTAL READ 1 2,261,151 8,042 127 266ms 35m 43s 0 0 0ms 0.0s 2 2,222,822 7,966 127 266ms 35m 21s 0 0 0ms 0.0s 3 2,224,958 7,937 127 266ms 35m 18s 0 0 0ms 0.0s You may omit the service name option if the cache name is unique. You can also use the -o wide option to display more detailed information. The default memory display format is bytes but can be changed by using -k , -m or -g . <markup lang=\"bash\" >cohctl describe cache test -c local -s PartitionedCache -o wide -m Output: <markup lang=\"bash\" >CACHE DETAILS ------------- Service : PartitionedCache Name : orders Type : Cache Description : Implementation: com.tangosol.net.cache.LocalCache Cache Store Type: NONE CACHE SIZE AND ACCESS DETAILS ----------------------------- NODE ID TIER COUNT SIZE TOTAL PUTS TOTAL GETS TOTAL REMOVES HITS MISSES HIT PROB STORE READS WRITES FAILURES 1 back 5,022 5 MB 5,022 10,044 0 10,044 0 100.00% -1 -1 -1 2 back 4,978 5 MB 4,978 9,956 0 9,956 0 100.00% -1 -1 -1 3 front 0 0 MB 10,000 0 0 0 0 0.00% -1 -1 -1 CACHE STORAGE DETAILS --------------------- NODE ID TIER LOCKS GRANTED LOCKS PENDING LISTENERS MAX QUERY MS MAX QUERY DESC NO OPT AVG OPT AVG INDEX SIZE INDEXING MILLIS 1 back 0 0 0 0 0.0000 0.0000 1 MB 118 2 back 0 0 0 0 0.0000 0.0000 1 MB 145 3 front 0 0 0 0 0.0000 0.0000 0 MB 0 INDEX DETAILS ------------- Total Indexing Bytes: 2,720,664 Total Indexing: 2 MB Total Indexing Millis: 263 Node:1: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=784KB, Content=5022 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=549KB, Content=5022 Node:2: SimpleMapIndex: Extractor=.toString(), Ordered=true, Footprint=777KB, Content=4978 SimpleMapIndex: Extractor=.hashCode(), Ordered=true, Footprint=544KB, Content=4978 CACHE STORE DETAILS ------------------- Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE FAILURES READS AVG READ 1 2,261,151 8,042 127 266ms 0 0 0ms 2 2,222,822 7,966 127 266ms 0 0 0ms 3 2,224,958 7,937 127 266ms 0 0 0ms Get Cache Stores The 'get cache-stores' command displays cache store information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-stores cache-name [flags] Flags -h, --help help for cache-stores -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-stores -c local test -s DistributedCache Output: <markup lang=\"bash\" >Service/Cache: DistributedCache/test Cache Store Type: WRITE-BEHIND Total Queue Size: 6,708,931 Total Store Failures: 0 Total Store Failures: 0 NODE ID QUEUE SIZE WRITES AVG BATCH AVG WRITE FAILURES READS AVG READ 1 2,261,151 8,042 127 266ms 0 0 0ms 2 2,222,822 7,966 127 266ms 0 0 0ms 3 2,224,958 7,937 127 266ms 0 0 0ms You may omit the service name if the cache name is unique. If you do not use the -o wide option, then you will only see service, cache name, count and size. Get Cache Storage The 'get cache-storage' command displays cache storage information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-storage cache-name [flags] Flags -h, --help help for cache-storage -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-storage -c local test Output: <markup lang=\"bash\" >Cache: test NODE ID TIER LOCKS GRANTED LOCKS PENDING KEY LISTENERS FILTER LISTENERS MAX QUERY MS MAX QUERY DESC 1 back 0 0 0 0 0 2 back 0 0 0 0 0 3 back 0 0 0 0 0 Get Cache Access The 'get cache-access' command displays cache access information related to a specific cache. You can specify '-o wide' to display addition information. Usage cohctl get cache-access cache-name [flags] Flags -h, --help help for cache-access -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-access -c local test Output: <markup lang=\"bash\" >Cache: test NODE ID TIER COUNT SIZE PUTS GETS REMOVES CLEARS EVICTIONS 1 back 0 0 MB 0 0 0 2 0 2 back 0 0 MB 2 0 2 2 0 3 back 0 0 MB 0 0 0 2 0 Get Cache Indexes The 'get cache-indexes' command displays cache index information related to a specific cache. Usage cohctl get cache-indexes cache-name [flags] Flags -h, --help help for cache-indexes -s, --service string Service name <markup lang=\"bash\" >cohctl get cache-indexes -c local test Output: <markup lang=\"bash\" >Cache: test Total Indexing Bytes: 49,756 Total Indexing: 0 MB Total Indexing Millis: 1,942 Node:2: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.2KB Node:1: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.2KB Node:3: PartitionedIndex: Extractor=.toString()(), Ordered=true, Footprint=16.0KB Depending upon the Coherence version, you may not see all the above information. Get Cache Partitions The 'get cache-partitions' command displays cache partition information related to a specific cache. This information includes: partition id, count of entries and size of entries (binary key + value lengths). Usage cohctl get cache-partitions cache-name [flags] Flags -h, --help help for cache-partitions -s, --service string Service name --sort-count sort by count descending --sort-max sort by maximum entry descending --sort-size sort by size descending -S, --summary show a cache summary Examples Get a summary of partition information for a cache. <markup lang=\"bash\" >cohctl get cache-partitions -c local test -S Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 116 MB Get all partition information for a cache. <markup lang=\"bash\" >cohctl get cache-partitions -c local test Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 116 MB PARTITION COUNT SIZE 0 789 0 MB 1 790 0 MB 2 747 0 MB 3 784 0 MB 4 730 0 MB ... 253 782 0 MB 254 752 0 MB 255 773 0 MB 256 785 0 MB Get partition information and sort by size of cache in partition descending. (Using KB format) <markup lang=\"bash\" >cohctl get cache-partitions test -c local -k --sort-size | head -20 Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 119,706 KB PARTITION COUNT SIZE 159 852 509 KB 229 841 503 KB 140 836 500 KB 5 833 498 KB 25 828 495 KB 203 826 494 KB 145 821 491 KB 179 821 491 KB 235 819 490 KB 199 819 490 KB 193 818 489 KB 188 817 488 KB Get partition information and sort by count of entries in partition descending. (Using KB format) <markup lang=\"bash\" >cohctl get cache-partitions test -c local -k --sort-count | head -20 Output: <markup lang=\"bash\" >Cache: test Partitions: 257 Total Count: 200,000 Total Size: 119,706 KB PARTITION COUNT SIZE 159 852 509 KB 229 841 503 KB 140 836 500 KB 5 833 498 KB 25 828 495 KB 203 826 494 KB 179 821 491 KB 145 821 491 KB 199 819 490 KB 235 819 490 KB 193 818 489 KB 188 817 488 KB Set Cache The 'set cache' command sets an attribute for a cache across one or member nodes. The following attribute names are allowed: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor or requeueThreshold. Usage cohctl set cache cache-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for cache -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -t, --tier string tier to apply to, back or front (default \"back\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Cache MBean Reference for more information on the above attributes. Examples Set the expiry delay for all nodes to 30 seconds. (we are assuming we have 3 storage-enabled nodes) <markup lang=\"bash\" >cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache -c local Output: <markup lang=\"bash\" >Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed See here for a more detailed example of this command. Truncate Cache The 'truncate cache' command issues a truncate against a specific cache. The truncate cache will not generate cache events. Usage cohctl truncate cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl truncate cache test -c local Output: <markup lang=\"bash\" >Are you sure you want to truncate cache test in service PartitionedCache? (y/n) y operation completed You may omit the service name option if the cache name is unique. Clear Cache The 'clear cache' command issues a clear against a specific cache. Usage cohctl clear cache cache-name [flags] Flags -h, --help help for cache -s, --service string Service name -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl clear cache test -c local Output: <markup lang=\"bash\" >Are you sure you want to clear cache test in service PartitionedCache? (y/n) y operation completed You may omit the service name option if the cache name is unique. See Also Services Topics ",
            "title": "Caches"
        },
        {
            "location": "/docs/examples/01_overview",
            "text": " This section contains various examples when using the Coherence CLI. Monitoring Rolling Restarts Monitoring a cluster rolling restart with the Coherence-CLI. Using JSONPath Expressions Using JSONPath expressions to refine output. Setting Cache Attributes Set cache attributes such as expiry delay. ",
            "title": "Examples"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " The 'get http-sessions' command displays Coherence*Web Http session information for a cluster. Usage cohctl get http-sessions [flags] Flags -h, --help help for http-sessions Examples Display Http Session data. <markup lang=\"bash\" >cohctl get http-servers -c local Output: <markup lang=\"bash\" >APPLICATION TYPE SESSION TIMEOUT CACHE OVERFLOW CACHE AVG SIZE TOTAL REAPED AVG DURATION LAST REAP SESSION UPDATES app-1 HttpSessionManager 600 session-cache 103 1 1,234 123 3 app-2 HttpSessionManager 600 session-cache 1234 0 0 0 5 ",
            "title": "Get Http Sessions"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " The 'describe http-session' command shows information related to a specific Coherence*Web application. Usage cohctl describe http-session application-id [flags] Flags -h, --help help for http-session Examples <markup lang=\"bash\" >cohctl describe http-session app-1 -c local ",
            "title": "Describe Http Session"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " There are various commands that allow you to work with and manage Coherence*Web Http session information. cohctl get http-sessions - displays the Http session details cohctl describe http-session - shows http session information related to a specific application id This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Http Sessions The 'get http-sessions' command displays Coherence*Web Http session information for a cluster. Usage cohctl get http-sessions [flags] Flags -h, --help help for http-sessions Examples Display Http Session data. <markup lang=\"bash\" >cohctl get http-servers -c local Output: <markup lang=\"bash\" >APPLICATION TYPE SESSION TIMEOUT CACHE OVERFLOW CACHE AVG SIZE TOTAL REAPED AVG DURATION LAST REAP SESSION UPDATES app-1 HttpSessionManager 600 session-cache 103 1 1,234 123 3 app-2 HttpSessionManager 600 session-cache 1234 0 0 0 5 Describe Http Session The 'describe http-session' command shows information related to a specific Coherence*Web application. Usage cohctl describe http-session application-id [flags] Flags -h, --help help for http-session Examples <markup lang=\"bash\" >cohctl describe http-session app-1 -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/58_http_sessions",
            "text": " Overview There are various commands that allow you to work with and manage Coherence*Web Http session information. cohctl get http-sessions - displays the Http session details cohctl describe http-session - shows http session information related to a specific application id This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Http Sessions The 'get http-sessions' command displays Coherence*Web Http session information for a cluster. Usage cohctl get http-sessions [flags] Flags -h, --help help for http-sessions Examples Display Http Session data. <markup lang=\"bash\" >cohctl get http-servers -c local Output: <markup lang=\"bash\" >APPLICATION TYPE SESSION TIMEOUT CACHE OVERFLOW CACHE AVG SIZE TOTAL REAPED AVG DURATION LAST REAP SESSION UPDATES app-1 HttpSessionManager 600 session-cache 103 1 1,234 123 3 app-2 HttpSessionManager 600 session-cache 1234 0 0 0 5 Describe Http Session The 'describe http-session' command shows information related to a specific Coherence*Web application. Usage cohctl describe http-session application-id [flags] Flags -h, --help help for http-session Examples <markup lang=\"bash\" >cohctl describe http-session app-1 -c local ",
            "title": "Http Sessions"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'get reporters' command displays the reporters for the cluster. Usage cohctl get reporters [flags] Flags -h, --help help for reporters Examples Display all http servers. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 3 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 4 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false ",
            "title": "Get Reporters"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'describe reporter' command shows information related to a particular reporter. Usage cohctl describe reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >cohctl describe reporter 1 -c local ",
            "title": "Describe Reporter"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'start reporter' command starts the Coherence reporter on the specified node. Usage cohctl start reporter node-id [flags] Flags -h, --help help for reporter -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl start reporter 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to start the reporter on node 1? (y/n) y Reporter has been started on node 1 ",
            "title": "Start Reporter"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'stop reporter' command stops the Coherence reporter on the specified node. Usage cohctl stop reporter node-id [flags] Flags -h, --help help for reporter -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop reporter 1 -c local -y Output: <markup lang=\"bash\" >Reporter has been stopped on node 1 ",
            "title": "Stop Reporter"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " The 'set reporter' command sets an attribute for one or more reporter nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: configFile, currentBatch, intervalSeconds or outputPath. Usage cohctl set reporter {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for reporter -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the output path for all reporters to /reports . <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /u01 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /u01 0 0ms 0.0000ms 60 false Set path. <markup lang=\"bash\" >cohctl set reporter all -a outputPath -v /tmp -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute outputPath to /tmp for all 2 reporter nodes? (y/n) y operation completed Display the reporters. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false Set the interval for reporter on node 1 to 120 seconds. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false ohctl set reporter 1 -a intervalSeconds -v 120 -c local Are you sure you want to set the value of attribute intervalSeconds to 120 for 1 node(s)? (y/n) y operation completed Display the reporters <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 120 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false ",
            "title": "Set Reporter"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " There are various commands that allow you to work with and manage Reporters. cohctl get reporters - displays the reporters for a cluster cohctl describe reporter - shows information related to a specific reporter cohctl start reporter - starts a reporter on a specific node cohctl stop reporter - stops a reporter on a specific node cohctl set reporter - sets a reporter attribute for one or more members Get Reporters The 'get reporters' command displays the reporters for the cluster. Usage cohctl get reporters [flags] Flags -h, --help help for reporters Examples Display all http servers. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 3 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 4 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false Describe Reporter The 'describe reporter' command shows information related to a particular reporter. Usage cohctl describe reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >cohctl describe reporter 1 -c local Start Reporter The 'start reporter' command starts the Coherence reporter on the specified node. Usage cohctl start reporter node-id [flags] Flags -h, --help help for reporter -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl start reporter 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to start the reporter on node 1? (y/n) y Reporter has been started on node 1 Stop Reporter The 'stop reporter' command stops the Coherence reporter on the specified node. Usage cohctl stop reporter node-id [flags] Flags -h, --help help for reporter -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop reporter 1 -c local -y Output: <markup lang=\"bash\" >Reporter has been stopped on node 1 Set Reporter The 'set reporter' command sets an attribute for one or more reporter nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: configFile, currentBatch, intervalSeconds or outputPath. Usage cohctl set reporter {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for reporter -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the output path for all reporters to /reports . <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /u01 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /u01 0 0ms 0.0000ms 60 false Set path. <markup lang=\"bash\" >cohctl set reporter all -a outputPath -v /tmp -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute outputPath to /tmp for all 2 reporter nodes? (y/n) y operation completed Display the reporters. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false Set the interval for reporter on node 1 to 120 seconds. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false ohctl set reporter 1 -a intervalSeconds -v 120 -c local Are you sure you want to set the value of attribute intervalSeconds to 120 for 1 node(s)? (y/n) y operation completed Display the reporters <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 120 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/66_reporters",
            "text": " Overview There are various commands that allow you to work with and manage Reporters. cohctl get reporters - displays the reporters for a cluster cohctl describe reporter - shows information related to a specific reporter cohctl start reporter - starts a reporter on a specific node cohctl stop reporter - stops a reporter on a specific node cohctl set reporter - sets a reporter attribute for one or more members Get Reporters The 'get reporters' command displays the reporters for the cluster. Usage cohctl get reporters [flags] Flags -h, --help help for reporters Examples Display all http servers. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 3 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false 4 Stopped reports/report-group.xml /u01/reports/. 0 0ms 0.0000ms 60 false Describe Reporter The 'describe reporter' command shows information related to a particular reporter. Usage cohctl describe reporter node-id [flags] Flags -h, --help help for reporter Examples <markup lang=\"bash\" >cohctl describe reporter 1 -c local Start Reporter The 'start reporter' command starts the Coherence reporter on the specified node. Usage cohctl start reporter node-id [flags] Flags -h, --help help for reporter -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl start reporter 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to start the reporter on node 1? (y/n) y Reporter has been started on node 1 Stop Reporter The 'stop reporter' command stops the Coherence reporter on the specified node. Usage cohctl stop reporter node-id [flags] Flags -h, --help help for reporter -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop reporter 1 -c local -y Output: <markup lang=\"bash\" >Reporter has been stopped on node 1 Set Reporter The 'set reporter' command sets an attribute for one or more reporter nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: configFile, currentBatch, intervalSeconds or outputPath. Usage cohctl set reporter {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for reporter -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the output path for all reporters to /reports . <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /u01 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /u01 0 0ms 0.0000ms 60 false Set path. <markup lang=\"bash\" >cohctl set reporter all -a outputPath -v /tmp -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute outputPath to /tmp for all 2 reporter nodes? (y/n) y operation completed Display the reporters. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false Set the interval for reporter on node 1 to 120 seconds. <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false ohctl set reporter 1 -a intervalSeconds -v 120 -c local Are you sure you want to set the value of attribute intervalSeconds to 120 for 1 node(s)? (y/n) y operation completed Display the reporters <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 120 false 2 Stopped reports/report-group.xml /tmp 0 0ms 0.0000ms 60 false See Also Services ",
            "title": "Reporters"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'get members' command displays the members for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get members [flags] Flags -D, --departed show departed members only -h, --help help for members -r, --role string role name to display (default \"all\") -S, --summary show a member summary Examples Display all members and specify to display memory sizes in MB using -m option. <markup lang=\"bash\" >cohctl get members -c local -m Output: <markup lang=\"bash\" >Total cluster members: 3 Storage enabled count: 2 Departure count: 0 Cluster Heap - Total: 4,352 MB Used: 250 MB Available: 4,102 MB (94.3%) Storage Heap - Total: 4,096 MB Used: 201 MB Available: 3,895 MB (95.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 192.168.1.117 63984 35372 n/a Management true 2,048 MB 91 MB 1,957 MB 2 192.168.1.117 63995 35398 n/a TangosolNetCoherence true 2,048 MB 110 MB 1,938 MB 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 49 MB 207 MB The default memory display format is bytes but can be changed by using -k , -m or -g . Display all members with the role CoherenceConsole . <markup lang=\"bash\" >cohctl get members -c local -r CoherenceConsole -m Output: <markup lang=\"bash\" >Total cluster members: 1 Storage enabled count: 1 Departure count: 0 Cluster Heap - Total: 256 MB Used: 50 MB Available: 206 MB (80.5%) Storage Heap - Total: 0 MB Used: 0 MB Available: 0 MB ( 0.0%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 50 MB 206 MB You can also use -o wide to display more columns. Display all departed members. <markup lang=\"bash\" >cohctl get members -c local -D Output: <markup lang=\"bash\" >NODE ID TIMESTAMP ADDRESS MACHINE ID LOCATION ROLE 3 2024-03-26 09:28:12.65 127.0.0.1:49170 10131 machine:localhost,process:5892,member:storage-2 CoherenceServer 5 2024-03-26 09:26:22.24 127.0.0.1:50251 10131 machine:localhost,process:6600,member:storage-3 CoherenceServer 4 2024-03-26 08:11:00.537 127.0.0.1:50250 10131 machine:localhost,process:6601,member:storage-4 CoherenceServer Members are displayed in descending order of departure time. ",
            "title": "Get Members"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'get network-stats' command displays all member network statistic for a cluster. Usage cohctl get network-stats [flags] Flags -h, --help help for network-stats -r, --role string role name to display (default \"all\") Examples <markup lang=\"bash\" >cohctl get netwok-stats -c local Output: <markup lang=\"bash\" >NODE ID ADDRESS PORT PROCESS MEMBER ROLE PKT SENT PKT REC RESENT EFFICIENCY SEND Q DATA SENT DATA REC WEAKEST 1 /127.0.0.1 50724 81363 storage-1 CoherenceServer 531 586 2 100.00% 0 8 MB 9 MB 4 2 /127.0.0.1 50725 81364 storage-2 CoherenceServer 181 152 0 100.00% 0 8 MB 8 MB -1 3 /127.0.0.1 50726 81362 storage-0 CoherenceServer 182 148 0 100.00% 0 7 MB 10 MB -1 4 /127.0.0.1 50968 81733 com.tangosol.net.CacheFactory CoherenceConsole 64 58 0 100.00% 0 3 MB 0 MB -1 ",
            "title": "Get Network Stats"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'get p2ps-stats' command displays the network statistics from the point of view of a member and all the members it connects to. Usage cohctl get p2p-stats node-id [flags] Flags -h, --help help for p2p-stats -P, --publisher-sort sort output by publisher rate -R, --receiver-sort sort output by receiver rate Examples <markup lang=\"bash\" >cohctl get p2p-stats -c local Output: <markup lang=\"bash\" >Viewing Node Id: 1 Viewing Member Name: storage-2 MEMBER PUBLISHER RECEIVER PAUSE RATE THRESHOLD PAUSED DEFERRING DEFERRED OUTSTANDING READY LAST IN LAST OUT LAST SLOW LAST DEATH 2 0.990 1.000 0.0000 1,976 false false 0 0 0 33223ms 33243ms n/a n/a 3 1.000 1.000 0.0000 2,080 false false 0 0 0 28220ms 28240ms n/a n/a ",
            "title": "Get P2P Stats"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'describe member' command shows information related to a specific member. To display extended information about a member, the -X option can be specified with a comma separated list of platform entries to display for. For example: cohctl describe member 1 -X g1OldGeneration,g1EdenSpace would display information related to G1 old generation and Eden space. Full list of options are JVM dependant, but can include the full values or part of the following: compressedClassSpace, operatingSystem, metaSpace, g1OldGen, g1SurvivorSpace, g1CodeHeapProfiledNMethods, g1CodeHeapNonNMethods, g1OldGeneration g1MetaSpaceManager, g1YoungGeneration, g1EdenSpace, g1CodeCacheManager, psScavenge, psEdenSpace, psMarkSweep, codeCache, psOldGen, psSurvivorSpace, runtime Usage cohctl describe member node-id [flags] Flags -X, --extended string include extended information such as g1OldGen, etc. See --help (default \"none\") -h, --help help for member -D, --thread-dump include a thread dump Examples Describe member and include heap dump. <markup lang=\"bash\" >cohctl describe member 1 -D When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Describe member and include extended information on G1 garbage collection. <markup lang=\"bash\" >cohctl describe member 1 -Xg1 ",
            "title": "Describe Member"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'set member' command sets an attribute for one or more member nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: loggingLevel, resendDelay, sendAckDelay, trafficJamCount, trafficJamDelay, loggingLimit or loggingFormat. Usage cohctl set member {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for member -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the log level for all members, Check the log level first. <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, <markup lang=\"bash\" >cohctl set member all -a loggingLevel -v 6 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute loggingLevel to 6 for all 3 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, Set the log level to 9 for node id 1. <markup lang=\"bash\" >cohctl set member 1 -a loggingLevel -v 9 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute loggingLevel to 9 for 1 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 9, \"loggingLevel\": 6, \"loggingLevel\": 6, ",
            "title": "Set Member"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'shutdown member' command shuts down all the clustered services that are running on a specific member via a controlled shutdown. If the services were started using DefaultCacheServer, then they will be restarted. Usage cohctl shutdown member node-id [flags] Flags -h, --help help for member -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl shutdown member 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to shutdown member 1? (y/n) y operation completed ",
            "title": "Shutdown Member"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " The 'get member-description' command displays information regarding a member. Only available in most recent Coherence versions. Usage cohctl get member-description node-id [flags] Flags -h, --help help for member-description <markup lang=\"bash\" >cohctl get member-description 1 -c local ",
            "title": "Get Member Description"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " There are various cluster commands that allow you to work with and manage cluster members. cohctl get members - displays the members for a cluster cohctl get network-stats - displays all member network statistics for a cluster cohctl get p2p-stats - displays point-to-point network statistics for a specific member cohctl describe member - shows information related to a specific member cohctl set member - sets a member attribute for one or more members cohctl shutdown member - shuts down a members services in a controlled manner cohctl get member-description - displays member description Get Members The 'get members' command displays the members for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get members [flags] Flags -D, --departed show departed members only -h, --help help for members -r, --role string role name to display (default \"all\") -S, --summary show a member summary Examples Display all members and specify to display memory sizes in MB using -m option. <markup lang=\"bash\" >cohctl get members -c local -m Output: <markup lang=\"bash\" >Total cluster members: 3 Storage enabled count: 2 Departure count: 0 Cluster Heap - Total: 4,352 MB Used: 250 MB Available: 4,102 MB (94.3%) Storage Heap - Total: 4,096 MB Used: 201 MB Available: 3,895 MB (95.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 192.168.1.117 63984 35372 n/a Management true 2,048 MB 91 MB 1,957 MB 2 192.168.1.117 63995 35398 n/a TangosolNetCoherence true 2,048 MB 110 MB 1,938 MB 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 49 MB 207 MB The default memory display format is bytes but can be changed by using -k , -m or -g . Display all members with the role CoherenceConsole . <markup lang=\"bash\" >cohctl get members -c local -r CoherenceConsole -m Output: <markup lang=\"bash\" >Total cluster members: 1 Storage enabled count: 1 Departure count: 0 Cluster Heap - Total: 256 MB Used: 50 MB Available: 206 MB (80.5%) Storage Heap - Total: 0 MB Used: 0 MB Available: 0 MB ( 0.0%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 50 MB 206 MB You can also use -o wide to display more columns. Display all departed members. <markup lang=\"bash\" >cohctl get members -c local -D Output: <markup lang=\"bash\" >NODE ID TIMESTAMP ADDRESS MACHINE ID LOCATION ROLE 3 2024-03-26 09:28:12.65 127.0.0.1:49170 10131 machine:localhost,process:5892,member:storage-2 CoherenceServer 5 2024-03-26 09:26:22.24 127.0.0.1:50251 10131 machine:localhost,process:6600,member:storage-3 CoherenceServer 4 2024-03-26 08:11:00.537 127.0.0.1:50250 10131 machine:localhost,process:6601,member:storage-4 CoherenceServer Members are displayed in descending order of departure time. Get Network Stats The 'get network-stats' command displays all member network statistic for a cluster. Usage cohctl get network-stats [flags] Flags -h, --help help for network-stats -r, --role string role name to display (default \"all\") Examples <markup lang=\"bash\" >cohctl get netwok-stats -c local Output: <markup lang=\"bash\" >NODE ID ADDRESS PORT PROCESS MEMBER ROLE PKT SENT PKT REC RESENT EFFICIENCY SEND Q DATA SENT DATA REC WEAKEST 1 /127.0.0.1 50724 81363 storage-1 CoherenceServer 531 586 2 100.00% 0 8 MB 9 MB 4 2 /127.0.0.1 50725 81364 storage-2 CoherenceServer 181 152 0 100.00% 0 8 MB 8 MB -1 3 /127.0.0.1 50726 81362 storage-0 CoherenceServer 182 148 0 100.00% 0 7 MB 10 MB -1 4 /127.0.0.1 50968 81733 com.tangosol.net.CacheFactory CoherenceConsole 64 58 0 100.00% 0 3 MB 0 MB -1 Get P2P Stats The 'get p2ps-stats' command displays the network statistics from the point of view of a member and all the members it connects to. Usage cohctl get p2p-stats node-id [flags] Flags -h, --help help for p2p-stats -P, --publisher-sort sort output by publisher rate -R, --receiver-sort sort output by receiver rate Examples <markup lang=\"bash\" >cohctl get p2p-stats -c local Output: <markup lang=\"bash\" >Viewing Node Id: 1 Viewing Member Name: storage-2 MEMBER PUBLISHER RECEIVER PAUSE RATE THRESHOLD PAUSED DEFERRING DEFERRED OUTSTANDING READY LAST IN LAST OUT LAST SLOW LAST DEATH 2 0.990 1.000 0.0000 1,976 false false 0 0 0 33223ms 33243ms n/a n/a 3 1.000 1.000 0.0000 2,080 false false 0 0 0 28220ms 28240ms n/a n/a Describe Member The 'describe member' command shows information related to a specific member. To display extended information about a member, the -X option can be specified with a comma separated list of platform entries to display for. For example: cohctl describe member 1 -X g1OldGeneration,g1EdenSpace would display information related to G1 old generation and Eden space. Full list of options are JVM dependant, but can include the full values or part of the following: compressedClassSpace, operatingSystem, metaSpace, g1OldGen, g1SurvivorSpace, g1CodeHeapProfiledNMethods, g1CodeHeapNonNMethods, g1OldGeneration g1MetaSpaceManager, g1YoungGeneration, g1EdenSpace, g1CodeCacheManager, psScavenge, psEdenSpace, psMarkSweep, codeCache, psOldGen, psSurvivorSpace, runtime Usage cohctl describe member node-id [flags] Flags -X, --extended string include extended information such as g1OldGen, etc. See --help (default \"none\") -h, --help help for member -D, --thread-dump include a thread dump Examples Describe member and include heap dump. <markup lang=\"bash\" >cohctl describe member 1 -D When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Describe member and include extended information on G1 garbage collection. <markup lang=\"bash\" >cohctl describe member 1 -Xg1 Set Member The 'set member' command sets an attribute for one or more member nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: loggingLevel, resendDelay, sendAckDelay, trafficJamCount, trafficJamDelay, loggingLimit or loggingFormat. Usage cohctl set member {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for member -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the log level for all members, Check the log level first. <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, <markup lang=\"bash\" >cohctl set member all -a loggingLevel -v 6 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute loggingLevel to 6 for all 3 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, Set the log level to 9 for node id 1. <markup lang=\"bash\" >cohctl set member 1 -a loggingLevel -v 9 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute loggingLevel to 9 for 1 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 9, \"loggingLevel\": 6, \"loggingLevel\": 6, Shutdown Member The 'shutdown member' command shuts down all the clustered services that are running on a specific member via a controlled shutdown. If the services were started using DefaultCacheServer, then they will be restarted. Usage cohctl shutdown member node-id [flags] Flags -h, --help help for member -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl shutdown member 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to shutdown member 1? (y/n) y operation completed Get Member Description The 'get member-description' command displays information regarding a member. Only available in most recent Coherence versions. Usage cohctl get member-description node-id [flags] Flags -h, --help help for member-description <markup lang=\"bash\" >cohctl get member-description 1 -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " Diagnostics ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/15_members",
            "text": " Overview There are various cluster commands that allow you to work with and manage cluster members. cohctl get members - displays the members for a cluster cohctl get network-stats - displays all member network statistics for a cluster cohctl get p2p-stats - displays point-to-point network statistics for a specific member cohctl describe member - shows information related to a specific member cohctl set member - sets a member attribute for one or more members cohctl shutdown member - shuts down a members services in a controlled manner cohctl get member-description - displays member description Get Members The 'get members' command displays the members for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get members [flags] Flags -D, --departed show departed members only -h, --help help for members -r, --role string role name to display (default \"all\") -S, --summary show a member summary Examples Display all members and specify to display memory sizes in MB using -m option. <markup lang=\"bash\" >cohctl get members -c local -m Output: <markup lang=\"bash\" >Total cluster members: 3 Storage enabled count: 2 Departure count: 0 Cluster Heap - Total: 4,352 MB Used: 250 MB Available: 4,102 MB (94.3%) Storage Heap - Total: 4,096 MB Used: 201 MB Available: 3,895 MB (95.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 192.168.1.117 63984 35372 n/a Management true 2,048 MB 91 MB 1,957 MB 2 192.168.1.117 63995 35398 n/a TangosolNetCoherence true 2,048 MB 110 MB 1,938 MB 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 49 MB 207 MB The default memory display format is bytes but can be changed by using -k , -m or -g . Display all members with the role CoherenceConsole . <markup lang=\"bash\" >cohctl get members -c local -r CoherenceConsole -m Output: <markup lang=\"bash\" >Total cluster members: 1 Storage enabled count: 1 Departure count: 0 Cluster Heap - Total: 256 MB Used: 50 MB Available: 206 MB (80.5%) Storage Heap - Total: 0 MB Used: 0 MB Available: 0 MB ( 0.0%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 50 MB 206 MB You can also use -o wide to display more columns. Display all departed members. <markup lang=\"bash\" >cohctl get members -c local -D Output: <markup lang=\"bash\" >NODE ID TIMESTAMP ADDRESS MACHINE ID LOCATION ROLE 3 2024-03-26 09:28:12.65 127.0.0.1:49170 10131 machine:localhost,process:5892,member:storage-2 CoherenceServer 5 2024-03-26 09:26:22.24 127.0.0.1:50251 10131 machine:localhost,process:6600,member:storage-3 CoherenceServer 4 2024-03-26 08:11:00.537 127.0.0.1:50250 10131 machine:localhost,process:6601,member:storage-4 CoherenceServer Members are displayed in descending order of departure time. Get Network Stats The 'get network-stats' command displays all member network statistic for a cluster. Usage cohctl get network-stats [flags] Flags -h, --help help for network-stats -r, --role string role name to display (default \"all\") Examples <markup lang=\"bash\" >cohctl get netwok-stats -c local Output: <markup lang=\"bash\" >NODE ID ADDRESS PORT PROCESS MEMBER ROLE PKT SENT PKT REC RESENT EFFICIENCY SEND Q DATA SENT DATA REC WEAKEST 1 /127.0.0.1 50724 81363 storage-1 CoherenceServer 531 586 2 100.00% 0 8 MB 9 MB 4 2 /127.0.0.1 50725 81364 storage-2 CoherenceServer 181 152 0 100.00% 0 8 MB 8 MB -1 3 /127.0.0.1 50726 81362 storage-0 CoherenceServer 182 148 0 100.00% 0 7 MB 10 MB -1 4 /127.0.0.1 50968 81733 com.tangosol.net.CacheFactory CoherenceConsole 64 58 0 100.00% 0 3 MB 0 MB -1 Get P2P Stats The 'get p2ps-stats' command displays the network statistics from the point of view of a member and all the members it connects to. Usage cohctl get p2p-stats node-id [flags] Flags -h, --help help for p2p-stats -P, --publisher-sort sort output by publisher rate -R, --receiver-sort sort output by receiver rate Examples <markup lang=\"bash\" >cohctl get p2p-stats -c local Output: <markup lang=\"bash\" >Viewing Node Id: 1 Viewing Member Name: storage-2 MEMBER PUBLISHER RECEIVER PAUSE RATE THRESHOLD PAUSED DEFERRING DEFERRED OUTSTANDING READY LAST IN LAST OUT LAST SLOW LAST DEATH 2 0.990 1.000 0.0000 1,976 false false 0 0 0 33223ms 33243ms n/a n/a 3 1.000 1.000 0.0000 2,080 false false 0 0 0 28220ms 28240ms n/a n/a Describe Member The 'describe member' command shows information related to a specific member. To display extended information about a member, the -X option can be specified with a comma separated list of platform entries to display for. For example: cohctl describe member 1 -X g1OldGeneration,g1EdenSpace would display information related to G1 old generation and Eden space. Full list of options are JVM dependant, but can include the full values or part of the following: compressedClassSpace, operatingSystem, metaSpace, g1OldGen, g1SurvivorSpace, g1CodeHeapProfiledNMethods, g1CodeHeapNonNMethods, g1OldGeneration g1MetaSpaceManager, g1YoungGeneration, g1EdenSpace, g1CodeCacheManager, psScavenge, psEdenSpace, psMarkSweep, codeCache, psOldGen, psSurvivorSpace, runtime Usage cohctl describe member node-id [flags] Flags -X, --extended string include extended information such as g1OldGen, etc. See --help (default \"none\") -h, --help help for member -D, --thread-dump include a thread dump Examples Describe member and include heap dump. <markup lang=\"bash\" >cohctl describe member 1 -D When taking one or more thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Describe member and include extended information on G1 garbage collection. <markup lang=\"bash\" >cohctl describe member 1 -Xg1 Set Member The 'set member' command sets an attribute for one or more member nodes. You can specify 'all' to change the value for all nodes, or specify a comma separated list of node ids. The following attribute names are allowed: loggingLevel, resendDelay, sendAckDelay, trafficJamCount, trafficJamDelay, loggingLimit or loggingFormat. Usage cohctl set member {node-ids|all} [flags] Flags -a, --attribute string attribute name to set -h, --help help for member -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the log level for all members, Check the log level first. <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, <markup lang=\"bash\" >cohctl set member all -a loggingLevel -v 6 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute loggingLevel to 6 for all 3 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 6, \"loggingLevel\": 6, \"loggingLevel\": 6, Set the log level to 9 for node id 1. <markup lang=\"bash\" >cohctl set member 1 -a loggingLevel -v 9 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute loggingLevel to 9 for 1 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get members -o json | jq | grep loggingLevel Output: <markup lang=\"bash\" > \"loggingLevel\": 9, \"loggingLevel\": 6, \"loggingLevel\": 6, Shutdown Member The 'shutdown member' command shuts down all the clustered services that are running on a specific member via a controlled shutdown. If the services were started using DefaultCacheServer, then they will be restarted. Usage cohctl shutdown member node-id [flags] Flags -h, --help help for member -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl shutdown member 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to shutdown member 1? (y/n) y operation completed Get Member Description The 'get member-description' command displays information regarding a member. Only available in most recent Coherence versions. Usage cohctl get member-description node-id [flags] Flags -h, --help help for member-description <markup lang=\"bash\" >cohctl get member-description 1 -c local See Also Diagnostics ",
            "title": "Members"
        },
        {
            "location": "/docs/config/09_get_config",
            "text": " The 'get config' command displays the config stored in the '.cohctl.yaml' config file in a human readable format. Usage cohctl get config [flags] Flags -h, --help help for config -v, --verbose include verbose output including cluster connections and profiles Example <markup lang=\"bash\" >cohctl get config Output: <markup lang=\"bash\" >CONFIG ------ Version : 1.5.0 Current Context : fp1 Debug : true Color : on Request Timeout : 30 Ignore Invalid Certs: false Default Bytes Format: m Default Heap : 512m Use Gradle : false You can use the -v option to display cluster connections and profiles. ",
            "title": "Get Config"
        },
        {
            "location": "/docs/about/01_overview",
            "text": " assistant Introduction Introduction to the Coherence CLI. fa-save Install Installing the Coherence CLI for your platform. fa-rocket Quick Start Quick start guide to getting started with the Coherence CLI. fa-cogs Configuration Configuration options. widgets Command Reference Coherence CLI Command Reference. lock Security Securing CLI access. fa-question-circle Troubleshooting Hints and tips to troubleshoot common issues. explore Examples A number of examples on how get the most out of the Coherence CLI. ",
            "title": "Get Going"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " The 'get machines' command displays the machines for a cluster. Usage cohctl get machines [flags] Flags -h, --help help for machines Examples Get members and display the memory in GB using -g option. <markup lang=\"bash\" >cohctl get machines -c local -g Output: <markup lang=\"bash\" >MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 192.168.1.117 8 2.8774 32.0 GB 0.5 GB 1.59% Mac OS X x86_64 10.16 ",
            "title": "Get Members"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " The 'describe machine' command shows information related to a particular machine. Usage cohctl describe machine machine-name [flags] Flags -h, --help help for machine Examples Describe machine 192.168.1.117. <markup lang=\"bash\" >cohctl describe machine 192.168.1.117 -c local Output: <markup lang=\"bash\" >Machine Name : 192.168.1.117 Arch : amd64 Available Processors : 4 Committed Virtual Memory Size: 6.115729408e+09 Domain : java.lang Free Physical Memory Size : 6.284816384e+09 Free Swap Space Size : 1.073737728e+09 Max File Descriptor Count : 1.048576e+06 Name : Linux Node Id : 1 Object Name : map[canonicalKeyPropertyListString: Open File Descriptor Count : 164 Process Cpu Load : 0.004840661557079468 Process Cpu Time : 1.399e+10 Sub Type : OperatingSystem System Cpu Load : 0.03903903903903904 System Load Average : 0.31 Total Physical Memory Size : 9.127186432e+09 Total Swap Space Size : 1.073737728e+09 Type : Platform Version : 5.10.47-linuxkit ",
            "title": "Describe Machine"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " There are various cluster commands that allow you display information about cluster machines. cohctl get machines - displays the machines for a cluster cohctl describe machine - shows information related to a specific machine Get Members The 'get machines' command displays the machines for a cluster. Usage cohctl get machines [flags] Flags -h, --help help for machines Examples Get members and display the memory in GB using -g option. <markup lang=\"bash\" >cohctl get machines -c local -g Output: <markup lang=\"bash\" >MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 192.168.1.117 8 2.8774 32.0 GB 0.5 GB 1.59% Mac OS X x86_64 10.16 Describe Machine The 'describe machine' command shows information related to a particular machine. Usage cohctl describe machine machine-name [flags] Flags -h, --help help for machine Examples Describe machine 192.168.1.117. <markup lang=\"bash\" >cohctl describe machine 192.168.1.117 -c local Output: <markup lang=\"bash\" >Machine Name : 192.168.1.117 Arch : amd64 Available Processors : 4 Committed Virtual Memory Size: 6.115729408e+09 Domain : java.lang Free Physical Memory Size : 6.284816384e+09 Free Swap Space Size : 1.073737728e+09 Max File Descriptor Count : 1.048576e+06 Name : Linux Node Id : 1 Object Name : map[canonicalKeyPropertyListString: Open File Descriptor Count : 164 Process Cpu Load : 0.004840661557079468 Process Cpu Time : 1.399e+10 Sub Type : OperatingSystem System Cpu Load : 0.03903903903903904 System Load Average : 0.31 Total Physical Memory Size : 9.127186432e+09 Total Swap Space Size : 1.073737728e+09 Type : Platform Version : 5.10.47-linuxkit ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " Members ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/17_machines",
            "text": " Overview There are various cluster commands that allow you display information about cluster machines. cohctl get machines - displays the machines for a cluster cohctl describe machine - shows information related to a specific machine Get Members The 'get machines' command displays the machines for a cluster. Usage cohctl get machines [flags] Flags -h, --help help for machines Examples Get members and display the memory in GB using -g option. <markup lang=\"bash\" >cohctl get machines -c local -g Output: <markup lang=\"bash\" >MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 192.168.1.117 8 2.8774 32.0 GB 0.5 GB 1.59% Mac OS X x86_64 10.16 Describe Machine The 'describe machine' command shows information related to a particular machine. Usage cohctl describe machine machine-name [flags] Flags -h, --help help for machine Examples Describe machine 192.168.1.117. <markup lang=\"bash\" >cohctl describe machine 192.168.1.117 -c local Output: <markup lang=\"bash\" >Machine Name : 192.168.1.117 Arch : amd64 Available Processors : 4 Committed Virtual Memory Size: 6.115729408e+09 Domain : java.lang Free Physical Memory Size : 6.284816384e+09 Free Swap Space Size : 1.073737728e+09 Max File Descriptor Count : 1.048576e+06 Name : Linux Node Id : 1 Object Name : map[canonicalKeyPropertyListString: Open File Descriptor Count : 164 Process Cpu Load : 0.004840661557079468 Process Cpu Time : 1.399e+10 Sub Type : OperatingSystem System Cpu Load : 0.03903903903903904 System Load Average : 0.31 Total Physical Memory Size : 9.127186432e+09 Total Swap Space Size : 1.073737728e+09 Type : Platform Version : 5.10.47-linuxkit See Also Members ",
            "title": "Machines"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " The 'get proxies' command displays the list of Coherence*Extend proxy servers for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get proxies [flags] Flags -h, --help help for proxies Examples Display all proxy servers. <markup lang=\"bash\" >cohctl get proxies -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53216.41408 Proxy 0 0 0 2 0.0.0.0:53215.47265 Proxy 0 0 0 3 0.0.0.0:53220.42214 Proxy 0 0 0 You can also use -o wide to display more columns. ",
            "title": "Get Proxies"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " The 'get proxy-connections' command displays proxy server connections for a specific proxy server. Usage cohctl get proxy-connections service-name [flags] Flags -h, --help help for proxy-connections Examples <markup lang=\"bash\" >cohctl get proxy-connections Proxy -c local Output: <markup lang=\"bash\" >NODE ID CONN MS CONN TIME REMOTE ADDR/PORT BYTES SENT BYTES REC BACKLOG CLIENT PROCESS CLIENT ROLE 1 236,916 03m 56s 127.0.0.1:58819 0 MB 0 MB 0 55414 TangosolCoherenceDslqueryQueryPlus 1 538,395 08m 58s 127.0.0.1:58666 0 MB 0 MB 0 54769 TangosolCoherenceDslqueryQueryPlus 2 1,177,423 19m 37s 127.0.0.1:58075 1 MB 0 MB 0 45646 TangosolCoherenceDslqueryQueryPlus You can use -o wide to display more columns as described below. <markup lang=\"bash\" >cohctl get proxy-connections Proxy -o wide -c local Output: <markup lang=\"bash\" >NODE ID CONN MS CONN TIME REMOTE ADDR/PORT BYTES SENT BYTES REC BACKLOG CLIENT PROCESS CLIENT ROLE REMOTE MEMBER 1 275,256 04m 35s 127.0.0.1:58819 0 MB 0 MB 0 55414 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... 1 576,736 09m 36s 127.0.0.1:58666 0 MB 0 MB 0 54769 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... 2 1,215,764 20m 15s 127.0.0.1:58075 1 MB 0 MB 0 45646 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... ",
            "title": "Get Proxy Connections"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " The 'describe proxy' command shows information related to proxy servers including all nodes running the proxy service as well as detailed connection information. Usage cohctl describe proxy service-name [flags] Flags -h, --help help for proxy Examples <markup lang=\"bash\" >cohctl describe proxy Proxy -c local Output: <markup lang=\"bash\" >PROXY SERVICE DETAILS --------------------- Name : Proxy Type : [Proxy] ... Transport Backlogged Connection List: [[] []] PROXY MEMBER DETAILS -------------------- NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53962.47748 Proxy 2 1,394 2,471 2 0.0.0.0:53966.60421 Proxy 1 1,049,157 703 PROXY CONNECTIONS ----------------- Node Id : 2 Remote Address : 127.0.0.1 ... UUID : 0x0000018320A6A563C0A80189867534FD64D606EA44860A00C7DBDE274D31636D Node Id : 1 Remote Address : 127.0.0.1 ... UUID : 0x0000018320B067FDC0A80189C594C09E90166E1F48D3806BC52F4FFE8097B050 Node Id : 1 Remote Address : 127.0.0.1 ... UUID : 0x0000018320B501A5C0A8018931AE66ADAC4A887A2E21D5A6C51F69858097B052 The above output has been truncated for brevity. ",
            "title": "Describe Proxy"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " There are various commands that allow you to work with and manage proxy servers. cohctl get proxies - displays the proxy servers for a cluster cohctl get proxy-connections - displays proxy server connections for a specific proxy server cohctl describe proxy - shows information related to a specific proxy server Get Proxies The 'get proxies' command displays the list of Coherence*Extend proxy servers for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get proxies [flags] Flags -h, --help help for proxies Examples Display all proxy servers. <markup lang=\"bash\" >cohctl get proxies -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53216.41408 Proxy 0 0 0 2 0.0.0.0:53215.47265 Proxy 0 0 0 3 0.0.0.0:53220.42214 Proxy 0 0 0 You can also use -o wide to display more columns. Get Proxy Connections The 'get proxy-connections' command displays proxy server connections for a specific proxy server. Usage cohctl get proxy-connections service-name [flags] Flags -h, --help help for proxy-connections Examples <markup lang=\"bash\" >cohctl get proxy-connections Proxy -c local Output: <markup lang=\"bash\" >NODE ID CONN MS CONN TIME REMOTE ADDR/PORT BYTES SENT BYTES REC BACKLOG CLIENT PROCESS CLIENT ROLE 1 236,916 03m 56s 127.0.0.1:58819 0 MB 0 MB 0 55414 TangosolCoherenceDslqueryQueryPlus 1 538,395 08m 58s 127.0.0.1:58666 0 MB 0 MB 0 54769 TangosolCoherenceDslqueryQueryPlus 2 1,177,423 19m 37s 127.0.0.1:58075 1 MB 0 MB 0 45646 TangosolCoherenceDslqueryQueryPlus You can use -o wide to display more columns as described below. <markup lang=\"bash\" >cohctl get proxy-connections Proxy -o wide -c local Output: <markup lang=\"bash\" >NODE ID CONN MS CONN TIME REMOTE ADDR/PORT BYTES SENT BYTES REC BACKLOG CLIENT PROCESS CLIENT ROLE REMOTE MEMBER 1 275,256 04m 35s 127.0.0.1:58819 0 MB 0 MB 0 55414 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... 1 576,736 09m 36s 127.0.0.1:58666 0 MB 0 MB 0 54769 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... 2 1,215,764 20m 15s 127.0.0.1:58075 1 MB 0 MB 0 45646 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... Describe Proxy The 'describe proxy' command shows information related to proxy servers including all nodes running the proxy service as well as detailed connection information. Usage cohctl describe proxy service-name [flags] Flags -h, --help help for proxy Examples <markup lang=\"bash\" >cohctl describe proxy Proxy -c local Output: <markup lang=\"bash\" >PROXY SERVICE DETAILS --------------------- Name : Proxy Type : [Proxy] ... Transport Backlogged Connection List: [[] []] PROXY MEMBER DETAILS -------------------- NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53962.47748 Proxy 2 1,394 2,471 2 0.0.0.0:53966.60421 Proxy 1 1,049,157 703 PROXY CONNECTIONS ----------------- Node Id : 2 Remote Address : 127.0.0.1 ... UUID : 0x0000018320A6A563C0A80189867534FD64D606EA44860A00C7DBDE274D31636D Node Id : 1 Remote Address : 127.0.0.1 ... UUID : 0x0000018320B067FDC0A80189C594C09E90166E1F48D3806BC52F4FFE8097B050 Node Id : 1 Remote Address : 127.0.0.1 ... UUID : 0x0000018320B501A5C0A8018931AE66ADAC4A887A2E21D5A6C51F69858097B052 The above output has been truncated for brevity. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/50_proxies",
            "text": " Overview There are various commands that allow you to work with and manage proxy servers. cohctl get proxies - displays the proxy servers for a cluster cohctl get proxy-connections - displays proxy server connections for a specific proxy server cohctl describe proxy - shows information related to a specific proxy server Get Proxies The 'get proxies' command displays the list of Coherence*Extend proxy servers for a cluster. You can specify '-o wide' to display addition information. Usage cohctl get proxies [flags] Flags -h, --help help for proxies Examples Display all proxy servers. <markup lang=\"bash\" >cohctl get proxies -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53216.41408 Proxy 0 0 0 2 0.0.0.0:53215.47265 Proxy 0 0 0 3 0.0.0.0:53220.42214 Proxy 0 0 0 You can also use -o wide to display more columns. Get Proxy Connections The 'get proxy-connections' command displays proxy server connections for a specific proxy server. Usage cohctl get proxy-connections service-name [flags] Flags -h, --help help for proxy-connections Examples <markup lang=\"bash\" >cohctl get proxy-connections Proxy -c local Output: <markup lang=\"bash\" >NODE ID CONN MS CONN TIME REMOTE ADDR/PORT BYTES SENT BYTES REC BACKLOG CLIENT PROCESS CLIENT ROLE 1 236,916 03m 56s 127.0.0.1:58819 0 MB 0 MB 0 55414 TangosolCoherenceDslqueryQueryPlus 1 538,395 08m 58s 127.0.0.1:58666 0 MB 0 MB 0 54769 TangosolCoherenceDslqueryQueryPlus 2 1,177,423 19m 37s 127.0.0.1:58075 1 MB 0 MB 0 45646 TangosolCoherenceDslqueryQueryPlus You can use -o wide to display more columns as described below. <markup lang=\"bash\" >cohctl get proxy-connections Proxy -o wide -c local Output: <markup lang=\"bash\" >NODE ID CONN MS CONN TIME REMOTE ADDR/PORT BYTES SENT BYTES REC BACKLOG CLIENT PROCESS CLIENT ROLE REMOTE MEMBER 1 275,256 04m 35s 127.0.0.1:58819 0 MB 0 MB 0 55414 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... 1 576,736 09m 36s 127.0.0.1:58666 0 MB 0 MB 0 54769 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... 2 1,215,764 20m 15s 127.0.0.1:58075 1 MB 0 MB 0 45646 TangosolCoherenceDslqueryQueryPlus Member(Id=0, Timest... Describe Proxy The 'describe proxy' command shows information related to proxy servers including all nodes running the proxy service as well as detailed connection information. Usage cohctl describe proxy service-name [flags] Flags -h, --help help for proxy Examples <markup lang=\"bash\" >cohctl describe proxy Proxy -c local Output: <markup lang=\"bash\" >PROXY SERVICE DETAILS --------------------- Name : Proxy Type : [Proxy] ... Transport Backlogged Connection List: [[] []] PROXY MEMBER DETAILS -------------------- NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:53962.47748 Proxy 2 1,394 2,471 2 0.0.0.0:53966.60421 Proxy 1 1,049,157 703 PROXY CONNECTIONS ----------------- Node Id : 2 Remote Address : 127.0.0.1 ... UUID : 0x0000018320A6A563C0A80189867534FD64D606EA44860A00C7DBDE274D31636D Node Id : 1 Remote Address : 127.0.0.1 ... UUID : 0x0000018320B067FDC0A80189C594C09E90166E1F48D3806BC52F4FFE8097B050 Node Id : 1 Remote Address : 127.0.0.1 ... UUID : 0x0000018320B501A5C0A8018931AE66ADAC4A887A2E21D5A6C51F69858097B052 The above output has been truncated for brevity. See Also Services ",
            "title": "Proxy Servers"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'get persistence' command displays persistence information for a cluster. Usage cohctl get persistence [flags] Flags -h, --help help for persistence Examples Display all persistence services. <markup lang=\"bash\" >cohctl get persistence -c local Output: <markup lang=\"bash\" >Total Active Space Used: 7MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE SPACE USED AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 4 active 652,342 0.000ms 0ms 0 Idle PartitionedCache2 4 active 365,946 0.000ms 0ms 0 Idle PartitionedCache 4 active 6,331,471 0.242ms 188ms 2 Idle ",
            "title": "Get Persistence"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'get snapshots' command displays snapshots for a cluster. If no service name is specified then all services are queried. By default local snapshots are shown, but you can use the -a option to show archived snapshots. Usage cohctl get snapshots [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshots -s, --service string Service name Examples Display snapshots for all services. <markup lang=\"bash\" >cohctl get snapshots -c local Output: <markup lang=\"bash\" >SERVICE SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display snapshots for a specific service. <markup lang=\"bash\" >cohctl get snapshots -c local -s PartitionedCache Output: <markup lang=\"bash\" >SERVICE SNAPSHOT NAME PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display archived snapshots for all services. <markup lang=\"bash\" >cohctl get snapshots -c local -a Output: <markup lang=\"bash\" >SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 Display archived snapshots for a specific service. <markup lang=\"bash\" >cohctl get snapshots -c local -s PartitionedCache -a Output: <markup lang=\"bash\" >SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache snapshot-1 ",
            "title": "Get Snapshots"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'create snapshot' command creates a snapshot for a given service. If you do not specify the -y option you will be prompted to confirm the operation. Usage cohctl create snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl create snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform create snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation create snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This and other commands that create, remove, archive, retrieve or recover snapshots submit this request to the service to perform the operation only. The return of the command prompt does not mean the operation has been completed on the service. You should use cohctl get persistence to ensure the status is Idle and check Coherence log files before continuing. ",
            "title": "Create Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'recover snapshot' command recovers a snapshot for a given service. WARNING: Issuing this command will destroy all service data and replaced with the data from the requested snapshot. Usage cohctl recover snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform recover snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation recover snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This is a destructive command and will remove all current caches for the specified service and replace them with the contents of the caches in the snapshot. ",
            "title": "Recover Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'remove snapshot' command removes a snapshot for a given service. By default local snapshots are removed, but you can use the -a option to remove archived snapshots. Usage cohctl remove snapshot snapshot-name [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples Remove a local snapshot. <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform remove snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Remove an archived snapshot. <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -a -c local Output: <markup lang=\"bash\" >Are you sure you want to perform remove archived snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove archived snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed ",
            "title": "Remove Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'archive snapshot' command archives a snapshot for a given service. You must have an archiver setup on the service for this to be successful. Usage cohctl archive snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl archive snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform archive snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation archive snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed When you issue the archive snapshot command, the snapshots on the separate servers are sent to a central location. Coherence provides a directory archiver implementation which will store the archive on a shared filesystem available to all members. You can also create your own archiver implementations. See the Coherence documentation for more details. ",
            "title": "Archive Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'retrieve snapshot' command retrieves an archived snapshot for a given service. Usage cohctl retrieve snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl retrieve snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform retrieve snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation retrieve snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This operation will retrieve and archived snapshot and distribute it across all available members. Once it has been retrieved it can be recovered. You must ensure that a snapshot with the same name as the archived snapshot does not exist before you retrieve it. ",
            "title": "Retrieve Snapshot"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'suspend service' command suspends a specific service in all the members of a cluster. Usage cohctl suspend service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl suspend service PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform suspend service for service PartitionedCache? (y/n) y operation completed You can use the command cohctl get services -o wide to show if services have been suspended. ",
            "title": "Suspend Service"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " The 'resume service' command resumes a specific service in all the members of a cluster. Usage cohctl resume service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl resume service PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform resume service for service PartitionedCache? (y/n) y operation completed ",
            "title": "Resume Service"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " There are various commands that allow you to work with and issue Persistence commands. cohctl get persistence - displays persistence information for a cluster cohctl get snapshots - shows persistence snapshots for a cluster cohctl create snapshot - create a snapshot for a service cohctl recover snapshot - recover a snapshot for a service cohctl remove snapshot - remove a snapshot for a service cohctl archive snapshot - archive a snapshot for a service cohctl retrieve snapshot - retrieve an archived snapshot for a service cohctl suspend service - suspends a specific service in all the members of a cluster cohctl resume service - resumes a specific service in all the members of a cluster See the Coherence Documentation for more information on Persistence. Get Persistence The 'get persistence' command displays persistence information for a cluster. Usage cohctl get persistence [flags] Flags -h, --help help for persistence Examples Display all persistence services. <markup lang=\"bash\" >cohctl get persistence -c local Output: <markup lang=\"bash\" >Total Active Space Used: 7MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE SPACE USED AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 4 active 652,342 0.000ms 0ms 0 Idle PartitionedCache2 4 active 365,946 0.000ms 0ms 0 Idle PartitionedCache 4 active 6,331,471 0.242ms 188ms 2 Idle Get Snapshots The 'get snapshots' command displays snapshots for a cluster. If no service name is specified then all services are queried. By default local snapshots are shown, but you can use the -a option to show archived snapshots. Usage cohctl get snapshots [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshots -s, --service string Service name Examples Display snapshots for all services. <markup lang=\"bash\" >cohctl get snapshots -c local Output: <markup lang=\"bash\" >SERVICE SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display snapshots for a specific service. <markup lang=\"bash\" >cohctl get snapshots -c local -s PartitionedCache Output: <markup lang=\"bash\" >SERVICE SNAPSHOT NAME PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display archived snapshots for all services. <markup lang=\"bash\" >cohctl get snapshots -c local -a Output: <markup lang=\"bash\" >SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 Display archived snapshots for a specific service. <markup lang=\"bash\" >cohctl get snapshots -c local -s PartitionedCache -a Output: <markup lang=\"bash\" >SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache snapshot-1 Create Snapshot The 'create snapshot' command creates a snapshot for a given service. If you do not specify the -y option you will be prompted to confirm the operation. Usage cohctl create snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl create snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform create snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation create snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This and other commands that create, remove, archive, retrieve or recover snapshots submit this request to the service to perform the operation only. The return of the command prompt does not mean the operation has been completed on the service. You should use cohctl get persistence to ensure the status is Idle and check Coherence log files before continuing. Recover Snapshot The 'recover snapshot' command recovers a snapshot for a given service. WARNING: Issuing this command will destroy all service data and replaced with the data from the requested snapshot. Usage cohctl recover snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform recover snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation recover snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This is a destructive command and will remove all current caches for the specified service and replace them with the contents of the caches in the snapshot. Remove Snapshot The 'remove snapshot' command removes a snapshot for a given service. By default local snapshots are removed, but you can use the -a option to remove archived snapshots. Usage cohctl remove snapshot snapshot-name [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples Remove a local snapshot. <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform remove snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Remove an archived snapshot. <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -a -c local Output: <markup lang=\"bash\" >Are you sure you want to perform remove archived snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove archived snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Archive Snapshot The 'archive snapshot' command archives a snapshot for a given service. You must have an archiver setup on the service for this to be successful. Usage cohctl archive snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl archive snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform archive snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation archive snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed When you issue the archive snapshot command, the snapshots on the separate servers are sent to a central location. Coherence provides a directory archiver implementation which will store the archive on a shared filesystem available to all members. You can also create your own archiver implementations. See the Coherence documentation for more details. Retrieve Snapshot The 'retrieve snapshot' command retrieves an archived snapshot for a given service. Usage cohctl retrieve snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl retrieve snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform retrieve snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation retrieve snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This operation will retrieve and archived snapshot and distribute it across all available members. Once it has been retrieved it can be recovered. You must ensure that a snapshot with the same name as the archived snapshot does not exist before you retrieve it. Suspend Service The 'suspend service' command suspends a specific service in all the members of a cluster. Usage cohctl suspend service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl suspend service PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform suspend service for service PartitionedCache? (y/n) y operation completed You can use the command cohctl get services -o wide to show if services have been suspended. Resume Service The 'resume service' command resumes a specific service in all the members of a cluster. Usage cohctl resume service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl resume service PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform resume service for service PartitionedCache? (y/n) y operation completed ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " Persisting Caches in the Coherence Documentation Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/40_persistence",
            "text": " Overview There are various commands that allow you to work with and issue Persistence commands. cohctl get persistence - displays persistence information for a cluster cohctl get snapshots - shows persistence snapshots for a cluster cohctl create snapshot - create a snapshot for a service cohctl recover snapshot - recover a snapshot for a service cohctl remove snapshot - remove a snapshot for a service cohctl archive snapshot - archive a snapshot for a service cohctl retrieve snapshot - retrieve an archived snapshot for a service cohctl suspend service - suspends a specific service in all the members of a cluster cohctl resume service - resumes a specific service in all the members of a cluster See the Coherence Documentation for more information on Persistence. Get Persistence The 'get persistence' command displays persistence information for a cluster. Usage cohctl get persistence [flags] Flags -h, --help help for persistence Examples Display all persistence services. <markup lang=\"bash\" >cohctl get persistence -c local Output: <markup lang=\"bash\" >Total Active Space Used: 7MB SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE SPACE USED AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 4 active 652,342 0.000ms 0ms 0 Idle PartitionedCache2 4 active 365,946 0.000ms 0ms 0 Idle PartitionedCache 4 active 6,331,471 0.242ms 188ms 2 Idle Get Snapshots The 'get snapshots' command displays snapshots for a cluster. If no service name is specified then all services are queried. By default local snapshots are shown, but you can use the -a option to show archived snapshots. Usage cohctl get snapshots [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshots -s, --service string Service name Examples Display snapshots for all services. <markup lang=\"bash\" >cohctl get snapshots -c local Output: <markup lang=\"bash\" >SERVICE SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display snapshots for a specific service. <markup lang=\"bash\" >cohctl get snapshots -c local -s PartitionedCache Output: <markup lang=\"bash\" >SERVICE SNAPSHOT NAME PartitionedCache snapshot-1 PartitionedCache snapshot-2 Display archived snapshots for all services. <markup lang=\"bash\" >cohctl get snapshots -c local -a Output: <markup lang=\"bash\" >SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache2 snapshot-test PartitionedCache snapshot-1 Display archived snapshots for a specific service. <markup lang=\"bash\" >cohctl get snapshots -c local -s PartitionedCache -a Output: <markup lang=\"bash\" >SERVICE ARCHIVED SNAPSHOT NAME PartitionedCache snapshot-1 Create Snapshot The 'create snapshot' command creates a snapshot for a given service. If you do not specify the -y option you will be prompted to confirm the operation. Usage cohctl create snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl create snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform create snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation create snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This and other commands that create, remove, archive, retrieve or recover snapshots submit this request to the service to perform the operation only. The return of the command prompt does not mean the operation has been completed on the service. You should use cohctl get persistence to ensure the status is Idle and check Coherence log files before continuing. Recover Snapshot The 'recover snapshot' command recovers a snapshot for a given service. WARNING: Issuing this command will destroy all service data and replaced with the data from the requested snapshot. Usage cohctl recover snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform recover snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation recover snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This is a destructive command and will remove all current caches for the specified service and replace them with the contents of the caches in the snapshot. Remove Snapshot The 'remove snapshot' command removes a snapshot for a given service. By default local snapshots are removed, but you can use the -a option to remove archived snapshots. Usage cohctl remove snapshot snapshot-name [flags] Flags -a, --archived if true, returns archived snapshots, otherwise local snapshots -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples Remove a local snapshot. <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform remove snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Remove an archived snapshot. <markup lang=\"bash\" >cohctl recover snapshot my-snapshot -s PartitionedCache -a -c local Output: <markup lang=\"bash\" >Are you sure you want to perform remove archived snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation remove archived snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed Archive Snapshot The 'archive snapshot' command archives a snapshot for a given service. You must have an archiver setup on the service for this to be successful. Usage cohctl archive snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl archive snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform archive snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation archive snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed When you issue the archive snapshot command, the snapshots on the separate servers are sent to a central location. Coherence provides a directory archiver implementation which will store the archive on a shared filesystem available to all members. You can also create your own archiver implementations. See the Coherence documentation for more details. Retrieve Snapshot The 'retrieve snapshot' command retrieves an archived snapshot for a given service. Usage cohctl retrieve snapshot snapshot-name [flags] Flags -h, --help help for snapshot -s, --service string Service name -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl retrieve snapshot my-snapshot -s PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform retrieve snapshot for snapshot my-snapshot and service PartitionedCache? (y/n) y Operation retrieve snapshot for snapshot my-snapshot on service PartitionedCache invoked Please use 'cohctl get persistence' to check for idle status to ensure the operation completed This operation will retrieve and archived snapshot and distribute it across all available members. Once it has been retrieved it can be recovered. You must ensure that a snapshot with the same name as the archived snapshot does not exist before you retrieve it. Suspend Service The 'suspend service' command suspends a specific service in all the members of a cluster. Usage cohctl suspend service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl suspend service PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform suspend service for service PartitionedCache? (y/n) y operation completed You can use the command cohctl get services -o wide to show if services have been suspended. Resume Service The 'resume service' command resumes a specific service in all the members of a cluster. Usage cohctl resume service service-name [flags] Flags -h, --help help for service -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl resume service PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to perform resume service for service PartitionedCache? (y/n) y operation completed See Also Persisting Caches in the Coherence Documentation Services ",
            "title": "Persistence"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'get jfrs' command displays the Java Flight Recordings for a cluster. Usage cohctl get jfrs [flags] Flags -h, --help help for jfrs Examples <markup lang=\"bash\" >cohctl get jfrs -c local Output: <markup lang=\"bash\" >Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) ",
            "title": "Get JFRS"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'start jfr' command starts a Java Flight Recording all or selected members. You can specify either a node id or role. If you do not specify either, then the JFR will be run for all members. The default duration is 60 seconds and you can specify a value of 0 to make the recording continuous. Usage cohctl start jfr name [flags] Flags -D, --duration int32 duration for JFR in seconds. Use 0 for continuous (default 60) -h, --help help for jfr -n, --node string node id to target -O, --output-dir string directory on servers to output JFR's to -r, --role string role name to target (default \"all\") -s, --settings-file string settings file to use, options are \"profile\" or a specific file (default \"default\") -y, --yes automatically confirm the operation Examples Start a JFR for all members using the defaults (60 seconds duration) and write the results to the /tmp directory on each of the servers running Coherence members. If you wish to continuously run a Flight Recording, then set the duration to 0 by using -D 0 . <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for all 4 members of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 11. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 11. The result will be written to: /tmp/3-test-1.jfr Member 4-&gt; Started recording 11. The result will be written to: /tmp/4-test-1.jfr Member 6-&gt; Started recording 11. The result will be written to: /tmp/6-test-1.jfr Start a JFR for an individual node. <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -n 2 -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for node id 2 of duration: 60 seconds? (y/n) y Started recording 13. Use jcmd 11339 JFR.stop name=test-1 to copy recording data to file. Start a JFR for all members of a specific role. <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -r CoherenceServer -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for role CoherenceServer of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 14. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 13. The result will be written to: /tmp/3-test-1.jfr ",
            "title": "Start JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'describe jfr' command shows information related to a Java Flight Recording (JFR). Usage cohctl describe jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target Examples <markup lang=\"bash\" >cohctl describe jfr test-1 -c local Output: <markup lang=\"bash\" >Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) ",
            "title": "Describe JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'stop jfr' command stops a Java Flight Recording all or selected members. You can specify either a node or leave the node blank to stop for all nodes. Usage cohctl stop jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop jfr test1 -c local Output: <markup lang=\"bash\" >Are you sure you want to run jfrStop on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Can't stop an already stopped recording. Member 3-&gt; Stopped recording \"test-1\". Member 4-&gt; Stopped recording \"test-1\". Member 6-&gt; Stopped recording \"test-1\". ",
            "title": "Stop JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'dump jfr' command dumps a Java Flight Recording all or selected members. A JFR command mut be in progress for this to succeed. Usage cohctl dump jfr name [flags] Flags -f, --filename string filename for jfr dump -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Normally when a Flight Recording has been finished it will be dump to the output file. If you want to dump the JFR before it has completed, then you can use this command. Examples <markup lang=\"bash\" >cohctl dump jfr test1 -c local Output: <markup lang=\"bash\" >Are you sure you want to run jfrDump on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Dumped recording \"test-1\", 590.9 kB written to: /tmp/hotspot-pid-11339-id-13-2021_11_01_10_15_35.jfr Member 3-&gt; Dumped recording \"test-1\", 420.2 kB written to: /private/tmp/3-test-1.jfr Member 4-&gt; Dumped recording \"test-1\", 383.4 kB written to: /private/tmp/4-test-1.jfr Member 6-&gt; Dumped recording \"test-1\", 466.1 kB written to: /private/tmp/6-test-1.jfr ",
            "title": "Dump JFR"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'dump cluster-heap' command issues a heap dump for all members or the selected role by using the -r flag. Usage cohctl dump cluster-heap [flags] Flags -h, --help help for cluster-heap -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Depending upon your Java heap size and usage, this command can create large files on your temporary file system. Examples Dump cluster heap for all members. <markup lang=\"bash\" >cohctl dump cluster-heap -c local Output: <markup lang=\"bash\" >Are you sure you want to dump cluster heap for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Dump cluster heap for a specific role. <markup lang=\"bash\" >cohctl dump cluster-heap -c local -r TangosolNetCoherence Output: <markup lang=\"bash\" >Are you sure you want to dump cluster heap for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information View the Coherence log files for the location and names of the heap dumps. ",
            "title": "Dump Cluster Heap"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'log cluster-state' command logs a full thread dump and outstanding polls, in the logs files, for all members or the selected role by using the -r flag. Usage cohctl log cluster-state [flags] Flags -h, --help help for cluster-state -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Examples Log cluster state for all members into the cache server log files. <markup lang=\"bash\" >cohctl log cluster-state -c local Output: <markup lang=\"bash\" >Are you sure you want to log cluster state for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Log cluster state for a specific role into the cache server log files. <markup lang=\"bash\" >cohctl log cluster-state -c local -r TangosolNetCoherence Output: <markup lang=\"bash\" >Are you sure you want to log cluster state for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information ",
            "title": "Log Cluster State"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'get thead-dumps' command generates and retrieves thread dumps for all or selected members and places them in the specified output directory. You are also able to specify a role to retrieve thread dumps for. Usage cohctl retrieve thread-dumps [node-ids] [flags] Flags -D, --dump-delay int32 delay between each thread dump (default 10) -h, --help help for thread-dumps -n, --number int32 number of thread dumps to retrieve (default 5) -O, --output-dir string existing directory to output thread dumps to -r, --role string role name to run for (default \"all\") -v, --verbose produces verbose output -y, --yes automatically confirm the operation When taking thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Examples Retrieve thread dumps using the defaults of 5 thread dumps each 10 seconds for all members and place them in the /tmp/ directory. <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp all -c local Output: <markup lang=\"bash\" >This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 4 nodes? (y/n) y Completed 5 of 5 (100.00%)All thread dumps completed and written to /tmp $ ls -l /tmp/thread-dump-node-* -rw-r--r-- 1 user wheel 42507 27 Oct 14:44 /tmp/thread-dump-node-1-1.log -rw-r--r-- 1 user wheel 45422 27 Oct 14:44 /tmp/thread-dump-node-1-2.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-3.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-4.log -rw-r--r-- 1 user wheel 45311 27 Oct 14:45 /tmp/thread-dump-node-1-5.log -rw-r--r-- 1 user wheel 35515 27 Oct 14:44 /tmp/thread-dump-node-2-1.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:44 /tmp/thread-dump-node-2-2.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-3.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-4.log -rw-r--r-- 1 user wheel 35491 27 Oct 14:45 /tmp/thread-dump-node-2-5.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:44 /tmp/thread-dump-node-3-1.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:44 /tmp/thread-dump-node-3-2.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:45 /tmp/thread-dump-node-3-3.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-4.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-5.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-1.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-2.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-3.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-4.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-5.log The files will be named thread-dump-node-N-I.log . Where N is the node id, and I is the iteration. Retrieve 5 thread dumps for members 1 and 3 every 15 seconds and place them in the /tmp/ directory. <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp 1,3 -n 5 -D 15 -c local Output: <markup lang=\"bash\" >This operation will take at least 60 seconds. Are you sure you want to retrieve 5 thread dumps, each 15 seconds apart for 2 nodes? (y/n) y Completed 5 of 5 (100.00%) All thread dumps completed and written to /tmp Retrieve thread dumps for a given role: <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp/ -r TangosolNetCoherence -c local Output: <markup lang=\"bash\" >This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 2 node(s)? (y/n) ",
            "title": "Retrieve Thread Dumps"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'configure tracing' command configures tracing for all members or the selected role by using the -r flag. You can specify a tracingRatio of -1 to turn off tracing. Usage cohctl configure tracing [flags] Flags -h, --help help for tracing -r, --role string role name to configure tracing for -t, --tracingRatio float32 tracing ratio to set. -1.0 turns off tracing (default 1) -y, --yes automatically confirm the operation Examples Configure tracing for all members with tracing ratio of 0. <markup lang=\"bash\" >cohctl configure tracing -t 0 -c local Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio 0 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Configure tracing for a specific role with tracing ratio of 1.0 <markup lang=\"bash\" >cohctl configure tracing -t 1.0 -r TangosolNetCoherence -c local Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio 1 for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Turn off tracing for all members by setting tracing ratio to -1.0. <markup lang=\"bash\" >cohctl configure tracing -t -1.0 Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio -1 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information ",
            "title": "Configure Tracing"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'get tracing' command displays tracing status for all members. Usage cohctl get tracing [flags] Flags -h, --help help for tracing Examples Display tracing for all members. <markup lang=\"bash\" >cohctl get tracing -c local Output: <markup lang=\"bash\" >NODE ID ADDRESS PORT PROCESS MEMBER ROLE TRACING ENABLED SAMPLING RATIO 1 /127.0.0.1 62255 13464 n/a DefaultCacheServer true 1.000 ",
            "title": "Get Tracing"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " The 'get environment' command returns the environment information for a member. This includes details of the JVM as well as system properties. Usage cohctl get environment node-id [flags] Flags -h, --help help for environment Examples Display the member environment for a member. <markup lang=\"bash\" >cohctl get environment 1 -c local Output: <markup lang=\"bash\" >Java Version: 11.0.10 Java Vendor: - Name: Oracle Corporation - Version: 18.9 Java Virtual Machine: ... Output has been truncated above. ",
            "title": "Get Environment"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " There are various commands that allow you to obtain diagnostic output such as Java Flight Recordings or JFR&#8217;s, heap dumps and thread dumps. cohctl get jfrs - display the JFR&#8217;s for a cluster cohctl start jfr - start a JFR for all or selected members cohctl describe jfr - describe a JFR cohctl stop jfr - stop a JFR for all or selected members cohctl dump jfr - dump a JFR that is running for all or selected members cohctl dump cluster-heap - dumps the cluster heap for all or specific roles cohctl log cluster-state - logs the cluster state via, a thread dump, for all or specific roles cohctl retrieve thread-dumps - retrieves thread dumps for all or specific nodes cohctl configure tracing - configures tracing for all members or a specific role cohctl get tracing - displays tracing status for all members cohctl get environment - displays the environment for a member Get JFRS The 'get jfrs' command displays the Java Flight Recordings for a cluster. Usage cohctl get jfrs [flags] Flags -h, --help help for jfrs Examples <markup lang=\"bash\" >cohctl get jfrs -c local Output: <markup lang=\"bash\" >Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Start JFR The 'start jfr' command starts a Java Flight Recording all or selected members. You can specify either a node id or role. If you do not specify either, then the JFR will be run for all members. The default duration is 60 seconds and you can specify a value of 0 to make the recording continuous. Usage cohctl start jfr name [flags] Flags -D, --duration int32 duration for JFR in seconds. Use 0 for continuous (default 60) -h, --help help for jfr -n, --node string node id to target -O, --output-dir string directory on servers to output JFR's to -r, --role string role name to target (default \"all\") -s, --settings-file string settings file to use, options are \"profile\" or a specific file (default \"default\") -y, --yes automatically confirm the operation Examples Start a JFR for all members using the defaults (60 seconds duration) and write the results to the /tmp directory on each of the servers running Coherence members. If you wish to continuously run a Flight Recording, then set the duration to 0 by using -D 0 . <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for all 4 members of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 11. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 11. The result will be written to: /tmp/3-test-1.jfr Member 4-&gt; Started recording 11. The result will be written to: /tmp/4-test-1.jfr Member 6-&gt; Started recording 11. The result will be written to: /tmp/6-test-1.jfr Start a JFR for an individual node. <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -n 2 -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for node id 2 of duration: 60 seconds? (y/n) y Started recording 13. Use jcmd 11339 JFR.stop name=test-1 to copy recording data to file. Start a JFR for all members of a specific role. <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -r CoherenceServer -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for role CoherenceServer of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 14. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 13. The result will be written to: /tmp/3-test-1.jfr Describe JFR The 'describe jfr' command shows information related to a Java Flight Recording (JFR). Usage cohctl describe jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target Examples <markup lang=\"bash\" >cohctl describe jfr test-1 -c local Output: <markup lang=\"bash\" >Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Stop JFR The 'stop jfr' command stops a Java Flight Recording all or selected members. You can specify either a node or leave the node blank to stop for all nodes. Usage cohctl stop jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop jfr test1 -c local Output: <markup lang=\"bash\" >Are you sure you want to run jfrStop on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Can't stop an already stopped recording. Member 3-&gt; Stopped recording \"test-1\". Member 4-&gt; Stopped recording \"test-1\". Member 6-&gt; Stopped recording \"test-1\". Dump JFR The 'dump jfr' command dumps a Java Flight Recording all or selected members. A JFR command mut be in progress for this to succeed. Usage cohctl dump jfr name [flags] Flags -f, --filename string filename for jfr dump -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Normally when a Flight Recording has been finished it will be dump to the output file. If you want to dump the JFR before it has completed, then you can use this command. Examples <markup lang=\"bash\" >cohctl dump jfr test1 -c local Output: <markup lang=\"bash\" >Are you sure you want to run jfrDump on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Dumped recording \"test-1\", 590.9 kB written to: /tmp/hotspot-pid-11339-id-13-2021_11_01_10_15_35.jfr Member 3-&gt; Dumped recording \"test-1\", 420.2 kB written to: /private/tmp/3-test-1.jfr Member 4-&gt; Dumped recording \"test-1\", 383.4 kB written to: /private/tmp/4-test-1.jfr Member 6-&gt; Dumped recording \"test-1\", 466.1 kB written to: /private/tmp/6-test-1.jfr Dump Cluster Heap The 'dump cluster-heap' command issues a heap dump for all members or the selected role by using the -r flag. Usage cohctl dump cluster-heap [flags] Flags -h, --help help for cluster-heap -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Depending upon your Java heap size and usage, this command can create large files on your temporary file system. Examples Dump cluster heap for all members. <markup lang=\"bash\" >cohctl dump cluster-heap -c local Output: <markup lang=\"bash\" >Are you sure you want to dump cluster heap for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Dump cluster heap for a specific role. <markup lang=\"bash\" >cohctl dump cluster-heap -c local -r TangosolNetCoherence Output: <markup lang=\"bash\" >Are you sure you want to dump cluster heap for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information View the Coherence log files for the location and names of the heap dumps. Log Cluster State The 'log cluster-state' command logs a full thread dump and outstanding polls, in the logs files, for all members or the selected role by using the -r flag. Usage cohctl log cluster-state [flags] Flags -h, --help help for cluster-state -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Examples Log cluster state for all members into the cache server log files. <markup lang=\"bash\" >cohctl log cluster-state -c local Output: <markup lang=\"bash\" >Are you sure you want to log cluster state for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Log cluster state for a specific role into the cache server log files. <markup lang=\"bash\" >cohctl log cluster-state -c local -r TangosolNetCoherence Output: <markup lang=\"bash\" >Are you sure you want to log cluster state for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Retrieve Thread Dumps The 'get thead-dumps' command generates and retrieves thread dumps for all or selected members and places them in the specified output directory. You are also able to specify a role to retrieve thread dumps for. Usage cohctl retrieve thread-dumps [node-ids] [flags] Flags -D, --dump-delay int32 delay between each thread dump (default 10) -h, --help help for thread-dumps -n, --number int32 number of thread dumps to retrieve (default 5) -O, --output-dir string existing directory to output thread dumps to -r, --role string role name to run for (default \"all\") -v, --verbose produces verbose output -y, --yes automatically confirm the operation When taking thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Examples Retrieve thread dumps using the defaults of 5 thread dumps each 10 seconds for all members and place them in the /tmp/ directory. <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp all -c local Output: <markup lang=\"bash\" >This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 4 nodes? (y/n) y Completed 5 of 5 (100.00%)All thread dumps completed and written to /tmp $ ls -l /tmp/thread-dump-node-* -rw-r--r-- 1 user wheel 42507 27 Oct 14:44 /tmp/thread-dump-node-1-1.log -rw-r--r-- 1 user wheel 45422 27 Oct 14:44 /tmp/thread-dump-node-1-2.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-3.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-4.log -rw-r--r-- 1 user wheel 45311 27 Oct 14:45 /tmp/thread-dump-node-1-5.log -rw-r--r-- 1 user wheel 35515 27 Oct 14:44 /tmp/thread-dump-node-2-1.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:44 /tmp/thread-dump-node-2-2.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-3.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-4.log -rw-r--r-- 1 user wheel 35491 27 Oct 14:45 /tmp/thread-dump-node-2-5.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:44 /tmp/thread-dump-node-3-1.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:44 /tmp/thread-dump-node-3-2.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:45 /tmp/thread-dump-node-3-3.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-4.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-5.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-1.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-2.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-3.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-4.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-5.log The files will be named thread-dump-node-N-I.log . Where N is the node id, and I is the iteration. Retrieve 5 thread dumps for members 1 and 3 every 15 seconds and place them in the /tmp/ directory. <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp 1,3 -n 5 -D 15 -c local Output: <markup lang=\"bash\" >This operation will take at least 60 seconds. Are you sure you want to retrieve 5 thread dumps, each 15 seconds apart for 2 nodes? (y/n) y Completed 5 of 5 (100.00%) All thread dumps completed and written to /tmp Retrieve thread dumps for a given role: <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp/ -r TangosolNetCoherence -c local Output: <markup lang=\"bash\" >This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 2 node(s)? (y/n) Configure Tracing The 'configure tracing' command configures tracing for all members or the selected role by using the -r flag. You can specify a tracingRatio of -1 to turn off tracing. Usage cohctl configure tracing [flags] Flags -h, --help help for tracing -r, --role string role name to configure tracing for -t, --tracingRatio float32 tracing ratio to set. -1.0 turns off tracing (default 1) -y, --yes automatically confirm the operation Examples Configure tracing for all members with tracing ratio of 0. <markup lang=\"bash\" >cohctl configure tracing -t 0 -c local Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio 0 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Configure tracing for a specific role with tracing ratio of 1.0 <markup lang=\"bash\" >cohctl configure tracing -t 1.0 -r TangosolNetCoherence -c local Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio 1 for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Turn off tracing for all members by setting tracing ratio to -1.0. <markup lang=\"bash\" >cohctl configure tracing -t -1.0 Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio -1 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Get Tracing The 'get tracing' command displays tracing status for all members. Usage cohctl get tracing [flags] Flags -h, --help help for tracing Examples Display tracing for all members. <markup lang=\"bash\" >cohctl get tracing -c local Output: <markup lang=\"bash\" >NODE ID ADDRESS PORT PROCESS MEMBER ROLE TRACING ENABLED SAMPLING RATIO 1 /127.0.0.1 62255 13464 n/a DefaultCacheServer true 1.000 Get Environment The 'get environment' command returns the environment information for a member. This includes details of the JVM as well as system properties. Usage cohctl get environment node-id [flags] Flags -h, --help help for environment Examples Display the member environment for a member. <markup lang=\"bash\" >cohctl get environment 1 -c local Output: <markup lang=\"bash\" >Java Version: 11.0.10 Java Vendor: - Name: Oracle Corporation - Version: 18.9 Java Virtual Machine: ... Output has been truncated above. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " Members Distributed Tracing in Coherence ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/85_diagnostics",
            "text": " Overview There are various commands that allow you to obtain diagnostic output such as Java Flight Recordings or JFR&#8217;s, heap dumps and thread dumps. cohctl get jfrs - display the JFR&#8217;s for a cluster cohctl start jfr - start a JFR for all or selected members cohctl describe jfr - describe a JFR cohctl stop jfr - stop a JFR for all or selected members cohctl dump jfr - dump a JFR that is running for all or selected members cohctl dump cluster-heap - dumps the cluster heap for all or specific roles cohctl log cluster-state - logs the cluster state via, a thread dump, for all or specific roles cohctl retrieve thread-dumps - retrieves thread dumps for all or specific nodes cohctl configure tracing - configures tracing for all members or a specific role cohctl get tracing - displays tracing status for all members cohctl get environment - displays the environment for a member Get JFRS The 'get jfrs' command displays the Java Flight Recordings for a cluster. Usage cohctl get jfrs [flags] Flags -h, --help help for jfrs Examples <markup lang=\"bash\" >cohctl get jfrs -c local Output: <markup lang=\"bash\" >Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Start JFR The 'start jfr' command starts a Java Flight Recording all or selected members. You can specify either a node id or role. If you do not specify either, then the JFR will be run for all members. The default duration is 60 seconds and you can specify a value of 0 to make the recording continuous. Usage cohctl start jfr name [flags] Flags -D, --duration int32 duration for JFR in seconds. Use 0 for continuous (default 60) -h, --help help for jfr -n, --node string node id to target -O, --output-dir string directory on servers to output JFR's to -r, --role string role name to target (default \"all\") -s, --settings-file string settings file to use, options are \"profile\" or a specific file (default \"default\") -y, --yes automatically confirm the operation Examples Start a JFR for all members using the defaults (60 seconds duration) and write the results to the /tmp directory on each of the servers running Coherence members. If you wish to continuously run a Flight Recording, then set the duration to 0 by using -D 0 . <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for all 4 members of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 11. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 11. The result will be written to: /tmp/3-test-1.jfr Member 4-&gt; Started recording 11. The result will be written to: /tmp/4-test-1.jfr Member 6-&gt; Started recording 11. The result will be written to: /tmp/6-test-1.jfr Start a JFR for an individual node. <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -n 2 -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for node id 2 of duration: 60 seconds? (y/n) y Started recording 13. Use jcmd 11339 JFR.stop name=test-1 to copy recording data to file. Start a JFR for all members of a specific role. <markup lang=\"bash\" >cohctl start jfr test-1 -O /tmp/ -r CoherenceServer -c local Output: <markup lang=\"bash\" >Are you sure you want to start a JFR named test-1 for role CoherenceServer of duration: 60 seconds? (y/n) y Member 2-&gt; Started recording 14. The result will be written to: /tmp/2-test-1.jfr Member 3-&gt; Started recording 13. The result will be written to: /tmp/3-test-1.jfr Describe JFR The 'describe jfr' command shows information related to a Java Flight Recording (JFR). Usage cohctl describe jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target Examples <markup lang=\"bash\" >cohctl describe jfr test-1 -c local Output: <markup lang=\"bash\" >Member 2-&gt; Recording 12: name=test-1 duration=1m (running) Member 3-&gt; Recording 12: name=test-1 duration=1m (running) Member 4-&gt; Recording 12: name=test-1 duration=1m (running) Member 6-&gt; Recording 12: name=test-1 duration=1m (running) Stop JFR The 'stop jfr' command stops a Java Flight Recording all or selected members. You can specify either a node or leave the node blank to stop for all nodes. Usage cohctl stop jfr name [flags] Flags -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop jfr test1 -c local Output: <markup lang=\"bash\" >Are you sure you want to run jfrStop on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Can't stop an already stopped recording. Member 3-&gt; Stopped recording \"test-1\". Member 4-&gt; Stopped recording \"test-1\". Member 6-&gt; Stopped recording \"test-1\". Dump JFR The 'dump jfr' command dumps a Java Flight Recording all or selected members. A JFR command mut be in progress for this to succeed. Usage cohctl dump jfr name [flags] Flags -f, --filename string filename for jfr dump -h, --help help for jfr -n, --node string node id to target -y, --yes automatically confirm the operation Normally when a Flight Recording has been finished it will be dump to the output file. If you want to dump the JFR before it has completed, then you can use this command. Examples <markup lang=\"bash\" >cohctl dump jfr test1 -c local Output: <markup lang=\"bash\" >Are you sure you want to run jfrDump on a JFR named test-1 for all 4 members ? (y/n) y Member 2-&gt; Dumped recording \"test-1\", 590.9 kB written to: /tmp/hotspot-pid-11339-id-13-2021_11_01_10_15_35.jfr Member 3-&gt; Dumped recording \"test-1\", 420.2 kB written to: /private/tmp/3-test-1.jfr Member 4-&gt; Dumped recording \"test-1\", 383.4 kB written to: /private/tmp/4-test-1.jfr Member 6-&gt; Dumped recording \"test-1\", 466.1 kB written to: /private/tmp/6-test-1.jfr Dump Cluster Heap The 'dump cluster-heap' command issues a heap dump for all members or the selected role by using the -r flag. Usage cohctl dump cluster-heap [flags] Flags -h, --help help for cluster-heap -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Depending upon your Java heap size and usage, this command can create large files on your temporary file system. Examples Dump cluster heap for all members. <markup lang=\"bash\" >cohctl dump cluster-heap -c local Output: <markup lang=\"bash\" >Are you sure you want to dump cluster heap for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Dump cluster heap for a specific role. <markup lang=\"bash\" >cohctl dump cluster-heap -c local -r TangosolNetCoherence Output: <markup lang=\"bash\" >Are you sure you want to dump cluster heap for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information View the Coherence log files for the location and names of the heap dumps. Log Cluster State The 'log cluster-state' command logs a full thread dump and outstanding polls, in the logs files, for all members or the selected role by using the -r flag. Usage cohctl log cluster-state [flags] Flags -h, --help help for cluster-state -r, --role string role name to run for (default \"all\") -y, --yes automatically confirm the operation Examples Log cluster state for all members into the cache server log files. <markup lang=\"bash\" >cohctl log cluster-state -c local Output: <markup lang=\"bash\" >Are you sure you want to log cluster state for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Log cluster state for a specific role into the cache server log files. <markup lang=\"bash\" >cohctl log cluster-state -c local -r TangosolNetCoherence Output: <markup lang=\"bash\" >Are you sure you want to log cluster state for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Retrieve Thread Dumps The 'get thead-dumps' command generates and retrieves thread dumps for all or selected members and places them in the specified output directory. You are also able to specify a role to retrieve thread dumps for. Usage cohctl retrieve thread-dumps [node-ids] [flags] Flags -D, --dump-delay int32 delay between each thread dump (default 10) -h, --help help for thread-dumps -n, --number int32 number of thread dumps to retrieve (default 5) -O, --output-dir string existing directory to output thread dumps to -r, --role string role name to run for (default \"all\") -v, --verbose produces verbose output -y, --yes automatically confirm the operation When taking thread dumps, if you want full deadlock analysis, you should set the following system property on your Coherence JVMS -Dcom.oracle.coherence.common.util.Threads.dumpLocks=FULL Examples Retrieve thread dumps using the defaults of 5 thread dumps each 10 seconds for all members and place them in the /tmp/ directory. <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp all -c local Output: <markup lang=\"bash\" >This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 4 nodes? (y/n) y Completed 5 of 5 (100.00%)All thread dumps completed and written to /tmp $ ls -l /tmp/thread-dump-node-* -rw-r--r-- 1 user wheel 42507 27 Oct 14:44 /tmp/thread-dump-node-1-1.log -rw-r--r-- 1 user wheel 45422 27 Oct 14:44 /tmp/thread-dump-node-1-2.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-3.log -rw-r--r-- 1 user wheel 45299 27 Oct 14:45 /tmp/thread-dump-node-1-4.log -rw-r--r-- 1 user wheel 45311 27 Oct 14:45 /tmp/thread-dump-node-1-5.log -rw-r--r-- 1 user wheel 35515 27 Oct 14:44 /tmp/thread-dump-node-2-1.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:44 /tmp/thread-dump-node-2-2.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-3.log -rw-r--r-- 1 user wheel 35503 27 Oct 14:45 /tmp/thread-dump-node-2-4.log -rw-r--r-- 1 user wheel 35491 27 Oct 14:45 /tmp/thread-dump-node-2-5.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:44 /tmp/thread-dump-node-3-1.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:44 /tmp/thread-dump-node-3-2.log -rw-r--r-- 1 user wheel 31579 27 Oct 14:45 /tmp/thread-dump-node-3-3.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-4.log -rw-r--r-- 1 user wheel 31591 27 Oct 14:45 /tmp/thread-dump-node-3-5.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-1.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:44 /tmp/thread-dump-node-4-2.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-3.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-4.log -rw-r--r-- 1 user wheel 31587 27 Oct 14:45 /tmp/thread-dump-node-4-5.log The files will be named thread-dump-node-N-I.log . Where N is the node id, and I is the iteration. Retrieve 5 thread dumps for members 1 and 3 every 15 seconds and place them in the /tmp/ directory. <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp 1,3 -n 5 -D 15 -c local Output: <markup lang=\"bash\" >This operation will take at least 60 seconds. Are you sure you want to retrieve 5 thread dumps, each 15 seconds apart for 2 nodes? (y/n) y Completed 5 of 5 (100.00%) All thread dumps completed and written to /tmp Retrieve thread dumps for a given role: <markup lang=\"bash\" >cohctl retrieve thread-dumps -O /tmp/ -r TangosolNetCoherence -c local Output: <markup lang=\"bash\" >This operation will take at least 40 seconds. Are you sure you want to retrieve 5 thread dumps, each 10 seconds apart for 2 node(s)? (y/n) Configure Tracing The 'configure tracing' command configures tracing for all members or the selected role by using the -r flag. You can specify a tracingRatio of -1 to turn off tracing. Usage cohctl configure tracing [flags] Flags -h, --help help for tracing -r, --role string role name to configure tracing for -t, --tracingRatio float32 tracing ratio to set. -1.0 turns off tracing (default 1) -y, --yes automatically confirm the operation Examples Configure tracing for all members with tracing ratio of 0. <markup lang=\"bash\" >cohctl configure tracing -t 0 -c local Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio 0 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Configure tracing for a specific role with tracing ratio of 1.0 <markup lang=\"bash\" >cohctl configure tracing -t 1.0 -r TangosolNetCoherence -c local Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio 1 for 2 members with role TangosolNetCoherence? (y/n) y Operation completed. Please see cache server log file for more information Turn off tracing for all members by setting tracing ratio to -1.0. <markup lang=\"bash\" >cohctl configure tracing -t -1.0 Output: <markup lang=\"bash\" >Are you sure you want to configure tracing to tracing ratio -1 for all 3 members? (y/n) y Operation completed. Please see cache server log file for more information Get Tracing The 'get tracing' command displays tracing status for all members. Usage cohctl get tracing [flags] Flags -h, --help help for tracing Examples Display tracing for all members. <markup lang=\"bash\" >cohctl get tracing -c local Output: <markup lang=\"bash\" >NODE ID ADDRESS PORT PROCESS MEMBER ROLE TRACING ENABLED SAMPLING RATIO 1 /127.0.0.1 62255 13464 n/a DefaultCacheServer true 1.000 Get Environment The 'get environment' command returns the environment information for a member. This includes details of the JVM as well as system properties. Usage cohctl get environment node-id [flags] Flags -h, --help help for environment Examples Display the member environment for a member. <markup lang=\"bash\" >cohctl get environment 1 -c local Output: <markup lang=\"bash\" >Java Version: 11.0.10 Java Vendor: - Name: Oracle Corporation - Version: 18.9 Java Virtual Machine: ... Output has been truncated above. See Also Members Distributed Tracing in Coherence ",
            "title": "Diagnostics"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get topics' command displays topics for a cluster. Usage cohctl get topics [flags] Flags -h, --help help for topics -s, --service string Service name Examples Display all topics. <markup lang=\"bash\" >cohctl get topics -c local Output: <markup lang=\"bash\" >SERVICE TOPIC MEMBERS CHANNELS SUBSCRIBERS PUBLISHED PartitionedTopic private-messages 1 17 1 0 PartitionedTopic public-messages 1 17 1 0 ",
            "title": "Get Topics"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'describe topic' command shows information related to a topic and service. Usage cohctl describe topic topic-name [flags] Flags -h, --help help for topic -s, --service string Service name <markup lang=\"bash\" >cohctl describe topic private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >TOPIC DETAILS ------------- Name : private-messages Service : PartitionedTopic Channels : 17 Members : 1 Published Count: 0 Subscribers : 1 MEMBERS ------- NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN 1 17 0 0.0000 0.0000 0.0000 0.0000 SUBSCRIBERS ----------- NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 1 5850459679 Connected 17 1 0 0 0 SUBSCRIBER GROUPS ----------------- SUBSCRIBER GROUP NODE ID CHANNELS POLLED MEAN 1 MIN 5 MIN 15 MIN 1 1 17 0 0.0000 0.0000 0.0000 0.0000 1 2 17 0 0.0000 0.0000 0.0000 0.0000 admin 1 17 0 0.0000 0.0000 0.0000 0.0000 admin 2 17 0 0.0000 0.0000 0.0000 0.0000 ",
            "title": "Describe Topic"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get topic-members' command displays members for topic and service. Usage cohctl get topic-members topic-name [flags] Flags -h, --help help for topic-members -s, --service string Service name Examples Display all members for a topic using the wide option <markup lang=\"bash\" >cohctl get topic-members private-messages -s PartitionedTopic -o wide -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN SUB TIMEOUT RECON TIMEOUT WAIT PAGE CAPACITY 1 17 0 0.0000 0.0000 0.0000 0.0000 300,000ms 300,000ms 10,000ms 1,048,576 2 17 0 0.0000 0.0000 0.0000 0.0000 300,000ms 300,000ms 10,000ms 1,048,576 ",
            "title": "Get Topic Members"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get topic-channels' command displays channel details for a topic, service and node. Usage cohctl get topic-channels topic-name [flags] Flags -h, --help help for topic-channels -n, --node int32 node id to show channels for -s, --service string Service name Examples Display the channels for a topic, service and node. <markup lang=\"bash\" >cohctl get topic-members private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN 4 17 0 0.0000 0.0000 0.0000 0.0000 5 17 0 0.0000 0.0000 0.0000 0.0000 6 17 0 0.0000 0.0000 0.0000 0.0000 <markup lang=\"bash\" >cohctl get topic-channels private-messages -s PartitionedTopic -n 4 -c local Service: PartitionedTopic Topic: private-messages Node ID: 4 ChannelCount: 17 CHANNEL PUBLISHED MEAN 1 MIN 5 MIN 15 MIN TAIL 0 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 2 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 3 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 4 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 5 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 6 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 7 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 8 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 9 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 10 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 11 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 12 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 13 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 14 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 15 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 16 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) ",
            "title": "Get Topic Channels"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get subscribers' command displays subscribers for a topic and service. Usage cohctl get subscribers topic-name [flags] Flags -h, --help help for subscribers -s, --service string Service name Examples Display the subscribers for a topic and service. <markup lang=\"bash\" >cohctl get subscribers private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG TYPE OWNED CHANNELS 4 17663538530 Connected 9/17 1 0 0 0 Durable 0,1,2,3,4,5,6,7,16 5 23267662748 Connected 8/17 1 0 0 0 Durable 8,9,10,11,12,13,14,15 ",
            "title": "Get Subscribers"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get subscriber-channels' command displays channel details for a topic, service and subscriber. Usage cohctl get subscriber-channels topic-name [flags] Flags -h, --help help for subscriber-channels -s, --service string Service name -S, --subscriber int subscriber id Examples Display the subscribers channels for a topic, service and subscriber. <markup lang=\"bash\" >cohctl get subscribers private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 4 17663538530 Connected 17 1 0 0 0 5 23267662748 Connected 17 1 0 0 0 6 26845397584 Connected 17 1 0 0 0 <markup lang=\"bash\" >cohctl get subscriber-channels private-messages -s PartitionedTopic -S 17663538530 -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages Node ID: 4 ChannelCount: 17 Subscriber Group: 17663538530 CHANNEL EMPTY LAST COMMIT LAST REC OWNED HEAD 0 true null null true PagedPosition(page=66, offset=0) 1 true null null true PagedPosition(page=66, offset=0) 2 true null null true PagedPosition(page=66, offset=0) 3 true null null true PagedPosition(page=66, offset=0) 4 true null null true PagedPosition(page=66, offset=0) 5 false null null false PagedPosition(page=66, offset=0) 6 false null null false PagedPosition(page=66, offset=0) 7 false null null false PagedPosition(page=66, offset=0) 8 false null null false PagedPosition(page=66, offset=0) 9 false null null false PagedPosition(page=66, offset=0) 10 false null null false PagedPosition(page=66, offset=0) 11 false null null false PagedPosition(page=66, offset=0) 12 false null null false PagedPosition(page=66, offset=0) 13 false null null false PagedPosition(page=66, offset=0) 14 false null null false PagedPosition(page=66, offset=0) 15 true null null true PagedPosition(page=66, offset=0) 16 false null null false PagedPosition(page=66, offset=0) ",
            "title": "Get Subscriber Channels"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get subscribers' command displays subscriber-groups for a topic and service. Usage cohctl get subscriber-groups topic-name [flags] Flags -h, --help help for subscriber-groups -s, --service string Service name Examples Display the subscriber groups for a topic and service. <markup lang=\"bash\" >cohctl get subscriber-groups private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages SUBSCRIBER GROUP NODE ID CHANNELS POLLED MEAN 1 MIN 5 MIN 15 MIN 1 1 17 0 0.0000 0.0000 0.0000 0.0000 1 2 17 0 0.0000 0.0000 0.0000 0.0000 1 3 17 0 0.0000 0.0000 0.0000 0.0000 admin 1 17 0 0.0000 0.0000 0.0000 0.0000 admin 2 17 0 0.0000 0.0000 0.0000 0.0000 admin 3 17 0 0.0000 0.0000 0.0000 0.0000 ",
            "title": "Get Subscriber Groups"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'get sub-grp-channels' command displays channel details for a topic, service, node and subscriber group. Usage cohctl get sub-grp-channels topic-name [flags] Flags -h, --help help for sub-grp-channels -n, --node int32 node id to show channels for -s, --service string Service name -G, --subscriber-group string subscriber group Examples Display subscriber group channels a topic, service, node and subscriber group. <markup lang=\"bash\" >cohctl get sub-grp-channels private-messages -s PartitionedTopic -n 3 -G admin -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages Node ID: 3 ChannelCount: 17 Subscriber Group: admin CHANNEL OWNING SUB MEMBER POLLED MEAN 1 MIN 5 MIN 15 MIN HEAD 0 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 1 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 2 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 3 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 4 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 5 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 6 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 7 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 8 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 9 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 10 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 11 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 12 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 13 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 14 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 15 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 16 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) ",
            "title": "Get Subscriber Group Channels"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'disconnect all' command instructs a topic to disconnect all subscribers for a specific subscriber topic or all subscribers for the specified subscriber group. Usage cohctl disconnect all topic-name [flags] Flags -h, --help help for all -s, --service string Service name -G, --subscriber-group string subscriber group -y, --yes automatically confirm the operation Examples Disconnect all subscribers for the topic 'sms-messages'. <markup lang=\"bash\" >cohctl disconnect all sms-messages -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect all' for topic sms-messages and service PartitionedTopic? (y/n) y operation completed Disconnect all subscribers for the topic 'sms-messages' and subscriber group 'sms-processor'. <markup lang=\"bash\" >cohctl disconnect all sms-messages -G sms-processor -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect all' for topic sms-messages, service PartitionedTopic and subscriber group sms-processor? (y/n) y operation completed ",
            "title": "Disconnect All"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'connect subscriber' command instructs a subscriber to ensure it is connected given a topic, service and subscriber id. Usage cohctl connect subscriber topic-name [flags] Flags -h, --help help for subscriber -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl get subscribers public-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: public-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 4 17179869184 Connected 17 1 7,406 0 0 <markup lang=\"bash\" >cohctl connect subscriber public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'connect' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed ",
            "title": "Connect Subscriber"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'disconnect subscriber' command instructs a subscriber to disconnect and reset itself given a topic, service and subscriber id. Usage cohctl disconnect subscriber topic-name [flags] Flags -h, --help help for subscriber -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl dicconnect subscriber public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed ",
            "title": "Disconnects Subscriber"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'retrieve heads' command instructs a subscriber to retrieve the current head positions for each channel given a topic, service and subscriber id. Usage cohctl retrieve heads topic-name [flags] Flags -h, --help help for heads -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl retrieve heads public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'retrieve current heads' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y Service: PartitionedTopic Topic: public-messages Subscriber: 17179869184 CHANNEL POSITION 0 PagedPosition(page=96, offset=3082) 1 PagedPosition(page=96, offset=3411) 2 PagedPosition(page=97, offset=0) 3 PagedPosition(page=97, offset=0) 4 PagedPosition(page=97, offset=0) 5 PagedPosition(page=97, offset=0) 6 PagedPosition(page=97, offset=0) 7 PagedPosition(page=97, offset=0) 8 PagedPosition(page=97, offset=0) 9 PagedPosition(page=97, offset=0) 10 PagedPosition(page=97, offset=0) 11 PagedPosition(page=97, offset=0) 12 PagedPosition(page=97, offset=0) 13 PagedPosition(page=96, offset=1953) 14 PagedPosition(page=96, offset=2037) 15 PagedPosition(page=96, offset=2405) 16 PagedPosition(page=96, offset=2625) ",
            "title": "Retrieve Heads"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'retrieve header' command instructs a subscriber to retrieve the the count of remaining messages for each channel given a topic, service and subscriber id. Usage cohctl retrieve remaining topic-name [flags] Flags -h, --help help for remaining -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl retrieve remaining public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'retrieve remaining messages' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed ",
            "title": "Retrieve Remaining"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " The 'notify populated' command instructs a subscriber to send a channel populated notification to this subscriber and channel given a topic, service, subscriber id and channel. Usage cohctl notify populated topic-name [flags] Flags -C, --channel int32 channel to notify -h, --help help for populated -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl notify populated public-messages -s PartitionedTopic -S 17179869184 -C 16 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'notify populated' for topic public-messages, service PartitionedTopic, subscriber 17179869184 and channel 16? (y/n) y operation completed ",
            "title": "Notify Populated"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " There are various commands that allow you to work with and manage cluster topics. cohctl get topics - displays topics for a cluster cohctl describe topic - describe a topic cohctl get topic-members - displays members for a topic cohctl get topic-channels - displays channel details for a topic, service and node cohctl get subscribers - displays subscribers for a topic and service cohctl get subscriber-channels - displays channel details for a topic, service and subscriber cohctl get subscriber-groups - displays subscriber-groups for a topic and service cohctl get sub-grp-channels - displays channel details for a topic, service, node and subscriber group cohctl disconnect all - instructs a topic to disconnect all subscribers for a topic or subscriber group Subscriber Specific Operations cohctl connect subscriber - instructs a subscriber to ensure it is connected cohctl disconnect subscriber - instructs a subscriber to disconnect and reset itself cohctl retrieve heads - instructs a subscriber to retrieve the current head positions for each channel cohctl retrieve remaining - instructs a subscriber to retrieve the count of remaining messages for each channel cohctl notify populated - instructs a subscriber to send a channel populated notification to this subscriber and channel These topics commands are available to run against Coherence CE editions 22.06.4+, 22.09.1+ 23.03.+ as well as Coherence Grid Edition 14.1.1.2206.4+. In most commands you may omit the service name option if the topic name is unique. Get Topics The 'get topics' command displays topics for a cluster. Usage cohctl get topics [flags] Flags -h, --help help for topics -s, --service string Service name Examples Display all topics. <markup lang=\"bash\" >cohctl get topics -c local Output: <markup lang=\"bash\" >SERVICE TOPIC MEMBERS CHANNELS SUBSCRIBERS PUBLISHED PartitionedTopic private-messages 1 17 1 0 PartitionedTopic public-messages 1 17 1 0 Describe Topic The 'describe topic' command shows information related to a topic and service. Usage cohctl describe topic topic-name [flags] Flags -h, --help help for topic -s, --service string Service name <markup lang=\"bash\" >cohctl describe topic private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >TOPIC DETAILS ------------- Name : private-messages Service : PartitionedTopic Channels : 17 Members : 1 Published Count: 0 Subscribers : 1 MEMBERS ------- NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN 1 17 0 0.0000 0.0000 0.0000 0.0000 SUBSCRIBERS ----------- NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 1 5850459679 Connected 17 1 0 0 0 SUBSCRIBER GROUPS ----------------- SUBSCRIBER GROUP NODE ID CHANNELS POLLED MEAN 1 MIN 5 MIN 15 MIN 1 1 17 0 0.0000 0.0000 0.0000 0.0000 1 2 17 0 0.0000 0.0000 0.0000 0.0000 admin 1 17 0 0.0000 0.0000 0.0000 0.0000 admin 2 17 0 0.0000 0.0000 0.0000 0.0000 Get Topic Members The 'get topic-members' command displays members for topic and service. Usage cohctl get topic-members topic-name [flags] Flags -h, --help help for topic-members -s, --service string Service name Examples Display all members for a topic using the wide option <markup lang=\"bash\" >cohctl get topic-members private-messages -s PartitionedTopic -o wide -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN SUB TIMEOUT RECON TIMEOUT WAIT PAGE CAPACITY 1 17 0 0.0000 0.0000 0.0000 0.0000 300,000ms 300,000ms 10,000ms 1,048,576 2 17 0 0.0000 0.0000 0.0000 0.0000 300,000ms 300,000ms 10,000ms 1,048,576 Get Topic Channels The 'get topic-channels' command displays channel details for a topic, service and node. Usage cohctl get topic-channels topic-name [flags] Flags -h, --help help for topic-channels -n, --node int32 node id to show channels for -s, --service string Service name Examples Display the channels for a topic, service and node. <markup lang=\"bash\" >cohctl get topic-members private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN 4 17 0 0.0000 0.0000 0.0000 0.0000 5 17 0 0.0000 0.0000 0.0000 0.0000 6 17 0 0.0000 0.0000 0.0000 0.0000 <markup lang=\"bash\" >cohctl get topic-channels private-messages -s PartitionedTopic -n 4 -c local Service: PartitionedTopic Topic: private-messages Node ID: 4 ChannelCount: 17 CHANNEL PUBLISHED MEAN 1 MIN 5 MIN 15 MIN TAIL 0 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 2 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 3 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 4 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 5 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 6 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 7 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 8 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 9 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 10 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 11 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 12 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 13 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 14 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 15 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 16 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) Get Subscribers The 'get subscribers' command displays subscribers for a topic and service. Usage cohctl get subscribers topic-name [flags] Flags -h, --help help for subscribers -s, --service string Service name Examples Display the subscribers for a topic and service. <markup lang=\"bash\" >cohctl get subscribers private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG TYPE OWNED CHANNELS 4 17663538530 Connected 9/17 1 0 0 0 Durable 0,1,2,3,4,5,6,7,16 5 23267662748 Connected 8/17 1 0 0 0 Durable 8,9,10,11,12,13,14,15 Get Subscriber Channels The 'get subscriber-channels' command displays channel details for a topic, service and subscriber. Usage cohctl get subscriber-channels topic-name [flags] Flags -h, --help help for subscriber-channels -s, --service string Service name -S, --subscriber int subscriber id Examples Display the subscribers channels for a topic, service and subscriber. <markup lang=\"bash\" >cohctl get subscribers private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 4 17663538530 Connected 17 1 0 0 0 5 23267662748 Connected 17 1 0 0 0 6 26845397584 Connected 17 1 0 0 0 <markup lang=\"bash\" >cohctl get subscriber-channels private-messages -s PartitionedTopic -S 17663538530 -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages Node ID: 4 ChannelCount: 17 Subscriber Group: 17663538530 CHANNEL EMPTY LAST COMMIT LAST REC OWNED HEAD 0 true null null true PagedPosition(page=66, offset=0) 1 true null null true PagedPosition(page=66, offset=0) 2 true null null true PagedPosition(page=66, offset=0) 3 true null null true PagedPosition(page=66, offset=0) 4 true null null true PagedPosition(page=66, offset=0) 5 false null null false PagedPosition(page=66, offset=0) 6 false null null false PagedPosition(page=66, offset=0) 7 false null null false PagedPosition(page=66, offset=0) 8 false null null false PagedPosition(page=66, offset=0) 9 false null null false PagedPosition(page=66, offset=0) 10 false null null false PagedPosition(page=66, offset=0) 11 false null null false PagedPosition(page=66, offset=0) 12 false null null false PagedPosition(page=66, offset=0) 13 false null null false PagedPosition(page=66, offset=0) 14 false null null false PagedPosition(page=66, offset=0) 15 true null null true PagedPosition(page=66, offset=0) 16 false null null false PagedPosition(page=66, offset=0) Get Subscriber Groups The 'get subscribers' command displays subscriber-groups for a topic and service. Usage cohctl get subscriber-groups topic-name [flags] Flags -h, --help help for subscriber-groups -s, --service string Service name Examples Display the subscriber groups for a topic and service. <markup lang=\"bash\" >cohctl get subscriber-groups private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages SUBSCRIBER GROUP NODE ID CHANNELS POLLED MEAN 1 MIN 5 MIN 15 MIN 1 1 17 0 0.0000 0.0000 0.0000 0.0000 1 2 17 0 0.0000 0.0000 0.0000 0.0000 1 3 17 0 0.0000 0.0000 0.0000 0.0000 admin 1 17 0 0.0000 0.0000 0.0000 0.0000 admin 2 17 0 0.0000 0.0000 0.0000 0.0000 admin 3 17 0 0.0000 0.0000 0.0000 0.0000 Get Subscriber Group Channels The 'get sub-grp-channels' command displays channel details for a topic, service, node and subscriber group. Usage cohctl get sub-grp-channels topic-name [flags] Flags -h, --help help for sub-grp-channels -n, --node int32 node id to show channels for -s, --service string Service name -G, --subscriber-group string subscriber group Examples Display subscriber group channels a topic, service, node and subscriber group. <markup lang=\"bash\" >cohctl get sub-grp-channels private-messages -s PartitionedTopic -n 3 -G admin -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages Node ID: 3 ChannelCount: 17 Subscriber Group: admin CHANNEL OWNING SUB MEMBER POLLED MEAN 1 MIN 5 MIN 15 MIN HEAD 0 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 1 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 2 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 3 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 4 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 5 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 6 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 7 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 8 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 9 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 10 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 11 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 12 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 13 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 14 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 15 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 16 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) Disconnect All The 'disconnect all' command instructs a topic to disconnect all subscribers for a specific subscriber topic or all subscribers for the specified subscriber group. Usage cohctl disconnect all topic-name [flags] Flags -h, --help help for all -s, --service string Service name -G, --subscriber-group string subscriber group -y, --yes automatically confirm the operation Examples Disconnect all subscribers for the topic 'sms-messages'. <markup lang=\"bash\" >cohctl disconnect all sms-messages -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect all' for topic sms-messages and service PartitionedTopic? (y/n) y operation completed Disconnect all subscribers for the topic 'sms-messages' and subscriber group 'sms-processor'. <markup lang=\"bash\" >cohctl disconnect all sms-messages -G sms-processor -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect all' for topic sms-messages, service PartitionedTopic and subscriber group sms-processor? (y/n) y operation completed Connect Subscriber The 'connect subscriber' command instructs a subscriber to ensure it is connected given a topic, service and subscriber id. Usage cohctl connect subscriber topic-name [flags] Flags -h, --help help for subscriber -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl get subscribers public-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: public-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 4 17179869184 Connected 17 1 7,406 0 0 <markup lang=\"bash\" >cohctl connect subscriber public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'connect' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed Disconnects Subscriber The 'disconnect subscriber' command instructs a subscriber to disconnect and reset itself given a topic, service and subscriber id. Usage cohctl disconnect subscriber topic-name [flags] Flags -h, --help help for subscriber -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl dicconnect subscriber public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed Retrieve Heads The 'retrieve heads' command instructs a subscriber to retrieve the current head positions for each channel given a topic, service and subscriber id. Usage cohctl retrieve heads topic-name [flags] Flags -h, --help help for heads -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl retrieve heads public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'retrieve current heads' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y Service: PartitionedTopic Topic: public-messages Subscriber: 17179869184 CHANNEL POSITION 0 PagedPosition(page=96, offset=3082) 1 PagedPosition(page=96, offset=3411) 2 PagedPosition(page=97, offset=0) 3 PagedPosition(page=97, offset=0) 4 PagedPosition(page=97, offset=0) 5 PagedPosition(page=97, offset=0) 6 PagedPosition(page=97, offset=0) 7 PagedPosition(page=97, offset=0) 8 PagedPosition(page=97, offset=0) 9 PagedPosition(page=97, offset=0) 10 PagedPosition(page=97, offset=0) 11 PagedPosition(page=97, offset=0) 12 PagedPosition(page=97, offset=0) 13 PagedPosition(page=96, offset=1953) 14 PagedPosition(page=96, offset=2037) 15 PagedPosition(page=96, offset=2405) 16 PagedPosition(page=96, offset=2625) Retrieve Remaining The 'retrieve header' command instructs a subscriber to retrieve the the count of remaining messages for each channel given a topic, service and subscriber id. Usage cohctl retrieve remaining topic-name [flags] Flags -h, --help help for remaining -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl retrieve remaining public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'retrieve remaining messages' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed Notify Populated The 'notify populated' command instructs a subscriber to send a channel populated notification to this subscriber and channel given a topic, service, subscriber id and channel. Usage cohctl notify populated topic-name [flags] Flags -C, --channel int32 channel to notify -h, --help help for populated -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl notify populated public-messages -s PartitionedTopic -S 17179869184 -C 16 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'notify populated' for topic public-messages, service PartitionedTopic, subscriber 17179869184 and channel 16? (y/n) y operation completed ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " Caches Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/30_topics",
            "text": " Overview There are various commands that allow you to work with and manage cluster topics. cohctl get topics - displays topics for a cluster cohctl describe topic - describe a topic cohctl get topic-members - displays members for a topic cohctl get topic-channels - displays channel details for a topic, service and node cohctl get subscribers - displays subscribers for a topic and service cohctl get subscriber-channels - displays channel details for a topic, service and subscriber cohctl get subscriber-groups - displays subscriber-groups for a topic and service cohctl get sub-grp-channels - displays channel details for a topic, service, node and subscriber group cohctl disconnect all - instructs a topic to disconnect all subscribers for a topic or subscriber group Subscriber Specific Operations cohctl connect subscriber - instructs a subscriber to ensure it is connected cohctl disconnect subscriber - instructs a subscriber to disconnect and reset itself cohctl retrieve heads - instructs a subscriber to retrieve the current head positions for each channel cohctl retrieve remaining - instructs a subscriber to retrieve the count of remaining messages for each channel cohctl notify populated - instructs a subscriber to send a channel populated notification to this subscriber and channel These topics commands are available to run against Coherence CE editions 22.06.4+, 22.09.1+ 23.03.+ as well as Coherence Grid Edition 14.1.1.2206.4+. In most commands you may omit the service name option if the topic name is unique. Get Topics The 'get topics' command displays topics for a cluster. Usage cohctl get topics [flags] Flags -h, --help help for topics -s, --service string Service name Examples Display all topics. <markup lang=\"bash\" >cohctl get topics -c local Output: <markup lang=\"bash\" >SERVICE TOPIC MEMBERS CHANNELS SUBSCRIBERS PUBLISHED PartitionedTopic private-messages 1 17 1 0 PartitionedTopic public-messages 1 17 1 0 Describe Topic The 'describe topic' command shows information related to a topic and service. Usage cohctl describe topic topic-name [flags] Flags -h, --help help for topic -s, --service string Service name <markup lang=\"bash\" >cohctl describe topic private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >TOPIC DETAILS ------------- Name : private-messages Service : PartitionedTopic Channels : 17 Members : 1 Published Count: 0 Subscribers : 1 MEMBERS ------- NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN 1 17 0 0.0000 0.0000 0.0000 0.0000 SUBSCRIBERS ----------- NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 1 5850459679 Connected 17 1 0 0 0 SUBSCRIBER GROUPS ----------------- SUBSCRIBER GROUP NODE ID CHANNELS POLLED MEAN 1 MIN 5 MIN 15 MIN 1 1 17 0 0.0000 0.0000 0.0000 0.0000 1 2 17 0 0.0000 0.0000 0.0000 0.0000 admin 1 17 0 0.0000 0.0000 0.0000 0.0000 admin 2 17 0 0.0000 0.0000 0.0000 0.0000 Get Topic Members The 'get topic-members' command displays members for topic and service. Usage cohctl get topic-members topic-name [flags] Flags -h, --help help for topic-members -s, --service string Service name Examples Display all members for a topic using the wide option <markup lang=\"bash\" >cohctl get topic-members private-messages -s PartitionedTopic -o wide -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN SUB TIMEOUT RECON TIMEOUT WAIT PAGE CAPACITY 1 17 0 0.0000 0.0000 0.0000 0.0000 300,000ms 300,000ms 10,000ms 1,048,576 2 17 0 0.0000 0.0000 0.0000 0.0000 300,000ms 300,000ms 10,000ms 1,048,576 Get Topic Channels The 'get topic-channels' command displays channel details for a topic, service and node. Usage cohctl get topic-channels topic-name [flags] Flags -h, --help help for topic-channels -n, --node int32 node id to show channels for -s, --service string Service name Examples Display the channels for a topic, service and node. <markup lang=\"bash\" >cohctl get topic-members private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID CHANNELS PUBLISHED MEAN 1 MIN 5 MIN 15 MIN 4 17 0 0.0000 0.0000 0.0000 0.0000 5 17 0 0.0000 0.0000 0.0000 0.0000 6 17 0 0.0000 0.0000 0.0000 0.0000 <markup lang=\"bash\" >cohctl get topic-channels private-messages -s PartitionedTopic -n 4 -c local Service: PartitionedTopic Topic: private-messages Node ID: 4 ChannelCount: 17 CHANNEL PUBLISHED MEAN 1 MIN 5 MIN 15 MIN TAIL 0 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 2 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 3 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 4 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 5 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 6 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 7 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 8 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 9 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 10 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 11 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 12 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 13 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 14 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 15 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) 16 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=-1, offset=2147483647) Get Subscribers The 'get subscribers' command displays subscribers for a topic and service. Usage cohctl get subscribers topic-name [flags] Flags -h, --help help for subscribers -s, --service string Service name Examples Display the subscribers for a topic and service. <markup lang=\"bash\" >cohctl get subscribers private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG TYPE OWNED CHANNELS 4 17663538530 Connected 9/17 1 0 0 0 Durable 0,1,2,3,4,5,6,7,16 5 23267662748 Connected 8/17 1 0 0 0 Durable 8,9,10,11,12,13,14,15 Get Subscriber Channels The 'get subscriber-channels' command displays channel details for a topic, service and subscriber. Usage cohctl get subscriber-channels topic-name [flags] Flags -h, --help help for subscriber-channels -s, --service string Service name -S, --subscriber int subscriber id Examples Display the subscribers channels for a topic, service and subscriber. <markup lang=\"bash\" >cohctl get subscribers private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 4 17663538530 Connected 17 1 0 0 0 5 23267662748 Connected 17 1 0 0 0 6 26845397584 Connected 17 1 0 0 0 <markup lang=\"bash\" >cohctl get subscriber-channels private-messages -s PartitionedTopic -S 17663538530 -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages Node ID: 4 ChannelCount: 17 Subscriber Group: 17663538530 CHANNEL EMPTY LAST COMMIT LAST REC OWNED HEAD 0 true null null true PagedPosition(page=66, offset=0) 1 true null null true PagedPosition(page=66, offset=0) 2 true null null true PagedPosition(page=66, offset=0) 3 true null null true PagedPosition(page=66, offset=0) 4 true null null true PagedPosition(page=66, offset=0) 5 false null null false PagedPosition(page=66, offset=0) 6 false null null false PagedPosition(page=66, offset=0) 7 false null null false PagedPosition(page=66, offset=0) 8 false null null false PagedPosition(page=66, offset=0) 9 false null null false PagedPosition(page=66, offset=0) 10 false null null false PagedPosition(page=66, offset=0) 11 false null null false PagedPosition(page=66, offset=0) 12 false null null false PagedPosition(page=66, offset=0) 13 false null null false PagedPosition(page=66, offset=0) 14 false null null false PagedPosition(page=66, offset=0) 15 true null null true PagedPosition(page=66, offset=0) 16 false null null false PagedPosition(page=66, offset=0) Get Subscriber Groups The 'get subscribers' command displays subscriber-groups for a topic and service. Usage cohctl get subscriber-groups topic-name [flags] Flags -h, --help help for subscriber-groups -s, --service string Service name Examples Display the subscriber groups for a topic and service. <markup lang=\"bash\" >cohctl get subscriber-groups private-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages SUBSCRIBER GROUP NODE ID CHANNELS POLLED MEAN 1 MIN 5 MIN 15 MIN 1 1 17 0 0.0000 0.0000 0.0000 0.0000 1 2 17 0 0.0000 0.0000 0.0000 0.0000 1 3 17 0 0.0000 0.0000 0.0000 0.0000 admin 1 17 0 0.0000 0.0000 0.0000 0.0000 admin 2 17 0 0.0000 0.0000 0.0000 0.0000 admin 3 17 0 0.0000 0.0000 0.0000 0.0000 Get Subscriber Group Channels The 'get sub-grp-channels' command displays channel details for a topic, service, node and subscriber group. Usage cohctl get sub-grp-channels topic-name [flags] Flags -h, --help help for sub-grp-channels -n, --node int32 node id to show channels for -s, --service string Service name -G, --subscriber-group string subscriber group Examples Display subscriber group channels a topic, service, node and subscriber group. <markup lang=\"bash\" >cohctl get sub-grp-channels private-messages -s PartitionedTopic -n 3 -G admin -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: private-messages Node ID: 3 ChannelCount: 17 Subscriber Group: admin CHANNEL OWNING SUB MEMBER POLLED MEAN 1 MIN 5 MIN 15 MIN HEAD 0 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 1 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 2 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 3 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 4 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 5 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 6 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 7 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 8 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 9 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 10 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 11 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 12 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 13 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 14 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 15 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) 16 -1 -1 0 0.0000 0.0000 0.0000 0.0000 PagedPosition(page=0, offset=0) Disconnect All The 'disconnect all' command instructs a topic to disconnect all subscribers for a specific subscriber topic or all subscribers for the specified subscriber group. Usage cohctl disconnect all topic-name [flags] Flags -h, --help help for all -s, --service string Service name -G, --subscriber-group string subscriber group -y, --yes automatically confirm the operation Examples Disconnect all subscribers for the topic 'sms-messages'. <markup lang=\"bash\" >cohctl disconnect all sms-messages -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect all' for topic sms-messages and service PartitionedTopic? (y/n) y operation completed Disconnect all subscribers for the topic 'sms-messages' and subscriber group 'sms-processor'. <markup lang=\"bash\" >cohctl disconnect all sms-messages -G sms-processor -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect all' for topic sms-messages, service PartitionedTopic and subscriber group sms-processor? (y/n) y operation completed Connect Subscriber The 'connect subscriber' command instructs a subscriber to ensure it is connected given a topic, service and subscriber id. Usage cohctl connect subscriber topic-name [flags] Flags -h, --help help for subscriber -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl get subscribers public-messages -s PartitionedTopic -c local Output: <markup lang=\"bash\" >Service: PartitionedTopic Topic: public-messages NODE ID SUBSCRIBER ID STATE CHANNELS SUBSCRIBER GROUP RECEIVED ERRORS BACKLOG 4 17179869184 Connected 17 1 7,406 0 0 <markup lang=\"bash\" >cohctl connect subscriber public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'connect' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed Disconnects Subscriber The 'disconnect subscriber' command instructs a subscriber to disconnect and reset itself given a topic, service and subscriber id. Usage cohctl disconnect subscriber topic-name [flags] Flags -h, --help help for subscriber -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl dicconnect subscriber public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'disconnect' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed Retrieve Heads The 'retrieve heads' command instructs a subscriber to retrieve the current head positions for each channel given a topic, service and subscriber id. Usage cohctl retrieve heads topic-name [flags] Flags -h, --help help for heads -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl retrieve heads public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'retrieve current heads' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y Service: PartitionedTopic Topic: public-messages Subscriber: 17179869184 CHANNEL POSITION 0 PagedPosition(page=96, offset=3082) 1 PagedPosition(page=96, offset=3411) 2 PagedPosition(page=97, offset=0) 3 PagedPosition(page=97, offset=0) 4 PagedPosition(page=97, offset=0) 5 PagedPosition(page=97, offset=0) 6 PagedPosition(page=97, offset=0) 7 PagedPosition(page=97, offset=0) 8 PagedPosition(page=97, offset=0) 9 PagedPosition(page=97, offset=0) 10 PagedPosition(page=97, offset=0) 11 PagedPosition(page=97, offset=0) 12 PagedPosition(page=97, offset=0) 13 PagedPosition(page=96, offset=1953) 14 PagedPosition(page=96, offset=2037) 15 PagedPosition(page=96, offset=2405) 16 PagedPosition(page=96, offset=2625) Retrieve Remaining The 'retrieve header' command instructs a subscriber to retrieve the the count of remaining messages for each channel given a topic, service and subscriber id. Usage cohctl retrieve remaining topic-name [flags] Flags -h, --help help for remaining -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl retrieve remaining public-messages -s PartitionedTopic -S 17179869184 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'retrieve remaining messages' for topic public-messages, service PartitionedTopic and subscriber 17179869184? (y/n) y operation completed Notify Populated The 'notify populated' command instructs a subscriber to send a channel populated notification to this subscriber and channel given a topic, service, subscriber id and channel. Usage cohctl notify populated topic-name [flags] Flags -C, --channel int32 channel to notify -h, --help help for populated -s, --service string Service name -S, --subscriber int subscriber id -y, --yes automatically confirm the operation Example <markup lang=\"bash\" >cohctl notify populated public-messages -s PartitionedTopic -S 17179869184 -C 16 -c local Output: <markup lang=\"bash\" >Are you sure you want to issue 'notify populated' for topic public-messages, service PartitionedTopic, subscriber 17179869184 and channel 16? (y/n) y operation completed See Also Caches Services ",
            "title": "Topics"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " The 'get http-servers' command displays the list of http proxy servers for a cluster. Usage cohctl get http-servers [flags] Flags -h, --help help for http-servers Examples Display all http servers. <markup lang=\"bash\" >cohctl get http-servers -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 2 0.0.0.0:30000 ManagementHttpProxy com..http.DefaultHttpServer 52 0 3 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 You can also use -o wide to display more columns. ",
            "title": "Get Http Servers"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " The 'describe http-server' command shows information related to http servers. Usage cohctl describe http-server service-name [flags] Flags -h, --help help for http-server Examples <markup lang=\"bash\" >cohctl describe http-proxy ManagementHttpProxy -c local ",
            "title": "Describe Http Server"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " There are various commands that allow you to work with and manage http servers. cohctl get http-servers - displays the http servers for a cluster cohctl describe http-server - shows information related to a specific http server Get Http Servers The 'get http-servers' command displays the list of http proxy servers for a cluster. Usage cohctl get http-servers [flags] Flags -h, --help help for http-servers Examples Display all http servers. <markup lang=\"bash\" >cohctl get http-servers -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 2 0.0.0.0:30000 ManagementHttpProxy com..http.DefaultHttpServer 52 0 3 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 You can also use -o wide to display more columns. Describe Http Server The 'describe http-server' command shows information related to http servers. Usage cohctl describe http-server service-name [flags] Flags -h, --help help for http-server Examples <markup lang=\"bash\" >cohctl describe http-proxy ManagementHttpProxy -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/55_http_servers",
            "text": " Overview There are various commands that allow you to work with and manage http servers. cohctl get http-servers - displays the http servers for a cluster cohctl describe http-server - shows information related to a specific http server Get Http Servers The 'get http-servers' command displays the list of http proxy servers for a cluster. Usage cohctl get http-servers [flags] Flags -h, --help help for http-servers Examples Display all http servers. <markup lang=\"bash\" >cohctl get http-servers -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 2 0.0.0.0:30000 ManagementHttpProxy com..http.DefaultHttpServer 52 0 3 0.0.0.0:0 ManagementHttpProxy com..http.DefaultHttpServer 0 0 You can also use -o wide to display more columns. Describe Http Server The 'describe http-server' command shows information related to http servers. Usage cohctl describe http-server service-name [flags] Flags -h, --help help for http-server Examples <markup lang=\"bash\" >cohctl describe http-proxy ManagementHttpProxy -c local See Also Services ",
            "title": "Http Servers"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " The 'nslookup' command looks up various Name Service endpoints for a cluster host/port. The various options to pass via -q option include: Cluster/name, Cluster/info, NameService/string/Cluster/foreign, NameService/string/management/HTTPManagementURL, NameService/string/management/JMXServiceURL, NameService/string/metrics/HTTPMetricsURL, NameService/string/$GRPC:GrpcProxy, NameService/string/health/HTTPHealthURL and NameService/string/Cluster/foreign/&lt;clustername&gt;/NameService/localPort Usage cohctl nslookup &lt;host:port&gt; [flags] Flags -h, --help help for nslookup -I, --ignore ignore errors from NS lookup -q, --query string query string to pass to Name Service lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) Examples Display the name of the cluster on localhost port 7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/name Output: <markup lang=\"bash\" >cluster1 Display the cluster information for the cluster on localhost:7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/info localhost:7574 Output: <markup lang=\"bash\" >Name=cluster1, ClusterPort=7574 WellKnownAddressList( 172.18.0.2 ) MasterMemberSet( ThisMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) OldestMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) ActualMemberSet=MemberSet(Size=2 Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) Member(Id=2, Timestamp=2021-11-05 00:15:24.98, Address=172.18.0.3:42019, MachineId=47439, Location=site:Site1,machine:server2,process:1,member:member2, Role=OracleCoherenceCliTestingRestServer) ) MemberId|ServiceJoined|MemberState|Version|Edition 1|2021-11-05 00:15:21.501|JOINED|14.1.1.0.6|GE, 2|2021-11-05 00:15:24.98|JOINED|14.1.1.0.6|GE RecycleMillis=1200000 RecycleSet=MemberSet(Size=0 ) ) TcpRing{Connections=[2]} IpMonitor{Addresses=1, Timeout=15s} Display the local cluster and foreign clusters registered with the Name Service on localhost:7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/name Output: <markup lang=\"bash\" >cluster1 <markup lang=\"bash\" >cohctl nslookup -q NameService/string/Cluster/foreign Output: <markup lang=\"bash\" >[cluster3, cluster2] Display the Management over REST endpoint for the local cluster. <markup lang=\"bash\" >cohctl nslookup -q NameService/string/management/HTTPManagementURL Output: <markup lang=\"bash\" >[http://127.0.0.1:51078/management/coherence/cluster] Display the local Name Serivce port for a foreign registered cluster. <markup lang=\"bash\" >cohctl nslookup -q NameService/string/Cluster/foreign/cluster2/NameService/localPort Output: <markup lang=\"bash\" >51065 ",
            "title": "NS Lookup"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " The CLI provides an implementation of the Name Service lookup to query a clusters Name Service endpoint for various query values. You can provide zero or more host/port pairs to this command. If you do not provide a host, localhost will be used and if you do not provide a port, then the default port 7574 will be used. cohctl nslookup - looks up various Name Service endpoints for a cluster host/port NS Lookup The 'nslookup' command looks up various Name Service endpoints for a cluster host/port. The various options to pass via -q option include: Cluster/name, Cluster/info, NameService/string/Cluster/foreign, NameService/string/management/HTTPManagementURL, NameService/string/management/JMXServiceURL, NameService/string/metrics/HTTPMetricsURL, NameService/string/$GRPC:GrpcProxy, NameService/string/health/HTTPHealthURL and NameService/string/Cluster/foreign/&lt;clustername&gt;/NameService/localPort Usage cohctl nslookup &lt;host:port&gt; [flags] Flags -h, --help help for nslookup -I, --ignore ignore errors from NS lookup -q, --query string query string to pass to Name Service lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) Examples Display the name of the cluster on localhost port 7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/name Output: <markup lang=\"bash\" >cluster1 Display the cluster information for the cluster on localhost:7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/info localhost:7574 Output: <markup lang=\"bash\" >Name=cluster1, ClusterPort=7574 WellKnownAddressList( 172.18.0.2 ) MasterMemberSet( ThisMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) OldestMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) ActualMemberSet=MemberSet(Size=2 Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) Member(Id=2, Timestamp=2021-11-05 00:15:24.98, Address=172.18.0.3:42019, MachineId=47439, Location=site:Site1,machine:server2,process:1,member:member2, Role=OracleCoherenceCliTestingRestServer) ) MemberId|ServiceJoined|MemberState|Version|Edition 1|2021-11-05 00:15:21.501|JOINED|14.1.1.0.6|GE, 2|2021-11-05 00:15:24.98|JOINED|14.1.1.0.6|GE RecycleMillis=1200000 RecycleSet=MemberSet(Size=0 ) ) TcpRing{Connections=[2]} IpMonitor{Addresses=1, Timeout=15s} Display the local cluster and foreign clusters registered with the Name Service on localhost:7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/name Output: <markup lang=\"bash\" >cluster1 <markup lang=\"bash\" >cohctl nslookup -q NameService/string/Cluster/foreign Output: <markup lang=\"bash\" >[cluster3, cluster2] Display the Management over REST endpoint for the local cluster. <markup lang=\"bash\" >cohctl nslookup -q NameService/string/management/HTTPManagementURL Output: <markup lang=\"bash\" >[http://127.0.0.1:51078/management/coherence/cluster] Display the local Name Serivce port for a foreign registered cluster. <markup lang=\"bash\" >cohctl nslookup -q NameService/string/Cluster/foreign/cluster2/NameService/localPort Output: <markup lang=\"bash\" >51065 ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " Clusters ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/45_nslookup",
            "text": " Overview The CLI provides an implementation of the Name Service lookup to query a clusters Name Service endpoint for various query values. You can provide zero or more host/port pairs to this command. If you do not provide a host, localhost will be used and if you do not provide a port, then the default port 7574 will be used. cohctl nslookup - looks up various Name Service endpoints for a cluster host/port NS Lookup The 'nslookup' command looks up various Name Service endpoints for a cluster host/port. The various options to pass via -q option include: Cluster/name, Cluster/info, NameService/string/Cluster/foreign, NameService/string/management/HTTPManagementURL, NameService/string/management/JMXServiceURL, NameService/string/metrics/HTTPMetricsURL, NameService/string/$GRPC:GrpcProxy, NameService/string/health/HTTPHealthURL and NameService/string/Cluster/foreign/&lt;clustername&gt;/NameService/localPort Usage cohctl nslookup &lt;host:port&gt; [flags] Flags -h, --help help for nslookup -I, --ignore ignore errors from NS lookup -q, --query string query string to pass to Name Service lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) Examples Display the name of the cluster on localhost port 7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/name Output: <markup lang=\"bash\" >cluster1 Display the cluster information for the cluster on localhost:7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/info localhost:7574 Output: <markup lang=\"bash\" >Name=cluster1, ClusterPort=7574 WellKnownAddressList( 172.18.0.2 ) MasterMemberSet( ThisMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) OldestMember=Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) ActualMemberSet=MemberSet(Size=2 Member(Id=1, Timestamp=2021-11-05 00:15:21.501, Address=172.18.0.2:37697, MachineId=47438, Location=site:Site1,machine:server1,process:1,member:member1, Role=OracleCoherenceCliTestingRestServer) Member(Id=2, Timestamp=2021-11-05 00:15:24.98, Address=172.18.0.3:42019, MachineId=47439, Location=site:Site1,machine:server2,process:1,member:member2, Role=OracleCoherenceCliTestingRestServer) ) MemberId|ServiceJoined|MemberState|Version|Edition 1|2021-11-05 00:15:21.501|JOINED|14.1.1.0.6|GE, 2|2021-11-05 00:15:24.98|JOINED|14.1.1.0.6|GE RecycleMillis=1200000 RecycleSet=MemberSet(Size=0 ) ) TcpRing{Connections=[2]} IpMonitor{Addresses=1, Timeout=15s} Display the local cluster and foreign clusters registered with the Name Service on localhost:7574. <markup lang=\"bash\" >cohctl nslookup -q Cluster/name Output: <markup lang=\"bash\" >cluster1 <markup lang=\"bash\" >cohctl nslookup -q NameService/string/Cluster/foreign Output: <markup lang=\"bash\" >[cluster3, cluster2] Display the Management over REST endpoint for the local cluster. <markup lang=\"bash\" >cohctl nslookup -q NameService/string/management/HTTPManagementURL Output: <markup lang=\"bash\" >[http://127.0.0.1:51078/management/coherence/cluster] Display the local Name Serivce port for a foreign registered cluster. <markup lang=\"bash\" >cohctl nslookup -q NameService/string/Cluster/foreign/cluster2/NameService/localPort Output: <markup lang=\"bash\" >51065 See Also Clusters ",
            "title": "NS Lookup"
        },
        {
            "location": "/docs/reference/90_health",
            "text": " The 'get health' command displays the health for members of a cluster. Usage cohctl get health [flags] Flags -h, --help help for health -n, --name string health name (default \"all\") -s, --sub-type string health sub-type (default \"all\") -S, --summary if true, returns a summary across nodes Examples Return all the health endpoint status for the cluster. <markup lang=\"bash\" >cohctl get health -c local Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 Proxy Service true true true true true ServiceModel: type=Service,name=Proxy,nodeId=1 1 PartitionedTopic Service true true true true true ServiceModel: type=Service,name=PartitionedTopic,nodeId=1 1 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=1 1 MetricsHttpProxy Service true true true true true ServiceModel: type=Service,name=MetricsHttpProxy,nodeId=1 1 ManagementHttpProxy Service true true true true true ServiceModel: type=Service,name=ManagementHttpProxy,nodeId=1 1 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@5fa2993b 1 $SYS:HealthHttpProxy Service true true true true true ServiceModel: type=Service,name=$SYS:HealthHttpProxy,nodeId=1 1 $SYS:Config Service true true true true true ServiceModel: type=Service,name=$SYS:Config,nodeId=1 2 Proxy Service true true true true true ServiceModel: type=Service,name=Proxy,nodeId=2 2 PartitionedTopic Service true true true true true ServiceModel: type=Service,name=PartitionedTopic,nodeId=2 2 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=2 2 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@39f79f18 2 $SYS:HealthHttpProxy Service true true true true true ServiceModel: type=Service,name=$SYS:HealthHttpProxy,nodeId=2 2 $SYS:Config Service true true true true true ServiceModel: type=Service,name=$SYS:Config,nodeId=2 Return health for a specific name of PartitionedCache . <markup lang=\"bash\" >cohctl get health -c local -n PartitionedCache Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=1 2 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=2 Return health for a specific sub-type of Coherence . <markup lang=\"bash\" >cohctl get health -c local -n PartitionedCache Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@5fa2993b 2 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@39f79f18 You can use -o wide to display additional information. Examples Return a health summary for the cluster for all health endpoints, by using the -S option, to show how many members are in each state. <markup lang=\"bash\" >cohctl get health -c local -S Output: <markup lang=\"bash\" >NAME SUB TYPE MEMBERS STARTED LIVE READY SAFE Proxy Service 3 3 3 3 3 PartitionedTopic Service 3 3 3 3 1/3 PartitionedCache Service 3 3 3 3 1/3 MetricsHttpProxy Service 1 1 1 1 1 ManagementHttpProxy Service 1 1 1 1 1 Default Coherence 3 3 3 3 3 $SYS:HealthHttpProxy Service 3 3 3 3 3 $SYS:Config Service 3 3 3 3 3 ",
            "title": "Get Health"
        },
        {
            "location": "/docs/reference/90_health",
            "text": " If your cluster version supports it, you can display health information using the following commands. cohctl get health - display health information for a cluster Get Health The 'get health' command displays the health for members of a cluster. Usage cohctl get health [flags] Flags -h, --help help for health -n, --name string health name (default \"all\") -s, --sub-type string health sub-type (default \"all\") -S, --summary if true, returns a summary across nodes Examples Return all the health endpoint status for the cluster. <markup lang=\"bash\" >cohctl get health -c local Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 Proxy Service true true true true true ServiceModel: type=Service,name=Proxy,nodeId=1 1 PartitionedTopic Service true true true true true ServiceModel: type=Service,name=PartitionedTopic,nodeId=1 1 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=1 1 MetricsHttpProxy Service true true true true true ServiceModel: type=Service,name=MetricsHttpProxy,nodeId=1 1 ManagementHttpProxy Service true true true true true ServiceModel: type=Service,name=ManagementHttpProxy,nodeId=1 1 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@5fa2993b 1 $SYS:HealthHttpProxy Service true true true true true ServiceModel: type=Service,name=$SYS:HealthHttpProxy,nodeId=1 1 $SYS:Config Service true true true true true ServiceModel: type=Service,name=$SYS:Config,nodeId=1 2 Proxy Service true true true true true ServiceModel: type=Service,name=Proxy,nodeId=2 2 PartitionedTopic Service true true true true true ServiceModel: type=Service,name=PartitionedTopic,nodeId=2 2 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=2 2 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@39f79f18 2 $SYS:HealthHttpProxy Service true true true true true ServiceModel: type=Service,name=$SYS:HealthHttpProxy,nodeId=2 2 $SYS:Config Service true true true true true ServiceModel: type=Service,name=$SYS:Config,nodeId=2 Return health for a specific name of PartitionedCache . <markup lang=\"bash\" >cohctl get health -c local -n PartitionedCache Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=1 2 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=2 Return health for a specific sub-type of Coherence . <markup lang=\"bash\" >cohctl get health -c local -n PartitionedCache Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@5fa2993b 2 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@39f79f18 You can use -o wide to display additional information. Examples Return a health summary for the cluster for all health endpoints, by using the -S option, to show how many members are in each state. <markup lang=\"bash\" >cohctl get health -c local -S Output: <markup lang=\"bash\" >NAME SUB TYPE MEMBERS STARTED LIVE READY SAFE Proxy Service 3 3 3 3 3 PartitionedTopic Service 3 3 3 3 1/3 PartitionedCache Service 3 3 3 3 1/3 MetricsHttpProxy Service 1 1 1 1 1 ManagementHttpProxy Service 1 1 1 1 1 Default Coherence 3 3 3 3 3 $SYS:HealthHttpProxy Service 3 3 3 3 3 $SYS:Config Service 3 3 3 3 3 ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/90_health",
            "text": " Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/90_health",
            "text": " Overview If your cluster version supports it, you can display health information using the following commands. cohctl get health - display health information for a cluster Get Health The 'get health' command displays the health for members of a cluster. Usage cohctl get health [flags] Flags -h, --help help for health -n, --name string health name (default \"all\") -s, --sub-type string health sub-type (default \"all\") -S, --summary if true, returns a summary across nodes Examples Return all the health endpoint status for the cluster. <markup lang=\"bash\" >cohctl get health -c local Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 Proxy Service true true true true true ServiceModel: type=Service,name=Proxy,nodeId=1 1 PartitionedTopic Service true true true true true ServiceModel: type=Service,name=PartitionedTopic,nodeId=1 1 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=1 1 MetricsHttpProxy Service true true true true true ServiceModel: type=Service,name=MetricsHttpProxy,nodeId=1 1 ManagementHttpProxy Service true true true true true ServiceModel: type=Service,name=ManagementHttpProxy,nodeId=1 1 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@5fa2993b 1 $SYS:HealthHttpProxy Service true true true true true ServiceModel: type=Service,name=$SYS:HealthHttpProxy,nodeId=1 1 $SYS:Config Service true true true true true ServiceModel: type=Service,name=$SYS:Config,nodeId=1 2 Proxy Service true true true true true ServiceModel: type=Service,name=Proxy,nodeId=2 2 PartitionedTopic Service true true true true true ServiceModel: type=Service,name=PartitionedTopic,nodeId=2 2 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=2 2 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@39f79f18 2 $SYS:HealthHttpProxy Service true true true true true ServiceModel: type=Service,name=$SYS:HealthHttpProxy,nodeId=2 2 $SYS:Config Service true true true true true ServiceModel: type=Service,name=$SYS:Config,nodeId=2 Return health for a specific name of PartitionedCache . <markup lang=\"bash\" >cohctl get health -c local -n PartitionedCache Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=1 2 PartitionedCache Service true true true true true ServiceModel: type=Service,name=PartitionedCache,nodeId=2 Return health for a specific sub-type of Coherence . <markup lang=\"bash\" >cohctl get health -c local -n PartitionedCache Output: <markup lang=\"bash\" >NODE ID NAME SUB TYPE STARTED LIVE READY SAFE MEMBER HEALTH DESCRIPTION 1 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@5fa2993b 2 Default Coherence true true true true true com.tangosol.net.Coherence$CoherenceHealth@39f79f18 You can use -o wide to display additional information. Examples Return a health summary for the cluster for all health endpoints, by using the -S option, to show how many members are in each state. <markup lang=\"bash\" >cohctl get health -c local -S Output: <markup lang=\"bash\" >NAME SUB TYPE MEMBERS STARTED LIVE READY SAFE Proxy Service 3 3 3 3 3 PartitionedTopic Service 3 3 3 3 1/3 PartitionedCache Service 3 3 3 3 1/3 MetricsHttpProxy Service 1 1 1 1 1 ManagementHttpProxy Service 1 1 1 1 1 Default Coherence 3 3 3 3 3 $SYS:HealthHttpProxy Service 3 3 3 3 3 $SYS:Config Service 3 3 3 3 3 See Also Services ",
            "title": "Health"
        },
        {
            "location": "/docs/reference/01_overview",
            "text": " The Coherence CLI contains many commands to manage and monitor Coherence clusters. Clusters Manage Cluster Connections. Contexts Manage cluster connections you are working with. Members Display and describe member information. Machines Display and describe machine information. Services Display and describe service information. Caches Display and describe cache information. View Caches Display and describe view cache information. Topics Display Topics information. Persistence Display and perform Persistence operations. Federation Display and perform Federation operations. Proxy Servers Display and describe proxy server information. Http Proxy Servers Display and describe Http proxy server information. Elastic Data Display and describe Elastic Data information. Http Sessions Display and describe Coherence*Web Http session information. Executors Display and describe Executors. Reporters Display and manage Coherence reporters. Diagnostics Take multiple thread dumps, heap dumps or JFR&#8217;s across members. Health Display health information. NS Lookup Look up various Name Service endpoints for a cluster. Reset MBean Statistics Reset MBean Statistics for various resources. Miscellaneous Various settings related commands. Create Clusters Experimental command to create development clusters. ",
            "title": "Reference"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'get services' command displays services for a cluster using various options. You may specify the service type as well a status-ha value to wait for. You can also specify '-o wide' to display addition information. Usage cohctl get services [flags] Flags -h, --help help for services -a, --status-ha string statusHA to wait for. Used in conjunction with -T option (default \"none\") -T, --timeout int32 timeout to wait for StatusHA value of all services (default 60) -t, --type string service types to show. E.g. DistributedCache, FederatedCache, PagedTopic, Invocation, Proxy, RemoteCache or ReplicatedCache (default \"all\") Examples Display all services. <markup lang=\"bash\" >cohctl get services -c local Display all services of type DistributedCache <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache Watch all services of type DistributedCache <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache -w Wait for all services of type DistributedCache to become MACHINE-SAFE . <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache -w -a MACHINE-SAFE If the above services does become machine safe in the timeout, the return code of the command will be zero, otherwise the return code will be 1. ",
            "title": "Get Services"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'describe service' command shows information related to services. This includes information about each service member as well as Persistence information if the service is a cache service. Usage cohctl describe service service-name [flags] Flags -h, --help help for service Examples <markup lang=\"bash\" >cohctl describe service PartitionedCache -c local ",
            "title": "Describe Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'get service-storage' command displays partitioned services storage for a cluster including information regarding partition sizes. Usage cohctl get service-storage [flags] Flags -h, --help help for service-storage Examples <markup lang=\"bash\" >cohctl get service-storage -c local Output: <markup lang=\"bash\" >SERVICE NAME PARTITIONS NODES AVG PARTITION MAX PARTITION AVG STORAGE MAX STORAGE NODE MAX NODE \"$SYS:Config\" 257 6 0 MB 0 MB 0 MB 0 MB - PartitionedCache 257 6 0 MB 0 MB 18 MB 18 MB 2 PartitionedTopic 257 6 0 MB 0 MB 0 MB 0 MB - ",
            "title": "Get Service Storage"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'get service-members' command displays service members for a cluster. Usage cohctl get service-members service-name [flags] Flags -x, --exclude exclude storage-disabled clients -h, --help help for service-members -B, --include include members with backlog only Examples <markup lang=\"bash\" >cohctl get service-members PartitionedCache -c local Output: <markup lang=\"bash\" >Service: PartitionedCache NODE ID THREADS IDLE THREAD UTIL MIN THREADS MAX THREADS TASK COUNT TASK BACKLOG PRIMARY OWNED BACKUP OWNED REQ AVG MS TASK AVG MS 1 1 1 0.00% 1 2,147,483,647 0 0 85 86 6.0946 0.0000 2 1 1 0.00% 1 2,147,483,647 0 0 86 86 9.2803 0.0000 3 1 1 0.00% 1 2,147,483,647 0 0 86 85 9.7037 0.0000 ",
            "title": "Get Service Members"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'get service-distributions' command displays partition distributions for a service. Usage cohctl get service-distributions service-name [flags] Flags -h, --help help for service-distributions Examples <markup lang=\"bash\" >cohctl get service-distributions PartitionedCache -c local Output: <markup lang=\"bash\" >Partition Distributions Scheduled for Service \"PartitionedCache\" Machine localhost Member 1: - scheduled to receive 1 Backup partitions: -- 1 from member 6 Member 7: - scheduled to receive 16 Primary partitions: -- 16 from member 3 - scheduled to receive 35 Backup partitions: -- 15 from member 1 -- 16 from member 3 -- 4 from member 6 Member 6: - scheduled to receive 34 Primary partitions: -- 18 from member 1 -- 16 from member 3 - scheduled to receive 27 Backup partitions: -- 7 from member 3 -- 20 from member 7 ",
            "title": "Get Service Distributions"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'get service-description' command displays information regarding a service and it&#8217;s members. Only available in most recent Coherence versions. Usage cohctl get service-description service-name [flags] Flags -h, --help help for service-description Examples <markup lang=\"bash\" >cohctl get service-description PartitionedCache -c local ",
            "title": "Get Service Description"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'start service' command starts a specific service on a cluster member. Usage cohctl start service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl start service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform start for service PartitionedCache on node 1? (y/n) y operation completed ",
            "title": "Start Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'stop service' command forces a specific service to stop on a cluster member. Use the shutdown service command for normal service termination. Usage cohctl stop service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform stop for service PartitionedCache on node 1? (y/n) y operation completed ",
            "title": "Stop Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'shutdown service' command performs a controlled shut-down of a specific service on a cluster member. Shutting down a service is preferred over stopping a service. Usage cohctl shutdown service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl shutdown service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform shutdown for service PartitionedCache on node 1? (y/n) y operation completed ",
            "title": "Shutdown Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " The 'set service' command sets an attribute for a service across one or member nodes. The following attribute names are allowed: threadCount, threadCountMin, threadCountMax or taskHungThresholdMillis or requestTimeoutMillis. Usage cohctl set service service-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for service -n, --node string comma separated node ids to target (default \"all\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Service MBean Reference for more information on the above attributes. Examples Set the thread count min for a service. List the services and inspect the current thread count min. <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE SENIOR PARTITIONS Proxy Proxy 2 n/a -1 1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 2 257 PartitionedCache DistributedCache 2 NODE-SAFE 2 1 257 ManagementHttpProxy Proxy 1 n/a -1 1 -1 <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" Output: <markup lang=\"bash\" >[\"2\",\"PartitionedCache\",1,\"1\",\"PartitionedCache\",1] The above shows that the threadCountMin is 1 for both nodes. Set the threadCountMin to 10 for each service member. <markup lang=\"bash\" >cohctl set service PartitionedCache -a threadCountMin -v 10 -c local Output: <markup lang=\"bash\" >Selected service: PartitionedCache Are you sure you want to set the value of attribute threadCountMin to 10 for all 2 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" Output: <markup lang=\"bash\" >[\"2\",\"PartitionedCache\",10,\"1\",\"PartitionedCache\",10] ",
            "title": "Set Service"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " There are various commands that allow you to work with and manage cluster services. cohctl get services - displays the services for a cluster cohctl describe service - shows information related to a specific service cohctl get service-storage - displays partitioned services storage information for a cluster cohctl get service-members - displays service members cohctl get service-distributions - displays partition distribution information for a service\" cohctl get service-description - displays service description including membership\" cohctl start service - starts a specific service on a cluster member cohctl stop service - forces a specific service to stop on a cluster member cohctl shutdown service - performs a controlled shut-down of a specific service on a cluster member cohctl set service - sets a service attribute across one or more members Get Services The 'get services' command displays services for a cluster using various options. You may specify the service type as well a status-ha value to wait for. You can also specify '-o wide' to display addition information. Usage cohctl get services [flags] Flags -h, --help help for services -a, --status-ha string statusHA to wait for. Used in conjunction with -T option (default \"none\") -T, --timeout int32 timeout to wait for StatusHA value of all services (default 60) -t, --type string service types to show. E.g. DistributedCache, FederatedCache, PagedTopic, Invocation, Proxy, RemoteCache or ReplicatedCache (default \"all\") Examples Display all services. <markup lang=\"bash\" >cohctl get services -c local Display all services of type DistributedCache <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache Watch all services of type DistributedCache <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache -w Wait for all services of type DistributedCache to become MACHINE-SAFE . <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache -w -a MACHINE-SAFE If the above services does become machine safe in the timeout, the return code of the command will be zero, otherwise the return code will be 1. Describe Service The 'describe service' command shows information related to services. This includes information about each service member as well as Persistence information if the service is a cache service. Usage cohctl describe service service-name [flags] Flags -h, --help help for service Examples <markup lang=\"bash\" >cohctl describe service PartitionedCache -c local Get Service Storage The 'get service-storage' command displays partitioned services storage for a cluster including information regarding partition sizes. Usage cohctl get service-storage [flags] Flags -h, --help help for service-storage Examples <markup lang=\"bash\" >cohctl get service-storage -c local Output: <markup lang=\"bash\" >SERVICE NAME PARTITIONS NODES AVG PARTITION MAX PARTITION AVG STORAGE MAX STORAGE NODE MAX NODE \"$SYS:Config\" 257 6 0 MB 0 MB 0 MB 0 MB - PartitionedCache 257 6 0 MB 0 MB 18 MB 18 MB 2 PartitionedTopic 257 6 0 MB 0 MB 0 MB 0 MB - Get Service Members The 'get service-members' command displays service members for a cluster. Usage cohctl get service-members service-name [flags] Flags -x, --exclude exclude storage-disabled clients -h, --help help for service-members -B, --include include members with backlog only Examples <markup lang=\"bash\" >cohctl get service-members PartitionedCache -c local Output: <markup lang=\"bash\" >Service: PartitionedCache NODE ID THREADS IDLE THREAD UTIL MIN THREADS MAX THREADS TASK COUNT TASK BACKLOG PRIMARY OWNED BACKUP OWNED REQ AVG MS TASK AVG MS 1 1 1 0.00% 1 2,147,483,647 0 0 85 86 6.0946 0.0000 2 1 1 0.00% 1 2,147,483,647 0 0 86 86 9.2803 0.0000 3 1 1 0.00% 1 2,147,483,647 0 0 86 85 9.7037 0.0000 Get Service Distributions The 'get service-distributions' command displays partition distributions for a service. Usage cohctl get service-distributions service-name [flags] Flags -h, --help help for service-distributions Examples <markup lang=\"bash\" >cohctl get service-distributions PartitionedCache -c local Output: <markup lang=\"bash\" >Partition Distributions Scheduled for Service \"PartitionedCache\" Machine localhost Member 1: - scheduled to receive 1 Backup partitions: -- 1 from member 6 Member 7: - scheduled to receive 16 Primary partitions: -- 16 from member 3 - scheduled to receive 35 Backup partitions: -- 15 from member 1 -- 16 from member 3 -- 4 from member 6 Member 6: - scheduled to receive 34 Primary partitions: -- 18 from member 1 -- 16 from member 3 - scheduled to receive 27 Backup partitions: -- 7 from member 3 -- 20 from member 7 Get Service Description The 'get service-description' command displays information regarding a service and it&#8217;s members. Only available in most recent Coherence versions. Usage cohctl get service-description service-name [flags] Flags -h, --help help for service-description Examples <markup lang=\"bash\" >cohctl get service-description PartitionedCache -c local Start Service The 'start service' command starts a specific service on a cluster member. Usage cohctl start service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl start service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform start for service PartitionedCache on node 1? (y/n) y operation completed Stop Service The 'stop service' command forces a specific service to stop on a cluster member. Use the shutdown service command for normal service termination. Usage cohctl stop service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform stop for service PartitionedCache on node 1? (y/n) y operation completed Shutdown Service The 'shutdown service' command performs a controlled shut-down of a specific service on a cluster member. Shutting down a service is preferred over stopping a service. Usage cohctl shutdown service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl shutdown service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform shutdown for service PartitionedCache on node 1? (y/n) y operation completed Set Service The 'set service' command sets an attribute for a service across one or member nodes. The following attribute names are allowed: threadCount, threadCountMin, threadCountMax or taskHungThresholdMillis or requestTimeoutMillis. Usage cohctl set service service-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for service -n, --node string comma separated node ids to target (default \"all\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Service MBean Reference for more information on the above attributes. Examples Set the thread count min for a service. List the services and inspect the current thread count min. <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE SENIOR PARTITIONS Proxy Proxy 2 n/a -1 1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 2 257 PartitionedCache DistributedCache 2 NODE-SAFE 2 1 257 ManagementHttpProxy Proxy 1 n/a -1 1 -1 <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" Output: <markup lang=\"bash\" >[\"2\",\"PartitionedCache\",1,\"1\",\"PartitionedCache\",1] The above shows that the threadCountMin is 1 for both nodes. Set the threadCountMin to 10 for each service member. <markup lang=\"bash\" >cohctl set service PartitionedCache -a threadCountMin -v 10 -c local Output: <markup lang=\"bash\" >Selected service: PartitionedCache Are you sure you want to set the value of attribute threadCountMin to 10 for all 2 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" Output: <markup lang=\"bash\" >[\"2\",\"PartitionedCache\",10,\"1\",\"PartitionedCache\",10] ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " Rolling Restarts Caches ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/20_services",
            "text": " Overview There are various commands that allow you to work with and manage cluster services. cohctl get services - displays the services for a cluster cohctl describe service - shows information related to a specific service cohctl get service-storage - displays partitioned services storage information for a cluster cohctl get service-members - displays service members cohctl get service-distributions - displays partition distribution information for a service\" cohctl get service-description - displays service description including membership\" cohctl start service - starts a specific service on a cluster member cohctl stop service - forces a specific service to stop on a cluster member cohctl shutdown service - performs a controlled shut-down of a specific service on a cluster member cohctl set service - sets a service attribute across one or more members Get Services The 'get services' command displays services for a cluster using various options. You may specify the service type as well a status-ha value to wait for. You can also specify '-o wide' to display addition information. Usage cohctl get services [flags] Flags -h, --help help for services -a, --status-ha string statusHA to wait for. Used in conjunction with -T option (default \"none\") -T, --timeout int32 timeout to wait for StatusHA value of all services (default 60) -t, --type string service types to show. E.g. DistributedCache, FederatedCache, PagedTopic, Invocation, Proxy, RemoteCache or ReplicatedCache (default \"all\") Examples Display all services. <markup lang=\"bash\" >cohctl get services -c local Display all services of type DistributedCache <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache Watch all services of type DistributedCache <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache -w Wait for all services of type DistributedCache to become MACHINE-SAFE . <markup lang=\"bash\" >cohctl get services -c local -t DistributedCache -w -a MACHINE-SAFE If the above services does become machine safe in the timeout, the return code of the command will be zero, otherwise the return code will be 1. Describe Service The 'describe service' command shows information related to services. This includes information about each service member as well as Persistence information if the service is a cache service. Usage cohctl describe service service-name [flags] Flags -h, --help help for service Examples <markup lang=\"bash\" >cohctl describe service PartitionedCache -c local Get Service Storage The 'get service-storage' command displays partitioned services storage for a cluster including information regarding partition sizes. Usage cohctl get service-storage [flags] Flags -h, --help help for service-storage Examples <markup lang=\"bash\" >cohctl get service-storage -c local Output: <markup lang=\"bash\" >SERVICE NAME PARTITIONS NODES AVG PARTITION MAX PARTITION AVG STORAGE MAX STORAGE NODE MAX NODE \"$SYS:Config\" 257 6 0 MB 0 MB 0 MB 0 MB - PartitionedCache 257 6 0 MB 0 MB 18 MB 18 MB 2 PartitionedTopic 257 6 0 MB 0 MB 0 MB 0 MB - Get Service Members The 'get service-members' command displays service members for a cluster. Usage cohctl get service-members service-name [flags] Flags -x, --exclude exclude storage-disabled clients -h, --help help for service-members -B, --include include members with backlog only Examples <markup lang=\"bash\" >cohctl get service-members PartitionedCache -c local Output: <markup lang=\"bash\" >Service: PartitionedCache NODE ID THREADS IDLE THREAD UTIL MIN THREADS MAX THREADS TASK COUNT TASK BACKLOG PRIMARY OWNED BACKUP OWNED REQ AVG MS TASK AVG MS 1 1 1 0.00% 1 2,147,483,647 0 0 85 86 6.0946 0.0000 2 1 1 0.00% 1 2,147,483,647 0 0 86 86 9.2803 0.0000 3 1 1 0.00% 1 2,147,483,647 0 0 86 85 9.7037 0.0000 Get Service Distributions The 'get service-distributions' command displays partition distributions for a service. Usage cohctl get service-distributions service-name [flags] Flags -h, --help help for service-distributions Examples <markup lang=\"bash\" >cohctl get service-distributions PartitionedCache -c local Output: <markup lang=\"bash\" >Partition Distributions Scheduled for Service \"PartitionedCache\" Machine localhost Member 1: - scheduled to receive 1 Backup partitions: -- 1 from member 6 Member 7: - scheduled to receive 16 Primary partitions: -- 16 from member 3 - scheduled to receive 35 Backup partitions: -- 15 from member 1 -- 16 from member 3 -- 4 from member 6 Member 6: - scheduled to receive 34 Primary partitions: -- 18 from member 1 -- 16 from member 3 - scheduled to receive 27 Backup partitions: -- 7 from member 3 -- 20 from member 7 Get Service Description The 'get service-description' command displays information regarding a service and it&#8217;s members. Only available in most recent Coherence versions. Usage cohctl get service-description service-name [flags] Flags -h, --help help for service-description Examples <markup lang=\"bash\" >cohctl get service-description PartitionedCache -c local Start Service The 'start service' command starts a specific service on a cluster member. Usage cohctl start service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl start service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform start for service PartitionedCache on node 1? (y/n) y operation completed Stop Service The 'stop service' command forces a specific service to stop on a cluster member. Use the shutdown service command for normal service termination. Usage cohctl stop service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl stop service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform stop for service PartitionedCache on node 1? (y/n) y operation completed Shutdown Service The 'shutdown service' command performs a controlled shut-down of a specific service on a cluster member. Shutting down a service is preferred over stopping a service. Usage cohctl shutdown service service-name [flags] Flags -h, --help help for service -n, --node string node id to target -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl shutdown service PartitionedCache -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to perform shutdown for service PartitionedCache on node 1? (y/n) y operation completed Set Service The 'set service' command sets an attribute for a service across one or member nodes. The following attribute names are allowed: threadCount, threadCountMin, threadCountMax or taskHungThresholdMillis or requestTimeoutMillis. Usage cohctl set service service-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for service -n, --node string comma separated node ids to target (default \"all\") -v, --value string attribute value to set -y, --yes automatically confirm the operation See the Service MBean Reference for more information on the above attributes. Examples Set the thread count min for a service. List the services and inspect the current thread count min. <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE SENIOR PARTITIONS Proxy Proxy 2 n/a -1 1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 2 257 PartitionedCache DistributedCache 2 NODE-SAFE 2 1 257 ManagementHttpProxy Proxy 1 n/a -1 1 -1 <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" Output: <markup lang=\"bash\" >[\"2\",\"PartitionedCache\",1,\"1\",\"PartitionedCache\",1] The above shows that the threadCountMin is 1 for both nodes. Set the threadCountMin to 10 for each service member. <markup lang=\"bash\" >cohctl set service PartitionedCache -a threadCountMin -v 10 -c local Output: <markup lang=\"bash\" >Selected service: PartitionedCache Are you sure you want to set the value of attribute threadCountMin to 10 for all 2 nodes? (y/n) y operation completed <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.name == 'PartitionedCache')]..['nodeId','name','threadCountMin']\" Output: <markup lang=\"bash\" >[\"2\",\"PartitionedCache\",10,\"1\",\"PartitionedCache\",10] See Also Rolling Restarts Caches ",
            "title": "Services"
        },
        {
            "location": "/docs/config/05_global_flags",
            "text": " Changing Config Locations Using JsonPath ",
            "title": "See Also"
        },
        {
            "location": "/docs/config/05_global_flags",
            "text": " The Coherence CLI provides a number of global flags that are available in all the commands. These flags are described below. <markup lang=\"bash\" >Flags: -b, --bytes show sizes in bytes --config string config file (default is $HOME/.cohctl/cohctl.yaml) --config-dir string config directory (default is $HOME/.cohctl) -c, --connection string cluster connection name. (not required if context is set) -d, --delay int32 delay for watching in seconds (default 5) -g, --gb show sizes in gigabytes (default is bytes) -h, --help help for cohctl -k, --kb show sizes in kilobytes (default is bytes) -m, --mb show sizes in megabytes (default is bytes) -o, --output string output format: table, wide, json or jsonpath=\"...\" (default \"table\") -i, --stdin read password from stdin --tb show sizes in terabytes (default is bytes) -U, --username string basic auth username if authentication is required -w, --watch watch output (only available for get commands) -W, --watch-clear watch output with clear See Also Changing Config Locations Using JsonPath ",
            "title": "Global Flags"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " This example walks you through how to monitor the High Available (HA) Status or StatusHA value for Coherence Partitioned Services within a cluster by using the cohctl get services command. StatusHA is most commonly used to ensure services are in a safe state between restarting cache servers during a rolling restart. ",
            "title": "Overview"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " In this example we have a cluster called my-cluster with the following setup: A single storage-disabled management node running Management over REST enabled 2 storage-enabled nodes on machine1 2 storage-enabled nodes on machine2 2 storage-enabled nodes on machine3 A Coherence console client running ",
            "title": "Setup for this Example"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE LOCAL local http http://localhost:30000/management/coherence/cluster 23.03 my-cluster Standalone false <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local ",
            "title": "1. Show the clusters"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >cohctl get members -o wide -m Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Cluster Heap - Total: 6.750GB, Used: 1.076GB, Available: 5.674GB (84.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MACHINE RACK SITE PUBLISHER RECEIVER MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 58374 42988 n/a Management n/a n/a n/a 0.995 1.000 512 MB 53 MB 459 MB 2 /192.168.1.124 58389 43011 n/a CoherenceServer machine1 n/a n/a 1.000 1.000 1024 MB 307 MB 717 MB 3 /192.168.1.124 58399 43033 n/a CoherenceServer machine1 n/a n/a 0.997 1.000 1024 MB 140 MB 884 MB 4 /192.168.1.124 58434 43055 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1024 MB 175 MB 849 MB 5 /192.168.1.124 58464 43081 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1024 MB 184 MB 840 MB 7 /192.168.1.124 58774 44276 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1024 MB 124 MB 900 MB 8 /192.168.1.124 58808 44473 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1024 MB 97 MB 927 MB 9 /192.168.1.124 58868 44523 n/a CoherenceConsole n/a n/a n/a 1.000 1.000 256 M 22 MB 234 MB We can see the management node on Node 1, the storage members on nodes 2-5 and the console on node 6. ",
            "title": "2. Get the members"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >cohctl get services -t DistributedCache -o wide Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS ENDANGERED VULNERABLE UNBALANCED STATUS PartitionedTopic DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache2 DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe See below for explanations of the above columns: STATUS HA - The High Availability (HA) status for this service. A value of MACHINE-SAFE indicates that all the cluster members running on any given computer could be stopped without data loss. A value of NODE-SAFE indicates that a cluster member could be stopped without data loss. A value of ENDANGERED indicates that abnormal termination of any cluster member that runs this service may cause data loss. A value of N/A indicates that the service has no high availability impact. STORAGE - Specifies the total number of cluster members running this service for which local storage is enabled PARTITIONS - The total number of partitions that every cache storage is divided into ENDANGERED - The total number of partitions that are not currently backed up VULNERABLE - The total number of partitions that are backed up on the same machine where the primary partition owner resides UNBALANCED - The total number of primary and backup partitions that remain to be transferred until the partition distribution across the storage enabled service members is fully balanced ",
            "title": "3. Get the partitioned services"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " In our case we have the following caches defined: <markup lang=\"bash\" >cohctl get caches -m Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total Caches: 3, Total primary storage: 175MB SERVICE CACHE COUNT SIZE PartitionedCache tim 1,000 9 MB PartitionedCache2 test-1 100,000 110 MB PartitionedCache2 test-2 50,000 55 MB You can use the -o wide to display more information. ",
            "title": "4. View the caches"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": "<markup lang=\"bash\" >cohctl get services -t DistributedCache -w -o wide The above will continue watching the services. Keep this open in a separate terminal. ",
            "title": "5. Start watching the services"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " With the above command running in a separate terminal, carry out the following for each machine and watch for the StatusHA values. Stop member 1 on first machine Wait for NODE-SAFE - When stopping the first cache server, you may observe the service StatusHA go to ENDANGERED straight after Coherence detects the failure and starts the rebalancing. When the StatusHA returns to NODE-SAFE, and unbalanced partitions are zero, you can continue. Stop member 2 on first machine Wait for MACHINE-SAFE - We will pretend to apply the software patch. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines ",
            "title": "6. Carry out a rolling restart of the cluster."
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " In this example we will carry out a rolling restart of our cluster to simulate applying an application code patch to our cluster. For more details on rolling restarts, please see Starting and Stopping Cluster Members in the Coherence documentation. The process will be: Stop member 1 on first machine Wait for NODE-SAFE - (Can&#8217;t get to MACHINE-SAFE because of unbalanced partition counts between machines) Stop member 2 on first machine Wait for MACHINE-SAFE - When they could apply an application patch to our first machine. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines Read on below for the example. 1. Show the clusters <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE LOCAL local http http://localhost:30000/management/coherence/cluster 23.03 my-cluster Standalone false <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local 2. Get the members <markup lang=\"bash\" >cohctl get members -o wide -m Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Cluster Heap - Total: 6.750GB, Used: 1.076GB, Available: 5.674GB (84.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MACHINE RACK SITE PUBLISHER RECEIVER MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 58374 42988 n/a Management n/a n/a n/a 0.995 1.000 512 MB 53 MB 459 MB 2 /192.168.1.124 58389 43011 n/a CoherenceServer machine1 n/a n/a 1.000 1.000 1024 MB 307 MB 717 MB 3 /192.168.1.124 58399 43033 n/a CoherenceServer machine1 n/a n/a 0.997 1.000 1024 MB 140 MB 884 MB 4 /192.168.1.124 58434 43055 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1024 MB 175 MB 849 MB 5 /192.168.1.124 58464 43081 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1024 MB 184 MB 840 MB 7 /192.168.1.124 58774 44276 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1024 MB 124 MB 900 MB 8 /192.168.1.124 58808 44473 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1024 MB 97 MB 927 MB 9 /192.168.1.124 58868 44523 n/a CoherenceConsole n/a n/a n/a 1.000 1.000 256 M 22 MB 234 MB We can see the management node on Node 1, the storage members on nodes 2-5 and the console on node 6. 3. Get the partitioned services <markup lang=\"bash\" >cohctl get services -t DistributedCache -o wide Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS ENDANGERED VULNERABLE UNBALANCED STATUS PartitionedTopic DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache2 DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe See below for explanations of the above columns: STATUS HA - The High Availability (HA) status for this service. A value of MACHINE-SAFE indicates that all the cluster members running on any given computer could be stopped without data loss. A value of NODE-SAFE indicates that a cluster member could be stopped without data loss. A value of ENDANGERED indicates that abnormal termination of any cluster member that runs this service may cause data loss. A value of N/A indicates that the service has no high availability impact. STORAGE - Specifies the total number of cluster members running this service for which local storage is enabled PARTITIONS - The total number of partitions that every cache storage is divided into ENDANGERED - The total number of partitions that are not currently backed up VULNERABLE - The total number of partitions that are backed up on the same machine where the primary partition owner resides UNBALANCED - The total number of primary and backup partitions that remain to be transferred until the partition distribution across the storage enabled service members is fully balanced 4. View the caches In our case we have the following caches defined: <markup lang=\"bash\" >cohctl get caches -m Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total Caches: 3, Total primary storage: 175MB SERVICE CACHE COUNT SIZE PartitionedCache tim 1,000 9 MB PartitionedCache2 test-1 100,000 110 MB PartitionedCache2 test-2 50,000 55 MB You can use the -o wide to display more information. 5. Start watching the services <markup lang=\"bash\" >cohctl get services -t DistributedCache -w -o wide The above will continue watching the services. Keep this open in a separate terminal. 6. Carry out a rolling restart of the cluster. With the above command running in a separate terminal, carry out the following for each machine and watch for the StatusHA values. Stop member 1 on first machine Wait for NODE-SAFE - When stopping the first cache server, you may observe the service StatusHA go to ENDANGERED straight after Coherence detects the failure and starts the rebalancing. When the StatusHA returns to NODE-SAFE, and unbalanced partitions are zero, you can continue. Stop member 2 on first machine Wait for MACHINE-SAFE - We will pretend to apply the software patch. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines ",
            "title": "Run the example"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " The Coherence CLI cannot directly start or stop members, but can be use in scripts to detect when services have reached a certain state. You can use the -a MACHINE-SAFE option of get services to wait up to the timeout value (default to 60 seconds), for the StatusHA to be equal or greater that the value you specified. If it reaches this value in the timeout, the command will return 0 exit code but if it does not, then a return code of 1 is returned. The following example would wait up to 60 seconds for DistributedCache services to be MACHINE-SAFE. <markup lang=\"bash\" >cohctl get services -t DistributedCache -w -a MACHINE-SAFE ",
            "title": "Scripting the Rolling Redeploy"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " Overview This example walks you through how to monitor the High Available (HA) Status or StatusHA value for Coherence Partitioned Services within a cluster by using the cohctl get services command. StatusHA is most commonly used to ensure services are in a safe state between restarting cache servers during a rolling restart. Setup for this Example In this example we have a cluster called my-cluster with the following setup: A single storage-disabled management node running Management over REST enabled 2 storage-enabled nodes on machine1 2 storage-enabled nodes on machine2 2 storage-enabled nodes on machine3 A Coherence console client running Run the example In this example we will carry out a rolling restart of our cluster to simulate applying an application code patch to our cluster. For more details on rolling restarts, please see Starting and Stopping Cluster Members in the Coherence documentation. The process will be: Stop member 1 on first machine Wait for NODE-SAFE - (Can&#8217;t get to MACHINE-SAFE because of unbalanced partition counts between machines) Stop member 2 on first machine Wait for MACHINE-SAFE - When they could apply an application patch to our first machine. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines Read on below for the example. 1. Show the clusters <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE LOCAL local http http://localhost:30000/management/coherence/cluster 23.03 my-cluster Standalone false <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local 2. Get the members <markup lang=\"bash\" >cohctl get members -o wide -m Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Cluster Heap - Total: 6.750GB, Used: 1.076GB, Available: 5.674GB (84.1%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MACHINE RACK SITE PUBLISHER RECEIVER MAX HEAP USED HEAP AVAIL HEAP 1 /192.168.1.124 58374 42988 n/a Management n/a n/a n/a 0.995 1.000 512 MB 53 MB 459 MB 2 /192.168.1.124 58389 43011 n/a CoherenceServer machine1 n/a n/a 1.000 1.000 1024 MB 307 MB 717 MB 3 /192.168.1.124 58399 43033 n/a CoherenceServer machine1 n/a n/a 0.997 1.000 1024 MB 140 MB 884 MB 4 /192.168.1.124 58434 43055 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1024 MB 175 MB 849 MB 5 /192.168.1.124 58464 43081 n/a CoherenceServer machine2 n/a n/a 0.997 1.000 1024 MB 184 MB 840 MB 7 /192.168.1.124 58774 44276 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1024 MB 124 MB 900 MB 8 /192.168.1.124 58808 44473 n/a CoherenceServer machine3 n/a n/a 1.000 1.000 1024 MB 97 MB 927 MB 9 /192.168.1.124 58868 44523 n/a CoherenceConsole n/a n/a n/a 1.000 1.000 256 M 22 MB 234 MB We can see the management node on Node 1, the storage members on nodes 2-5 and the console on node 6. 3. Get the partitioned services <markup lang=\"bash\" >cohctl get services -t DistributedCache -o wide Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS ENDANGERED VULNERABLE UNBALANCED STATUS PartitionedTopic DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache2 DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe PartitionedCache DistributedCache 7 MACHINE-SAFE 6 257 0 0 0 Safe See below for explanations of the above columns: STATUS HA - The High Availability (HA) status for this service. A value of MACHINE-SAFE indicates that all the cluster members running on any given computer could be stopped without data loss. A value of NODE-SAFE indicates that a cluster member could be stopped without data loss. A value of ENDANGERED indicates that abnormal termination of any cluster member that runs this service may cause data loss. A value of N/A indicates that the service has no high availability impact. STORAGE - Specifies the total number of cluster members running this service for which local storage is enabled PARTITIONS - The total number of partitions that every cache storage is divided into ENDANGERED - The total number of partitions that are not currently backed up VULNERABLE - The total number of partitions that are backed up on the same machine where the primary partition owner resides UNBALANCED - The total number of primary and backup partitions that remain to be transferred until the partition distribution across the storage enabled service members is fully balanced 4. View the caches In our case we have the following caches defined: <markup lang=\"bash\" >cohctl get caches -m Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total Caches: 3, Total primary storage: 175MB SERVICE CACHE COUNT SIZE PartitionedCache tim 1,000 9 MB PartitionedCache2 test-1 100,000 110 MB PartitionedCache2 test-2 50,000 55 MB You can use the -o wide to display more information. 5. Start watching the services <markup lang=\"bash\" >cohctl get services -t DistributedCache -w -o wide The above will continue watching the services. Keep this open in a separate terminal. 6. Carry out a rolling restart of the cluster. With the above command running in a separate terminal, carry out the following for each machine and watch for the StatusHA values. Stop member 1 on first machine Wait for NODE-SAFE - When stopping the first cache server, you may observe the service StatusHA go to ENDANGERED straight after Coherence detects the failure and starts the rebalancing. When the StatusHA returns to NODE-SAFE, and unbalanced partitions are zero, you can continue. Stop member 2 on first machine Wait for MACHINE-SAFE - We will pretend to apply the software patch. Start member 1 and 2 on first machine Wait for MACHINE-SAFE Repeat steps 1-6 on second and third machines Scripting the Rolling Redeploy The Coherence CLI cannot directly start or stop members, but can be use in scripts to detect when services have reached a certain state. You can use the -a MACHINE-SAFE option of get services to wait up to the timeout value (default to 60 seconds), for the StatusHA to be equal or greater that the value you specified. If it reaches this value in the timeout, the command will return 0 exit code but if it does not, then a return code of 1 is returned. The following example would wait up to 60 seconds for DistributedCache services to be MACHINE-SAFE. <markup lang=\"bash\" >cohctl get services -t DistributedCache -w -a MACHINE-SAFE ",
            "title": "Rolling Restarts"
        },
        {
            "location": "/docs/examples/05_rolling_restarts",
            "text": " Services Starting and Stopping Cluster Members Coherence MBean Reference ",
            "title": "See Also"
        },
        {
            "location": "/docs/config/10_changing_config_locations",
            "text": " By default, the CLI creates a directory .cohctl off the users home to store connection information, log files and various other information. If you wish to change this directory from the default, you can use the following for each command. <markup lang=\"bash\" >cohctl get clusters --config-dir /u01/config You can also specify a different location for the cohct.yaml file that is generated. <markup lang=\"bash\" >cohctl get clusters --config /u01/my-config.yaml It is recommended to leave these values as default unless you have a good reason to change them as you would need to specify the --config option on each command execution. ",
            "title": "Changing Config Locations"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'get federation' command displays the federation details for a cluster. You must specify either destinations, origins or all to show both. You can also specify '-o wide' to display addition information. Usage cohctl get federation {destinations|origins|all} [flags] Flags -h, --help help for federation Examples Display all destinations. Destinations are clusters that this cluster is sending data to. <markup lang=\"bash\" >cohctl get federation destinations -c local -m Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedCache secondary-cluster 2 [PAUSED] 0 MB 0 0 0.0Mbps Display all destinations in wide format. <markup lang=\"bash\" >cohctl get federation destinations -c local -o wide -m Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH AVG APPLY AVG ROUND TRIP AVG BACKLOG DELAY REPLICATE PARTITIONS ERRORS UNACKED FederatedCache secondary-cluster 2 [IDLE] 204 MB 1,028 3,348 0.0Mbps 338ms 1,393ms 37,770ms 100.00% 31 0 0 Using the wide option, the following fields are available in regard to the current (or latest) replicate all operation: REPLICATE - the percent complete for the request PARTITIONS - the total number of partitions completed for the request ERRORS - the number of partitions with error responses for the request UNACKED - the total number of partitions that have been sent but have not yet been acknowledged for the request The last three attributes are only available in the latest Commercial patches. Check your release notes. Display all origins. Origins are clusters that this cluster is receiving data from. <markup lang=\"bash\" >cohctl get federation destinations -c local Output: <markup lang=\"bash\" >cohctl get federation origins -c local -m SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC FederatedCache secondary-cluster 2 20 MB 755 2,577 Display all origins in wide format. <markup lang=\"bash\" >cohctl get federation origins -c local -o wide -m Output: <markup lang=\"bash\" >SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC AVG APPLY AVG BACKLOG DELAY FederatedCache secondary-cluster 2 20 MB 755 2,577 1,456ms 248ms ",
            "title": "Get Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'set federation' command sets an attribute for a federated service. The following attribute names are allowed: traceLogging. Usage cohctl set federation service-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for federation -v, --value string attribute value to set -y, --yes automatically confirm the operation Set traceLogging to true for a federated service. <markup lang=\"bash\" >cohctl set federation FederatedPartitionedPofCache -a traceLogging -v true -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute traceLogging to true for service FederatedPartitionedPofCache? (y/n) y operation completed ",
            "title": "Set Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'describe federation' command displays the federation details for a given service, type and participant. Specify -T to set type outgoing or incoming and -p for participant. Usage cohctl describe federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -T, --type string type to describe outgoing or incoming (default \"outgoing\") -v, --verbose include verbose output including all attributes Examples Describe federation destination details on a cluster for the participant secondary-cluster. This indicates to display data being sent to the destination secondary-cluster . <markup lang=\"bash\" >cohctl describe federation -c local FederatedPartitionedPofCache -p secondary-cluster -T destinations Output: <markup lang=\"bash\" >FEDERATION DETAILS ------------------ Service: FederatedCache Type: destinations Participant: secondary-cluster NODE ID STATE DATA SENT MSG SENT REC SENT CURR BWIDTH 1 IDLE 43,205 40 40 0.0Mbps 2 IDLE 43,391 42 42 0.0Mbps Describe federation origin details on a cluster for the participant secondary-cluster. This indicates to display data being sent from the destination secondary-cluster . <markup lang=\"bash\" >cohctl describe federation -c local FederatedPartitionedPofCache -p secondary-cluster -T origins -o wide Output: <markup lang=\"bash\" >FEDERATION DETAILS ------------------ Service: FederatedPartitionedPofCache Type: origins Participant: secondary-cluster NODE ID CONNECTED DATA SENT MSG SENT REC SENT AVG APPLY AVG BACKLOG DELAY 1 1 83,029 67 67 15ms 440ms 2 1 87,871 68 68 15ms 350ms ",
            "title": "Describe Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'start federation' command starts federation on a service. There are various options available using '-M' including: - with-sync - start after federating all cache entries - no-backlog - clear any initial backlog and start federating You may also specify a participant otherwise the command will apply to all participants. Usage cohctl start federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -M, --start-mode string the start mode. Leave blank for normal or specify with-sync or no-backlog -y, --yes automatically confirm the operation Examples Start Federation for all participants. <markup lang=\"bash\" >cohctl start federation FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant. <markup lang=\"bash\" >cohctl start federation FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant with no backlog. <markup lang=\"bash\" >cohctl start federation FederatedCache -p secondary-cluster -m no-backlog -c local Output: <markup lang=\"bash\" >Are you sure you want to start (no-backlog) federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed ",
            "title": "Start Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'stop federation' command stops federation on a service. There You may also specify a participant otherwise the command will apply to all participants. Usage cohctl stop federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Stop Federation for all participants. <markup lang=\"bash\" >cohctl stop federation FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to stop federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation for a specific participant. <markup lang=\"bash\" >cohctl stop federation FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed ",
            "title": "Stop Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'pause' command stops federation on a service. You may also specify a participant otherwise the command will apply to all participants. Usage cohctl pause federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Pause Federation for all participants. <markup lang=\"bash\" >cohctl pause FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to pause federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed ",
            "title": "Pause Federation"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " The 'replicate all' command replicates all caches for a federated service. You must specify a participant to replicate for. Usage cohctl replicate all service-name [flags] Flags -h, --help help for all -p, --participant string participant to apply to -y, --yes automatically confirm the operation Examples Replicate all for a specific participant <markup lang=\"bash\" >cohctl replicate all FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to replicateAll federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation complete When this command returns, the replicate all request has been sent to the cluster but may not yet be complete. You should use the command cohctl get federation destinations -o wide to show the replication percent complete. ",
            "title": "Replicate All"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " There are various commands that allow you to work with and issue Federation commands. cohctl get federation - displays federation details for a cluster cohctl set federation - sets an attribute for a federated service cohctl describe federation - displays federation details for a given service and participant cohctl start federation - starts federation for a service cohctl stop federation - stops federation for a service cohctl pause federation - pauses federation for a service cohctl replicate all - initiates a replicate of all cache entries for a federated service This is a Coherence Grid Edition feature only and is not available with Community Edition. See the Coherence Documentation for more information on Federation. Get Federation The 'get federation' command displays the federation details for a cluster. You must specify either destinations, origins or all to show both. You can also specify '-o wide' to display addition information. Usage cohctl get federation {destinations|origins|all} [flags] Flags -h, --help help for federation Examples Display all destinations. Destinations are clusters that this cluster is sending data to. <markup lang=\"bash\" >cohctl get federation destinations -c local -m Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedCache secondary-cluster 2 [PAUSED] 0 MB 0 0 0.0Mbps Display all destinations in wide format. <markup lang=\"bash\" >cohctl get federation destinations -c local -o wide -m Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH AVG APPLY AVG ROUND TRIP AVG BACKLOG DELAY REPLICATE PARTITIONS ERRORS UNACKED FederatedCache secondary-cluster 2 [IDLE] 204 MB 1,028 3,348 0.0Mbps 338ms 1,393ms 37,770ms 100.00% 31 0 0 Using the wide option, the following fields are available in regard to the current (or latest) replicate all operation: REPLICATE - the percent complete for the request PARTITIONS - the total number of partitions completed for the request ERRORS - the number of partitions with error responses for the request UNACKED - the total number of partitions that have been sent but have not yet been acknowledged for the request The last three attributes are only available in the latest Commercial patches. Check your release notes. Display all origins. Origins are clusters that this cluster is receiving data from. <markup lang=\"bash\" >cohctl get federation destinations -c local Output: <markup lang=\"bash\" >cohctl get federation origins -c local -m SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC FederatedCache secondary-cluster 2 20 MB 755 2,577 Display all origins in wide format. <markup lang=\"bash\" >cohctl get federation origins -c local -o wide -m Output: <markup lang=\"bash\" >SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC AVG APPLY AVG BACKLOG DELAY FederatedCache secondary-cluster 2 20 MB 755 2,577 1,456ms 248ms Set Federation The 'set federation' command sets an attribute for a federated service. The following attribute names are allowed: traceLogging. Usage cohctl set federation service-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for federation -v, --value string attribute value to set -y, --yes automatically confirm the operation Set traceLogging to true for a federated service. <markup lang=\"bash\" >cohctl set federation FederatedPartitionedPofCache -a traceLogging -v true -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute traceLogging to true for service FederatedPartitionedPofCache? (y/n) y operation completed Describe Federation The 'describe federation' command displays the federation details for a given service, type and participant. Specify -T to set type outgoing or incoming and -p for participant. Usage cohctl describe federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -T, --type string type to describe outgoing or incoming (default \"outgoing\") -v, --verbose include verbose output including all attributes Examples Describe federation destination details on a cluster for the participant secondary-cluster. This indicates to display data being sent to the destination secondary-cluster . <markup lang=\"bash\" >cohctl describe federation -c local FederatedPartitionedPofCache -p secondary-cluster -T destinations Output: <markup lang=\"bash\" >FEDERATION DETAILS ------------------ Service: FederatedCache Type: destinations Participant: secondary-cluster NODE ID STATE DATA SENT MSG SENT REC SENT CURR BWIDTH 1 IDLE 43,205 40 40 0.0Mbps 2 IDLE 43,391 42 42 0.0Mbps Describe federation origin details on a cluster for the participant secondary-cluster. This indicates to display data being sent from the destination secondary-cluster . <markup lang=\"bash\" >cohctl describe federation -c local FederatedPartitionedPofCache -p secondary-cluster -T origins -o wide Output: <markup lang=\"bash\" >FEDERATION DETAILS ------------------ Service: FederatedPartitionedPofCache Type: origins Participant: secondary-cluster NODE ID CONNECTED DATA SENT MSG SENT REC SENT AVG APPLY AVG BACKLOG DELAY 1 1 83,029 67 67 15ms 440ms 2 1 87,871 68 68 15ms 350ms Start Federation The 'start federation' command starts federation on a service. There are various options available using '-M' including: - with-sync - start after federating all cache entries - no-backlog - clear any initial backlog and start federating You may also specify a participant otherwise the command will apply to all participants. Usage cohctl start federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -M, --start-mode string the start mode. Leave blank for normal or specify with-sync or no-backlog -y, --yes automatically confirm the operation Examples Start Federation for all participants. <markup lang=\"bash\" >cohctl start federation FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant. <markup lang=\"bash\" >cohctl start federation FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant with no backlog. <markup lang=\"bash\" >cohctl start federation FederatedCache -p secondary-cluster -m no-backlog -c local Output: <markup lang=\"bash\" >Are you sure you want to start (no-backlog) federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation The 'stop federation' command stops federation on a service. There You may also specify a participant otherwise the command will apply to all participants. Usage cohctl stop federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Stop Federation for all participants. <markup lang=\"bash\" >cohctl stop federation FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to stop federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation for a specific participant. <markup lang=\"bash\" >cohctl stop federation FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Pause Federation The 'pause' command stops federation on a service. You may also specify a participant otherwise the command will apply to all participants. Usage cohctl pause federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Pause Federation for all participants. <markup lang=\"bash\" >cohctl pause FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to pause federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Replicate All The 'replicate all' command replicates all caches for a federated service. You must specify a participant to replicate for. Usage cohctl replicate all service-name [flags] Flags -h, --help help for all -p, --participant string participant to apply to -y, --yes automatically confirm the operation Examples Replicate all for a specific participant <markup lang=\"bash\" >cohctl replicate all FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to replicateAll federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation complete When this command returns, the replicate all request has been sent to the cluster but may not yet be complete. You should use the command cohctl get federation destinations -o wide to show the replication percent complete. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " Federating Caches in the Coherence Documentation Services ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/42_federation",
            "text": " Overview There are various commands that allow you to work with and issue Federation commands. cohctl get federation - displays federation details for a cluster cohctl set federation - sets an attribute for a federated service cohctl describe federation - displays federation details for a given service and participant cohctl start federation - starts federation for a service cohctl stop federation - stops federation for a service cohctl pause federation - pauses federation for a service cohctl replicate all - initiates a replicate of all cache entries for a federated service This is a Coherence Grid Edition feature only and is not available with Community Edition. See the Coherence Documentation for more information on Federation. Get Federation The 'get federation' command displays the federation details for a cluster. You must specify either destinations, origins or all to show both. You can also specify '-o wide' to display addition information. Usage cohctl get federation {destinations|origins|all} [flags] Flags -h, --help help for federation Examples Display all destinations. Destinations are clusters that this cluster is sending data to. <markup lang=\"bash\" >cohctl get federation destinations -c local -m Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedCache secondary-cluster 2 [PAUSED] 0 MB 0 0 0.0Mbps Display all destinations in wide format. <markup lang=\"bash\" >cohctl get federation destinations -c local -o wide -m Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH AVG APPLY AVG ROUND TRIP AVG BACKLOG DELAY REPLICATE PARTITIONS ERRORS UNACKED FederatedCache secondary-cluster 2 [IDLE] 204 MB 1,028 3,348 0.0Mbps 338ms 1,393ms 37,770ms 100.00% 31 0 0 Using the wide option, the following fields are available in regard to the current (or latest) replicate all operation: REPLICATE - the percent complete for the request PARTITIONS - the total number of partitions completed for the request ERRORS - the number of partitions with error responses for the request UNACKED - the total number of partitions that have been sent but have not yet been acknowledged for the request The last three attributes are only available in the latest Commercial patches. Check your release notes. Display all origins. Origins are clusters that this cluster is receiving data from. <markup lang=\"bash\" >cohctl get federation destinations -c local Output: <markup lang=\"bash\" >cohctl get federation origins -c local -m SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC FederatedCache secondary-cluster 2 20 MB 755 2,577 Display all origins in wide format. <markup lang=\"bash\" >cohctl get federation origins -c local -o wide -m Output: <markup lang=\"bash\" >SERVICE ORIGIN REMOTE CONNECTIONS DATA REC MSG REC REC REC AVG APPLY AVG BACKLOG DELAY FederatedCache secondary-cluster 2 20 MB 755 2,577 1,456ms 248ms Set Federation The 'set federation' command sets an attribute for a federated service. The following attribute names are allowed: traceLogging. Usage cohctl set federation service-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for federation -v, --value string attribute value to set -y, --yes automatically confirm the operation Set traceLogging to true for a federated service. <markup lang=\"bash\" >cohctl set federation FederatedPartitionedPofCache -a traceLogging -v true -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute traceLogging to true for service FederatedPartitionedPofCache? (y/n) y operation completed Describe Federation The 'describe federation' command displays the federation details for a given service, type and participant. Specify -T to set type outgoing or incoming and -p for participant. Usage cohctl describe federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -T, --type string type to describe outgoing or incoming (default \"outgoing\") -v, --verbose include verbose output including all attributes Examples Describe federation destination details on a cluster for the participant secondary-cluster. This indicates to display data being sent to the destination secondary-cluster . <markup lang=\"bash\" >cohctl describe federation -c local FederatedPartitionedPofCache -p secondary-cluster -T destinations Output: <markup lang=\"bash\" >FEDERATION DETAILS ------------------ Service: FederatedCache Type: destinations Participant: secondary-cluster NODE ID STATE DATA SENT MSG SENT REC SENT CURR BWIDTH 1 IDLE 43,205 40 40 0.0Mbps 2 IDLE 43,391 42 42 0.0Mbps Describe federation origin details on a cluster for the participant secondary-cluster. This indicates to display data being sent from the destination secondary-cluster . <markup lang=\"bash\" >cohctl describe federation -c local FederatedPartitionedPofCache -p secondary-cluster -T origins -o wide Output: <markup lang=\"bash\" >FEDERATION DETAILS ------------------ Service: FederatedPartitionedPofCache Type: origins Participant: secondary-cluster NODE ID CONNECTED DATA SENT MSG SENT REC SENT AVG APPLY AVG BACKLOG DELAY 1 1 83,029 67 67 15ms 440ms 2 1 87,871 68 68 15ms 350ms Start Federation The 'start federation' command starts federation on a service. There are various options available using '-M' including: - with-sync - start after federating all cache entries - no-backlog - clear any initial backlog and start federating You may also specify a participant otherwise the command will apply to all participants. Usage cohctl start federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -M, --start-mode string the start mode. Leave blank for normal or specify with-sync or no-backlog -y, --yes automatically confirm the operation Examples Start Federation for all participants. <markup lang=\"bash\" >cohctl start federation FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant. <markup lang=\"bash\" >cohctl start federation FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Start Federation for a specific participant with no backlog. <markup lang=\"bash\" >cohctl start federation FederatedCache -p secondary-cluster -m no-backlog -c local Output: <markup lang=\"bash\" >Are you sure you want to start (no-backlog) federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation The 'stop federation' command stops federation on a service. There You may also specify a participant otherwise the command will apply to all participants. Usage cohctl stop federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Stop Federation for all participants. <markup lang=\"bash\" >cohctl stop federation FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to stop federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Stop Federation for a specific participant. <markup lang=\"bash\" >cohctl stop federation FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to start federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Pause Federation The 'pause' command stops federation on a service. You may also specify a participant otherwise the command will apply to all participants. Usage cohctl pause federation service-name [flags] Flags -h, --help help for federation -p, --participant string participant to apply to (default \"all\") -y, --yes automatically confirm the operation Examples Pause Federation for all participants. <markup lang=\"bash\" >cohctl pause FederatedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to pause federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation completed Replicate All The 'replicate all' command replicates all caches for a federated service. You must specify a participant to replicate for. Usage cohctl replicate all service-name [flags] Flags -h, --help help for all -p, --participant string participant to apply to -y, --yes automatically confirm the operation Examples Replicate all for a specific participant <markup lang=\"bash\" >cohctl replicate all FederatedCache -p secondary-cluster -c local Output: <markup lang=\"bash\" >Are you sure you want to replicateAll federation for service FederatedCache for participants [secondary-cluster] ? (y/n) y operation complete When this command returns, the replicate all request has been sent to the cluster but may not yet be complete. You should use the command cohctl get federation destinations -o wide to show the replication percent complete. See Also Federating Caches in the Coherence Documentation Services ",
            "title": "Federation"
        },
        {
            "location": "/docs/config/07_command_completion",
            "text": " Use the following command to show the help for the completion command <markup lang=\"bash\" >cohctl completion Output: <markup lang=\"bash\" >Generate the autocompletion script for cohctl for the specified shell. See each sub-command's help for details on how to use the generated script. Usage: cohctl completion [command] Available Commands: bash generate the autocompletion script for bash fish generate the autocompletion script for fish powershell generate the autocompletion script for powershell zsh generate the autocompletion script for zsh Execute the command for your desired shell. In our case it will be bash . <markup lang=\"bash\" >cohctl completion bash &gt; ~/cohctl-completion.sh Once you have generated the script, you can source it. <markup lang=\"bash\" >source ~/cohctl-completion.sh ",
            "title": "Generate the Script"
        },
        {
            "location": "/docs/config/07_command_completion",
            "text": " Once your script is sourced, you can type cohctl and then press TAB to auto-complete a command and TAB twice, and it will show completion for a sub command. Complete the describe command by typing the following and then TAB . <markup lang=\"bash\" >cohctl des Next, when the following is displayed, press TAB twice, and you will see the available describe options. <markup lang=\"bash\" >cohctl describe Output: <markup lang=\"bash\" >cohctl describe cache (describe a cache) machine (describe a machine) reporter (describe a reporter) cluster (describe a cluster) member (describe a member) service (describe a service) http-server (describe a http server) proxy (describe a proxy server) ",
            "title": "Using Command Completion"
        },
        {
            "location": "/docs/config/07_command_completion",
            "text": " You can use command completion on any describe operation and the CLI will display a list of possible options. For example: If you typed cohctl describe cache , then pressed TAB twice, it will show the list of caches that you can describe: <markup lang=\"bash\" >cohctl describe cache Output: <markup lang=\"bash\" >customers orders products ",
            "title": "Command Completion for Describe Commands"
        },
        {
            "location": "/docs/config/07_command_completion",
            "text": " The Coherence CLI allows you to generate a script that will help you work with the tool by providing command completion. Generate the Script Use the following command to show the help for the completion command <markup lang=\"bash\" >cohctl completion Output: <markup lang=\"bash\" >Generate the autocompletion script for cohctl for the specified shell. See each sub-command's help for details on how to use the generated script. Usage: cohctl completion [command] Available Commands: bash generate the autocompletion script for bash fish generate the autocompletion script for fish powershell generate the autocompletion script for powershell zsh generate the autocompletion script for zsh Execute the command for your desired shell. In our case it will be bash . <markup lang=\"bash\" >cohctl completion bash &gt; ~/cohctl-completion.sh Once you have generated the script, you can source it. <markup lang=\"bash\" >source ~/cohctl-completion.sh Using Command Completion Once your script is sourced, you can type cohctl and then press TAB to auto-complete a command and TAB twice, and it will show completion for a sub command. Complete the describe command by typing the following and then TAB . <markup lang=\"bash\" >cohctl des Next, when the following is displayed, press TAB twice, and you will see the available describe options. <markup lang=\"bash\" >cohctl describe Output: <markup lang=\"bash\" >cohctl describe cache (describe a cache) machine (describe a machine) reporter (describe a reporter) cluster (describe a cluster) member (describe a member) service (describe a service) http-server (describe a http server) proxy (describe a proxy server) Command Completion for Describe Commands You can use command completion on any describe operation and the CLI will display a list of possible options. For example: If you typed cohctl describe cache , then pressed TAB twice, it will show the list of caches that you can describe: <markup lang=\"bash\" >cohctl describe cache Output: <markup lang=\"bash\" >customers orders products ",
            "title": "Command Completion"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " The 'get executors' command displays the executors for a cluster. Usage cohctl get executors [flags] Flags -h, --help help for executors Examples <markup lang=\"bash\" >cohctl get executors -c local Output: <markup lang=\"bash\" >Total executors: 3 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION executor1 2 0 0 0 FixedThreadPool(ThreadCount=5, ThreadFactory=default) executor2 2 0 0 0 SingleThreaded(ThreadFactory=default) UnNamed 2 0 0 0 None ",
            "title": "Get Executors"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " The 'describe executor' command shows information related to a specific executor. Usage cohctl describe executor executor-name [flags] Flags -h, --help help for executor Examples <markup lang=\"bash\" >cohctl describe executor executor1 -c local Output: <markup lang=\"bash\" >EXECUTOR DETAILS ---------------- Name : executor1 Member Id : 1 Description : SingleThreaded(ThreadFactory=default) Id : 3af3cb00-b87d-4b89-ae9f-2107743b0741 Location : Member(Id=1, Timestamp=2021-12-02 15:16:21.247, Address=192.168.1.120:64409, MachineId=3603, Location=process:35013, Role=Management) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Name : executor1 Member Id : 2 Description : SingleThreaded(ThreadFactory=default) Id : cd7241ce-2a0a-41f4-85cd-538513fba2ac Location : Member(Id=2, Timestamp=2021-12-02 15:28:50.824, Address=192.168.1.120:64911, MachineId=3603, Location=process:37972, Role=TangosolNetCoherence) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false ",
            "title": "Describe Executor"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " The 'set executor' command sets an attribute for a specific executor across all nodes. The following attribute names are allowed: traceLogging. Usage cohctl set executor executor-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for executor -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Turn on trace logging for the coherence-concurrent-default-executor executor. <markup lang=\"bash\" >cohctl set executor coherence-concurrent-default-executor -a traceLogging -v true -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute traceLogging to true for coherence-concurrent-default-executor? (y/n) y operation completed ",
            "title": "Set Executors"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " There are various commands that allow you to work with and manage Executors. cohctl get executors - displays the executors for a cluster cohctl describe executor - shows information related to a specific executor cohctl set executor - sets an attribute for a specific executor across all nodes Get Executors The 'get executors' command displays the executors for a cluster. Usage cohctl get executors [flags] Flags -h, --help help for executors Examples <markup lang=\"bash\" >cohctl get executors -c local Output: <markup lang=\"bash\" >Total executors: 3 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION executor1 2 0 0 0 FixedThreadPool(ThreadCount=5, ThreadFactory=default) executor2 2 0 0 0 SingleThreaded(ThreadFactory=default) UnNamed 2 0 0 0 None Describe Executor The 'describe executor' command shows information related to a specific executor. Usage cohctl describe executor executor-name [flags] Flags -h, --help help for executor Examples <markup lang=\"bash\" >cohctl describe executor executor1 -c local Output: <markup lang=\"bash\" >EXECUTOR DETAILS ---------------- Name : executor1 Member Id : 1 Description : SingleThreaded(ThreadFactory=default) Id : 3af3cb00-b87d-4b89-ae9f-2107743b0741 Location : Member(Id=1, Timestamp=2021-12-02 15:16:21.247, Address=192.168.1.120:64409, MachineId=3603, Location=process:35013, Role=Management) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Name : executor1 Member Id : 2 Description : SingleThreaded(ThreadFactory=default) Id : cd7241ce-2a0a-41f4-85cd-538513fba2ac Location : Member(Id=2, Timestamp=2021-12-02 15:28:50.824, Address=192.168.1.120:64911, MachineId=3603, Location=process:37972, Role=TangosolNetCoherence) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Set Executors The 'set executor' command sets an attribute for a specific executor across all nodes. The following attribute names are allowed: traceLogging. Usage cohctl set executor executor-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for executor -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Turn on trace logging for the coherence-concurrent-default-executor executor. <markup lang=\"bash\" >cohctl set executor coherence-concurrent-default-executor -a traceLogging -v true -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute traceLogging to true for coherence-concurrent-default-executor? (y/n) y operation completed ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/60_executors",
            "text": " Overview There are various commands that allow you to work with and manage Executors. cohctl get executors - displays the executors for a cluster cohctl describe executor - shows information related to a specific executor cohctl set executor - sets an attribute for a specific executor across all nodes Get Executors The 'get executors' command displays the executors for a cluster. Usage cohctl get executors [flags] Flags -h, --help help for executors Examples <markup lang=\"bash\" >cohctl get executors -c local Output: <markup lang=\"bash\" >Total executors: 3 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION executor1 2 0 0 0 FixedThreadPool(ThreadCount=5, ThreadFactory=default) executor2 2 0 0 0 SingleThreaded(ThreadFactory=default) UnNamed 2 0 0 0 None Describe Executor The 'describe executor' command shows information related to a specific executor. Usage cohctl describe executor executor-name [flags] Flags -h, --help help for executor Examples <markup lang=\"bash\" >cohctl describe executor executor1 -c local Output: <markup lang=\"bash\" >EXECUTOR DETAILS ---------------- Name : executor1 Member Id : 1 Description : SingleThreaded(ThreadFactory=default) Id : 3af3cb00-b87d-4b89-ae9f-2107743b0741 Location : Member(Id=1, Timestamp=2021-12-02 15:16:21.247, Address=192.168.1.120:64409, MachineId=3603, Location=process:35013, Role=Management) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Name : executor1 Member Id : 2 Description : SingleThreaded(ThreadFactory=default) Id : cd7241ce-2a0a-41f4-85cd-538513fba2ac Location : Member(Id=2, Timestamp=2021-12-02 15:28:50.824, Address=192.168.1.120:64911, MachineId=3603, Location=process:37972, Role=TangosolNetCoherence) Member Count : 0 State : RUNNING Tasks Completed Count : 0 Tasks In Progress Count: 0 Tasks Rejected Count : 0 Trace Logging : false Set Executors The 'set executor' command sets an attribute for a specific executor across all nodes. The following attribute names are allowed: traceLogging. Usage cohctl set executor executor-name [flags] Flags -a, --attribute string attribute name to set -h, --help help for executor -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Turn on trace logging for the coherence-concurrent-default-executor executor. <markup lang=\"bash\" >cohctl set executor coherence-concurrent-default-executor -a traceLogging -v true -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute traceLogging to true for coherence-concurrent-default-executor? (y/n) y operation completed ",
            "title": "Executors"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset cache-stats' command resets cache statistics for all cache members or a comma separated list of member IDs. Usage cohctl reset cache-stats cache-name [flags] Flags -h, --help help for cache-stats -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -y, --yes automatically confirm the operation Examples Reset statistics for all cache members for cache test . <markup lang=\"bash\" >cohctl get caches -c local Output: <markup lang=\"bash\" >Total Caches: 1, Total primary storage: 30 MB SERVICE CACHE COUNT SIZE PartitionedCache test 123,000 30 MB <markup lang=\"bash\" >cohctl reset cache-stats test -s PartitionedCache Using cluster connection 'local' from current context. Are you sure you want to reset cache statistics for cache test, service PartitionedCache for all 3 nodes? (y/n) y operation completed Reset statistics for cache members 1 and 2 for cache test . <markup lang=\"bash\" >cohctl reset cache-stats test -s PartitionedCache -n 1,2 -c local Output: <markup lang=\"bash\" >Are you sure you want to reset cache statistics for cache test, service PartitionedCache for 2 node(s)? (y/n) y operation completed ",
            "title": "Reset Cache Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset executor-stats' command resets executor statistics for a specific executor. Usage cohctl reset executor-stats executor-name [flags] Flags -h, --help help for executor-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl get executors -c local Output: <markup lang=\"bash\" >Total executors: 1 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION coherence-concurrent-default-executor 3 0 0 0 SingleThreaded(ThreadFactory=default) Reset the stats. <markup lang=\"bash\" >cohctl reset executor-stats coherence-concurrent-default-executor Using cluster connection 'local' from current context. Are you sure you want to reset executor statistics for exeutor coherence-concurrent-default-executor? (y/n) y operation completed ",
            "title": "Reset Executor Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset federation-stats' command resets federation statistics for all members or a comma separated list of member IDs. Usage cohctl reset federation-stats service-name [flags] Flags -h, --help help for federation-stats -n, --node string comma separated node ids to target (default \"all\") -p, --participant string participant to apply to (default \"all\") -T, --type string type to describe outgoing or incoming (default \"outgoing\") -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl get federation all -c local Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedService cluster2 1 [IDLE] 3 MB 13,873 30,000 0.0Mbps <markup lang=\"bash\" >cohctl reset federation-stats FederatedService -p cluster2 -T outgoing -c local Output: <markup lang=\"bash\" >Are you sure you want to reset federation statistics for service FederatedService, participant cluster2, type outgoing for all 1 nodes? (y/n) y operation completed The above federation command is only available in 14.1.1.2206.x and above. ",
            "title": "Reset Federation Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset ramjournal-stats' command resets ram journal statistics. Usage cohctl reset ramjournal-stats [flags] Flags -h, --help help for ramjournal-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl reset ramjournal-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset ramjournal statistics for all 2 nodes? (y/n) y operation completed ",
            "title": "Reset RAM Journal Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset flashjournal-stats' command resets flash journal statistics. Usage cohctl reset flashjournal-stats [flags] Flags -h, --help help for flashjournal-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl reset flashjournal-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset flashjournal statistics for all 2 nodes? (y/n) y operation completed ",
            "title": "Reset Flash Journal Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset member-stats' command resets member statistics for all or a comma separated list of member IDs. Usage cohctl reset member-stats [flags] Flags -h, --help help for member-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation Examples Reset member statistics for member 1 and 3. <markup lang=\"bash\" >cohctl get members -c local Output: <markup lang=\"bash\" >Total cluster members: 3 Cluster Heap - Total: 384 MB Used: 127 MB Available: 257 MB (66.9%) Storage Heap - Total: 384 MB Used: 127 MB Available: 257 MB (66.9%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 /127.0.0.1 58938 96295 storage-0 CoherenceServer true 128 MB 65 MB 63 MB 2 /127.0.0.1 58944 96303 storage-2 CoherenceServer true 128 MB 41 MB 87 MB 3 /127.0.0.1 58941 96296 storage-1 CoherenceServer true 128 MB 21 MB 107 MB <markup lang=\"bash\" >cohctl reset member-stats -n 1,3 -c local Output: <markup lang=\"bash\" >Are you sure you want to reset members statistics for 2 node(s)? (y/n) y operation completed ",
            "title": "Reset Member Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset reporter-stats' command resets reporter statistics for all or a comma separated list of member IDs. Usage cohctl reset reporter-stats [flags] Flags -h, --help help for reporter-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false 3 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false <markup lang=\"bash\" >cohctl reset reporter-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset reporters statistics for all 3 nodes? (y/n) y operation completed ",
            "title": "Reset Reporter Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset service-stats' command resets service statistics for all service or a comma separated list of member IDs. Usage cohctl reset service-stats service-name [flags] Flags -h, --help help for service-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 3 n/a -1 -1 PartitionedTopic PagedTopic 3 NODE-SAFE 3 257 PartitionedCache DistributedCache 3 NODE-SAFE 3 257 ManagementHttpProxy Proxy 1 n/a -1 -1 \"$SYS:HealthHttpProxy\" Proxy 3 n/a -1 -1 \"$SYS:Config\" DistributedCache 3 NODE-SAFE 3 257 \"$SYS:ConcurrentProxy\" Proxy 3 n/a -1 -1 \"$SYS:Concurrent\" DistributedCache 3 NODE-SAFE 3 257 <markup lang=\"bash\" >cohctl reset service-stats PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to reset service statistics for all 3 nodes? (y/n) y operation completed ",
            "title": "Reset Service Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " The 'reset proxy-stats' command resets connection manager statistics for all proxy services or a comma separated list of member IDs. Usage cohctl reset proxy-stats service-name [flags] Flags -h, --help help for proxy-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get proxies -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME CONNECTIONS DATA SENT DATA REC 1 0.0.0.0:64073.58994 \"$SYS:SystemProxy\" 0 0 MB 0 MB 1 0.0.0.0:64073.41509 Proxy 0 0 MB 0 MB <markup lang=\"bash\" >cohctl reset proxy-stats Proxy -c local Are you sure you want to reset connectionManager statics statistics for service Proxy for all 1 nodes? (y/n) y operation completed ",
            "title": "Reset Proxy Connection Manager Statistics"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " This section contains commands for resetting MBean statistics which can be useful when you are running performance tests. For most commands you can reset for all members or specify a comma-separated list of members using the -m option. See MBean Reference for details on what MBeans support the resetStatistics operation. Only the most recent Coherence versions support all the commands below and you be shown a message if the operation is no supported for your specific Coherence version. cohctl reset cache-stats - resets cache statistics for all cache members or specific cache members cohctl reset executor-stats - resets statistics for an executor cohctl reset federation-stats - resets federation statistics for all federation or specific federation members cohctl reset flashjournal-stats - resets statistics for all flash journals cohctl reset ramjournal-stats - resets statistics for all ram journals cohctl reset ramjournal-stats - resets statistics for all ram journals cohctl reset member-stats - resets statistics for all or a specific member cohctl reset reporter-stats - resets reporter statistics for all or a specific reporter cohctl reset service-stats - resets services statistics for all service members or specific service members cohctl reset proxy-stats - resets proxy connection manager statistics for all proxy members or specific proxy members Reset Cache Statistics The 'reset cache-stats' command resets cache statistics for all cache members or a comma separated list of member IDs. Usage cohctl reset cache-stats cache-name [flags] Flags -h, --help help for cache-stats -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -y, --yes automatically confirm the operation Examples Reset statistics for all cache members for cache test . <markup lang=\"bash\" >cohctl get caches -c local Output: <markup lang=\"bash\" >Total Caches: 1, Total primary storage: 30 MB SERVICE CACHE COUNT SIZE PartitionedCache test 123,000 30 MB <markup lang=\"bash\" >cohctl reset cache-stats test -s PartitionedCache Using cluster connection 'local' from current context. Are you sure you want to reset cache statistics for cache test, service PartitionedCache for all 3 nodes? (y/n) y operation completed Reset statistics for cache members 1 and 2 for cache test . <markup lang=\"bash\" >cohctl reset cache-stats test -s PartitionedCache -n 1,2 -c local Output: <markup lang=\"bash\" >Are you sure you want to reset cache statistics for cache test, service PartitionedCache for 2 node(s)? (y/n) y operation completed Reset Executor Statistics The 'reset executor-stats' command resets executor statistics for a specific executor. Usage cohctl reset executor-stats executor-name [flags] Flags -h, --help help for executor-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl get executors -c local Output: <markup lang=\"bash\" >Total executors: 1 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION coherence-concurrent-default-executor 3 0 0 0 SingleThreaded(ThreadFactory=default) Reset the stats. <markup lang=\"bash\" >cohctl reset executor-stats coherence-concurrent-default-executor Using cluster connection 'local' from current context. Are you sure you want to reset executor statistics for exeutor coherence-concurrent-default-executor? (y/n) y operation completed Reset Federation Statistics The 'reset federation-stats' command resets federation statistics for all members or a comma separated list of member IDs. Usage cohctl reset federation-stats service-name [flags] Flags -h, --help help for federation-stats -n, --node string comma separated node ids to target (default \"all\") -p, --participant string participant to apply to (default \"all\") -T, --type string type to describe outgoing or incoming (default \"outgoing\") -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl get federation all -c local Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedService cluster2 1 [IDLE] 3 MB 13,873 30,000 0.0Mbps <markup lang=\"bash\" >cohctl reset federation-stats FederatedService -p cluster2 -T outgoing -c local Output: <markup lang=\"bash\" >Are you sure you want to reset federation statistics for service FederatedService, participant cluster2, type outgoing for all 1 nodes? (y/n) y operation completed The above federation command is only available in 14.1.1.2206.x and above. Reset RAM Journal Statistics The 'reset ramjournal-stats' command resets ram journal statistics. Usage cohctl reset ramjournal-stats [flags] Flags -h, --help help for ramjournal-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl reset ramjournal-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset ramjournal statistics for all 2 nodes? (y/n) y operation completed Reset Flash Journal Statistics The 'reset flashjournal-stats' command resets flash journal statistics. Usage cohctl reset flashjournal-stats [flags] Flags -h, --help help for flashjournal-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl reset flashjournal-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset flashjournal statistics for all 2 nodes? (y/n) y operation completed Reset Member Statistics The 'reset member-stats' command resets member statistics for all or a comma separated list of member IDs. Usage cohctl reset member-stats [flags] Flags -h, --help help for member-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation Examples Reset member statistics for member 1 and 3. <markup lang=\"bash\" >cohctl get members -c local Output: <markup lang=\"bash\" >Total cluster members: 3 Cluster Heap - Total: 384 MB Used: 127 MB Available: 257 MB (66.9%) Storage Heap - Total: 384 MB Used: 127 MB Available: 257 MB (66.9%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 /127.0.0.1 58938 96295 storage-0 CoherenceServer true 128 MB 65 MB 63 MB 2 /127.0.0.1 58944 96303 storage-2 CoherenceServer true 128 MB 41 MB 87 MB 3 /127.0.0.1 58941 96296 storage-1 CoherenceServer true 128 MB 21 MB 107 MB <markup lang=\"bash\" >cohctl reset member-stats -n 1,3 -c local Output: <markup lang=\"bash\" >Are you sure you want to reset members statistics for 2 node(s)? (y/n) y operation completed Reset Reporter Statistics The 'reset reporter-stats' command resets reporter statistics for all or a comma separated list of member IDs. Usage cohctl reset reporter-stats [flags] Flags -h, --help help for reporter-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false 3 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false <markup lang=\"bash\" >cohctl reset reporter-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset reporters statistics for all 3 nodes? (y/n) y operation completed Reset Service Statistics The 'reset service-stats' command resets service statistics for all service or a comma separated list of member IDs. Usage cohctl reset service-stats service-name [flags] Flags -h, --help help for service-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 3 n/a -1 -1 PartitionedTopic PagedTopic 3 NODE-SAFE 3 257 PartitionedCache DistributedCache 3 NODE-SAFE 3 257 ManagementHttpProxy Proxy 1 n/a -1 -1 \"$SYS:HealthHttpProxy\" Proxy 3 n/a -1 -1 \"$SYS:Config\" DistributedCache 3 NODE-SAFE 3 257 \"$SYS:ConcurrentProxy\" Proxy 3 n/a -1 -1 \"$SYS:Concurrent\" DistributedCache 3 NODE-SAFE 3 257 <markup lang=\"bash\" >cohctl reset service-stats PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to reset service statistics for all 3 nodes? (y/n) y operation completed Reset Proxy Connection Manager Statistics The 'reset proxy-stats' command resets connection manager statistics for all proxy services or a comma separated list of member IDs. Usage cohctl reset proxy-stats service-name [flags] Flags -h, --help help for proxy-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get proxies -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME CONNECTIONS DATA SENT DATA REC 1 0.0.0.0:64073.58994 \"$SYS:SystemProxy\" 0 0 MB 0 MB 1 0.0.0.0:64073.41509 Proxy 0 0 MB 0 MB <markup lang=\"bash\" >cohctl reset proxy-stats Proxy -c local Are you sure you want to reset connectionManager statics statistics for service Proxy for all 1 nodes? (y/n) y operation completed ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/92_reset",
            "text": " Overview This section contains commands for resetting MBean statistics which can be useful when you are running performance tests. For most commands you can reset for all members or specify a comma-separated list of members using the -m option. See MBean Reference for details on what MBeans support the resetStatistics operation. Only the most recent Coherence versions support all the commands below and you be shown a message if the operation is no supported for your specific Coherence version. cohctl reset cache-stats - resets cache statistics for all cache members or specific cache members cohctl reset executor-stats - resets statistics for an executor cohctl reset federation-stats - resets federation statistics for all federation or specific federation members cohctl reset flashjournal-stats - resets statistics for all flash journals cohctl reset ramjournal-stats - resets statistics for all ram journals cohctl reset ramjournal-stats - resets statistics for all ram journals cohctl reset member-stats - resets statistics for all or a specific member cohctl reset reporter-stats - resets reporter statistics for all or a specific reporter cohctl reset service-stats - resets services statistics for all service members or specific service members cohctl reset proxy-stats - resets proxy connection manager statistics for all proxy members or specific proxy members Reset Cache Statistics The 'reset cache-stats' command resets cache statistics for all cache members or a comma separated list of member IDs. Usage cohctl reset cache-stats cache-name [flags] Flags -h, --help help for cache-stats -n, --node string comma separated node ids to target (default \"all\") -s, --service string Service name -y, --yes automatically confirm the operation Examples Reset statistics for all cache members for cache test . <markup lang=\"bash\" >cohctl get caches -c local Output: <markup lang=\"bash\" >Total Caches: 1, Total primary storage: 30 MB SERVICE CACHE COUNT SIZE PartitionedCache test 123,000 30 MB <markup lang=\"bash\" >cohctl reset cache-stats test -s PartitionedCache Using cluster connection 'local' from current context. Are you sure you want to reset cache statistics for cache test, service PartitionedCache for all 3 nodes? (y/n) y operation completed Reset statistics for cache members 1 and 2 for cache test . <markup lang=\"bash\" >cohctl reset cache-stats test -s PartitionedCache -n 1,2 -c local Output: <markup lang=\"bash\" >Are you sure you want to reset cache statistics for cache test, service PartitionedCache for 2 node(s)? (y/n) y operation completed Reset Executor Statistics The 'reset executor-stats' command resets executor statistics for a specific executor. Usage cohctl reset executor-stats executor-name [flags] Flags -h, --help help for executor-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl get executors -c local Output: <markup lang=\"bash\" >Total executors: 1 Running tasks: 0 Completed tasks: 0 NAME MEMBER COUNT IN PROGRESS COMPLETED REJECTED DESCRIPTION coherence-concurrent-default-executor 3 0 0 0 SingleThreaded(ThreadFactory=default) Reset the stats. <markup lang=\"bash\" >cohctl reset executor-stats coherence-concurrent-default-executor Using cluster connection 'local' from current context. Are you sure you want to reset executor statistics for exeutor coherence-concurrent-default-executor? (y/n) y operation completed Reset Federation Statistics The 'reset federation-stats' command resets federation statistics for all members or a comma separated list of member IDs. Usage cohctl reset federation-stats service-name [flags] Flags -h, --help help for federation-stats -n, --node string comma separated node ids to target (default \"all\") -p, --participant string participant to apply to (default \"all\") -T, --type string type to describe outgoing or incoming (default \"outgoing\") -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl get federation all -c local Output: <markup lang=\"bash\" >SERVICE DESTINATION MEMBERS STATES DATA SENT MSG SENT REC SENT CURR AVG BWIDTH FederatedService cluster2 1 [IDLE] 3 MB 13,873 30,000 0.0Mbps <markup lang=\"bash\" >cohctl reset federation-stats FederatedService -p cluster2 -T outgoing -c local Output: <markup lang=\"bash\" >Are you sure you want to reset federation statistics for service FederatedService, participant cluster2, type outgoing for all 1 nodes? (y/n) y operation completed The above federation command is only available in 14.1.1.2206.x and above. Reset RAM Journal Statistics The 'reset ramjournal-stats' command resets ram journal statistics. Usage cohctl reset ramjournal-stats [flags] Flags -h, --help help for ramjournal-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl reset ramjournal-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset ramjournal statistics for all 2 nodes? (y/n) y operation completed Reset Flash Journal Statistics The 'reset flashjournal-stats' command resets flash journal statistics. Usage cohctl reset flashjournal-stats [flags] Flags -h, --help help for flashjournal-stats -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl reset flashjournal-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset flashjournal statistics for all 2 nodes? (y/n) y operation completed Reset Member Statistics The 'reset member-stats' command resets member statistics for all or a comma separated list of member IDs. Usage cohctl reset member-stats [flags] Flags -h, --help help for member-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation Examples Reset member statistics for member 1 and 3. <markup lang=\"bash\" >cohctl get members -c local Output: <markup lang=\"bash\" >Total cluster members: 3 Cluster Heap - Total: 384 MB Used: 127 MB Available: 257 MB (66.9%) Storage Heap - Total: 384 MB Used: 127 MB Available: 257 MB (66.9%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 /127.0.0.1 58938 96295 storage-0 CoherenceServer true 128 MB 65 MB 63 MB 2 /127.0.0.1 58944 96303 storage-2 CoherenceServer true 128 MB 41 MB 87 MB 3 /127.0.0.1 58941 96296 storage-1 CoherenceServer true 128 MB 21 MB 107 MB <markup lang=\"bash\" >cohctl reset member-stats -n 1,3 -c local Output: <markup lang=\"bash\" >Are you sure you want to reset members statistics for 2 node(s)? (y/n) y operation completed Reset Reporter Statistics The 'reset reporter-stats' command resets reporter statistics for all or a comma separated list of member IDs. Usage cohctl reset reporter-stats [flags] Flags -h, --help help for reporter-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get reporters -c local Output: <markup lang=\"bash\" >NODE ID STATE CONFIG FILE OUTPUT PATH BATCH# LAST REPORT LAST RUN AVG RUN INTERVAL AUTOSTART 1 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false 2 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false 3 Stopped reports/report-group.xml /Users/user/Documents/Coheren... 0 0ms 0.0000ms 60 false <markup lang=\"bash\" >cohctl reset reporter-stats -c local Output: <markup lang=\"bash\" >Are you sure you want to reset reporters statistics for all 3 nodes? (y/n) y operation completed Reset Service Statistics The 'reset service-stats' command resets service statistics for all service or a comma separated list of member IDs. Usage cohctl reset service-stats service-name [flags] Flags -h, --help help for service-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 3 n/a -1 -1 PartitionedTopic PagedTopic 3 NODE-SAFE 3 257 PartitionedCache DistributedCache 3 NODE-SAFE 3 257 ManagementHttpProxy Proxy 1 n/a -1 -1 \"$SYS:HealthHttpProxy\" Proxy 3 n/a -1 -1 \"$SYS:Config\" DistributedCache 3 NODE-SAFE 3 257 \"$SYS:ConcurrentProxy\" Proxy 3 n/a -1 -1 \"$SYS:Concurrent\" DistributedCache 3 NODE-SAFE 3 257 <markup lang=\"bash\" >cohctl reset service-stats PartitionedCache -c local Output: <markup lang=\"bash\" >Are you sure you want to reset service statistics for all 3 nodes? (y/n) y operation completed Reset Proxy Connection Manager Statistics The 'reset proxy-stats' command resets connection manager statistics for all proxy services or a comma separated list of member IDs. Usage cohctl reset proxy-stats service-name [flags] Flags -h, --help help for proxy-stats -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl get proxies -c local Output: <markup lang=\"bash\" >NODE ID HOST IP SERVICE NAME CONNECTIONS DATA SENT DATA REC 1 0.0.0.0:64073.58994 \"$SYS:SystemProxy\" 0 0 MB 0 MB 1 0.0.0.0:64073.41509 Proxy 0 0 MB 0 MB <markup lang=\"bash\" >cohctl reset proxy-stats Proxy -c local Are you sure you want to reset connectionManager statics statistics for service Proxy for all 1 nodes? (y/n) y operation completed ",
            "title": "Resetting Statistics"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " The purpose of this page is to list troubleshooting guides and work-arounds for issues that you may run into when using the Coherence CLI. This page will be updated and maintained over time to include common issues we see from customers. ",
            "title": "Troubleshooting Guide"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You receive a message similar to the following when trying to run the CLI on macOS: <markup lang=\"command\" >/usr/local/bin/cohctl: Bad CPU type in executable ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " This is most likely caused by installing the incorrect macOS .pkg for your architecture. E.g. you may have an AMD Mac and trying to install the Apple Silicon version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct pkg for your architecture. You can run the uname -a command from a terminal and the output will indicate which type of architecture you have. The last value on the line it will be either x86_64 for AMD or arm64 for M1. AMD Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_X86_64 x86_64 Apple Silicon (M1) Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_ARM64_T8101 arm64 Output above has been truncated for brevity. ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You receive a message similar to the following when trying to run the CLI on macOS: <markup lang=\"command\" >/usr/local/bin/cohctl: Bad CPU type in executable Solution This is most likely caused by installing the incorrect macOS .pkg for your architecture. E.g. you may have an AMD Mac and trying to install the Apple Silicon version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct pkg for your architecture. You can run the uname -a command from a terminal and the output will indicate which type of architecture you have. The last value on the line it will be either x86_64 for AMD or arm64 for M1. AMD Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_X86_64 x86_64 Apple Silicon (M1) Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_ARM64_T8101 arm64 Output above has been truncated for brevity. ",
            "title": "Bad CPU type in executable on macOS"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You receive a message similar to the following when trying to run the CLI on Linux: <markup lang=\"command\" >cohctl: cannot execute [Exec format error] ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " This is most likely caused by installing the incorrect linux executable for your architecture. E.g. you may have an AMD Linux machine and trying to use the ARM version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct binary for your architecture. ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You receive a message similar to the following when trying to run the CLI on Linux: <markup lang=\"command\" >cohctl: cannot execute [Exec format error] Solution This is most likely caused by installing the incorrect linux executable for your architecture. E.g. you may have an AMD Linux machine and trying to use the ARM version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct binary for your architecture. ",
            "title": "Cannot execute [Exec format error] on Linux"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You see something similar to the following when running Java Flight Recorder (JFR) commands, where there is a null instead of the member number. <markup lang=\"bash\" >cohctl get jfrs -c local Output: <markup lang=\"bash\" >null-&gt; No available recordings. Use JFR.start to start a recording. null-&gt; No available recordings. Use JFR.start to start a recording. ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Then this is a known issue. To resolve you should apply the most recent available Coherence patch on version you are using to resolve this. ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You see something similar to the following when running Java Flight Recorder (JFR) commands, where there is a null instead of the member number. <markup lang=\"bash\" >cohctl get jfrs -c local Output: <markup lang=\"bash\" >null-&gt; No available recordings. Use JFR.start to start a recording. null-&gt; No available recordings. Use JFR.start to start a recording. Solution Then this is a known issue. To resolve you should apply the most recent available Coherence patch on version you are using to resolve this. ",
            "title": "Null returned in JFR commands"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You are unable to describe or query services with quotes in their names. Some Coherence services may have quotes in their names, especially if they contain a scope which is delimited by a colon, as in WebLogic Server. In these cases when you want to specify a service name you must enclose the whole service name in single quotes. For example, take a look at the services for this WebLogic Server instance: <markup lang=\"bash\" >cohctl get services -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ******** SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"ExampleGAR:PartitionedPofCache\" DistributedCache 4 NODE-SAFE 2 257 If we issue the following command you will see the error below. <markup lang=\"bash\" >cohctl describe service \"ExampleGAR:PartitionedPofCache\" -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ******* Error: unable to find service with service name 'ExampleGAR:PartitionedPofCache' ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You must surround any service names that have double quotes with single quotes. <markup lang=\"bash\" >cohctl describe service '\"ExampleGAR:PartitionedPofCache\"' -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ****** SERVICE DETAILS --------------- Name : \"ExampleGAR:PartitionedPofCache\" Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] .... ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem You are unable to describe or query services with quotes in their names. Some Coherence services may have quotes in their names, especially if they contain a scope which is delimited by a colon, as in WebLogic Server. In these cases when you want to specify a service name you must enclose the whole service name in single quotes. For example, take a look at the services for this WebLogic Server instance: <markup lang=\"bash\" >cohctl get services -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ******** SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"ExampleGAR:PartitionedPofCache\" DistributedCache 4 NODE-SAFE 2 257 If we issue the following command you will see the error below. <markup lang=\"bash\" >cohctl describe service \"ExampleGAR:PartitionedPofCache\" -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ******* Error: unable to find service with service name 'ExampleGAR:PartitionedPofCache' Solution You must surround any service names that have double quotes with single quotes. <markup lang=\"bash\" >cohctl describe service '\"ExampleGAR:PartitionedPofCache\"' -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ****** SERVICE DETAILS --------------- Name : \"ExampleGAR:PartitionedPofCache\" Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] .... ",
            "title": "Cannot find services with quotes in their names"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " When adding a connection to a WebLogic Server environment with multiple Coherence clusters, present, by default only the first cluster will be added. In the example below we have a WebLogic Server environment with two Coherence clusters: CoherenceCluster and CoherenceCluster2. <markup lang=\"bash\" >cohctl add cluster wls1 -U weblogic -u http://host:7001/management/coherence/latest/clusters Output: <markup lang=\"bash\" >Enter password: ***** Added cluster wls1 with type http and URL http://thost:7001/management/coherence/latest/clusters Display the clusters. <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://host:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You must supply the cluster name on the URL to add a specific cluster, rather than adding the default one found. <markup lang=\"bash\" >cohctl add cluster wls2 -U weblogic -u http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Output: <markup lang=\"bash\" >Enter password: ****** Added cluster wls2 with type http and URL http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Display the clusters. <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://hostname:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic wls2 http http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 14.1.1.0.0 CoherenceCluster2 WebLogic ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem When adding a connection to a WebLogic Server environment with multiple Coherence clusters, present, by default only the first cluster will be added. In the example below we have a WebLogic Server environment with two Coherence clusters: CoherenceCluster and CoherenceCluster2. <markup lang=\"bash\" >cohctl add cluster wls1 -U weblogic -u http://host:7001/management/coherence/latest/clusters Output: <markup lang=\"bash\" >Enter password: ***** Added cluster wls1 with type http and URL http://thost:7001/management/coherence/latest/clusters Display the clusters. <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://host:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic Solution You must supply the cluster name on the URL to add a specific cluster, rather than adding the default one found. <markup lang=\"bash\" >cohctl add cluster wls2 -U weblogic -u http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Output: <markup lang=\"bash\" >Enter password: ****** Added cluster wls2 with type http and URL http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Display the clusters. <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://hostname:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic wls2 http http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 14.1.1.0.0 CoherenceCluster2 WebLogic ",
            "title": "Issues adding correct cluster when WebLogic Server has multiple Coherence clusters"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " When trying to set the reporter output path when your server is running on Windows, you receive an error response=500 Internal Server Error . For example: <markup lang=\"bash\" >cohctl -y set reporter 1 -a outputPath -v D:\\Temp\\my_path Output: <markup lang=\"bash\" >cannot set value D:\\Temp\\my_path for attribute outputPath : response=500 Internal Server Error, url=http://host:port/management/coherence/cluster/reporters/1 On inspecting the server log you may see a message similar to Unrecognized character escape . ",
            "title": "Problem"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " You must escape any backslash ( \\ ) in the path with an additional backslash: <markup lang=\"bash\" >cohctl -y set reporter 1 -a outputPath -v D:\\\\Temp\\\\my_path Output: <markup lang=\"bash\" >operation completed ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Problem When trying to set the reporter output path when your server is running on Windows, you receive an error response=500 Internal Server Error . For example: <markup lang=\"bash\" >cohctl -y set reporter 1 -a outputPath -v D:\\Temp\\my_path Output: <markup lang=\"bash\" >cannot set value D:\\Temp\\my_path for attribute outputPath : response=500 Internal Server Error, url=http://host:port/management/coherence/cluster/reporters/1 On inspecting the server log you may see a message similar to Unrecognized character escape . Solution You must escape any backslash ( \\ ) in the path with an additional backslash: <markup lang=\"bash\" >cohctl -y set reporter 1 -a outputPath -v D:\\\\Temp\\\\my_path Output: <markup lang=\"bash\" >operation completed ",
            "title": "Issues setting reporter path on Windows"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " The logfiles for a created cluster are in the following location $HOME/.cohctl/logs/&lt;cluster&gt; and you should check these if you cluster is not starting up. <markup lang=\"bash\" >cat ~/.cohctl/logs/local/storage-0.log If you see the following message, this indicates that you are not using a compatible JDK for the Coherence version. <markup lang=\"bash\" >Error: LinkageError occurred while loading main class com.tangosol.net.Coherence java.lang.UnsupportedClassVersionError: com/tangosol/net/Coherence has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0 ",
            "title": "Check the logfile for the cluster"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Check the logfile for the cluster The logfiles for a created cluster are in the following location $HOME/.cohctl/logs/&lt;cluster&gt; and you should check these if you cluster is not starting up. <markup lang=\"bash\" >cat ~/.cohctl/logs/local/storage-0.log If you see the following message, this indicates that you are not using a compatible JDK for the Coherence version. <markup lang=\"bash\" >Error: LinkageError occurred while loading main class com.tangosol.net.Coherence java.lang.UnsupportedClassVersionError: com/tangosol/net/Coherence has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0 ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " If you have used the cohctl create cluster or cohctl start cluster and you cannot show the cluster information using a command such as cohctl get members , then you can do the following to check if there are any issues. The main reasons for clusters not starting up are that you have not used the correct JDK version. For example for 22.09 and above clusters you must have JDK 17+. Solution Check the logfile for the cluster The logfiles for a created cluster are in the following location $HOME/.cohctl/logs/&lt;cluster&gt; and you should check these if you cluster is not starting up. <markup lang=\"bash\" >cat ~/.cohctl/logs/local/storage-0.log If you see the following message, this indicates that you are not using a compatible JDK for the Coherence version. <markup lang=\"bash\" >Error: LinkageError occurred while loading main class com.tangosol.net.Coherence java.lang.UnsupportedClassVersionError: com/tangosol/net/Coherence has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0 ",
            "title": "Issues creating or starting clusters"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " For any services that have $ such as \"$SYS:Config\" you need to copy/paste the service name to describe and enclose the name in single quote. For example: <markup lang=\"bash\" >cohctl describe service '\"$SYS:Config\"' ",
            "title": "Solution"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " If you use command completion, and you try to describe services, caches or topics with $ in the name then the command completion may not work correctly. For example, using cohctl get services you see: <markup lang=\"bash\" >cohctl get services Output: <markup lang=\"bash\" >Using cluster connection 'main' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"$SYS:Config\" DistributedCache 3 NODE-SAFE 3 257 \"$SYS:HealthHttpProxy\" Proxy 3 n/a -1 -1 \"$SYS:SystemProxy\" Proxy 3 n/a -1 -1 ManagementHttpProxy Proxy 1 n/a -1 -1 PartitionedCache DistributedCache 3 NODE-SAFE 3 257 PartitionedTopic PagedTopic 3 NODE-SAFE 3 257 Proxy Proxy 3 n/a -1 -1 If you try to use cohctl describe service then press TAB twice, you will see: <markup lang=\"bash\" >cohctl describe service Output: <markup lang=\"bash\" >\"$SYS:Config\" \"$SYS:HealthHttpProxy\" \"$SYS:SystemProxy\" ManagementHttpProxy PartitionedCache PartitionedTopic Proxy You cannot complete any services using command completion with $ in their name using TAB twice. Solution For any services that have $ such as \"$SYS:Config\" you need to copy/paste the service name to describe and enclose the name in single quote. For example: <markup lang=\"bash\" >cohctl describe service '\"$SYS:Config\"' ",
            "title": "Issues using command completion with services, caches or topics with $ in the name"
        },
        {
            "location": "/docs/troubleshooting/01_trouble-shooting",
            "text": " Bad CPU type in executable on macOS Cannot execute [Exec format error] on Linux Null returned in JFR commands Cannot find services with quotes in their names Issues adding correct cluster when WebLogic Server has multiple Coherence clusters Issues setting reporter path on Windows Issues creating or starting clusters using cohctl create cluster Issues using command completion with services, caches or topics with $ in the name Bad CPU type in executable on macOS Problem You receive a message similar to the following when trying to run the CLI on macOS: <markup lang=\"command\" >/usr/local/bin/cohctl: Bad CPU type in executable Solution This is most likely caused by installing the incorrect macOS .pkg for your architecture. E.g. you may have an AMD Mac and trying to install the Apple Silicon version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct pkg for your architecture. You can run the uname -a command from a terminal and the output will indicate which type of architecture you have. The last value on the line it will be either x86_64 for AMD or arm64 for M1. AMD Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_X86_64 x86_64 Apple Silicon (M1) Processor <markup lang=\"command\" >$ uname -a Darwin ... RELEASE_ARM64_T8101 arm64 Output above has been truncated for brevity. Cannot execute [Exec format error] on Linux Problem You receive a message similar to the following when trying to run the CLI on Linux: <markup lang=\"command\" >cohctl: cannot execute [Exec format error] Solution This is most likely caused by installing the incorrect linux executable for your architecture. E.g. you may have an AMD Linux machine and trying to use the ARM version or visa-versa. Refer to the Coherence CLI Installation section to uninstall cohctl and download the correct binary for your architecture. Null returned in JFR commands Problem You see something similar to the following when running Java Flight Recorder (JFR) commands, where there is a null instead of the member number. <markup lang=\"bash\" >cohctl get jfrs -c local Output: <markup lang=\"bash\" >null-&gt; No available recordings. Use JFR.start to start a recording. null-&gt; No available recordings. Use JFR.start to start a recording. Solution Then this is a known issue. To resolve you should apply the most recent available Coherence patch on version you are using to resolve this. Cannot find services with quotes in their names Problem You are unable to describe or query services with quotes in their names. Some Coherence services may have quotes in their names, especially if they contain a scope which is delimited by a colon, as in WebLogic Server. In these cases when you want to specify a service name you must enclose the whole service name in single quotes. For example, take a look at the services for this WebLogic Server instance: <markup lang=\"bash\" >cohctl get services -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ******** SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"ExampleGAR:PartitionedPofCache\" DistributedCache 4 NODE-SAFE 2 257 If we issue the following command you will see the error below. <markup lang=\"bash\" >cohctl describe service \"ExampleGAR:PartitionedPofCache\" -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ******* Error: unable to find service with service name 'ExampleGAR:PartitionedPofCache' Solution You must surround any service names that have double quotes with single quotes. <markup lang=\"bash\" >cohctl describe service '\"ExampleGAR:PartitionedPofCache\"' -c wls -U weblogic Output: <markup lang=\"bash\" >Enter password: ****** SERVICE DETAILS --------------- Name : \"ExampleGAR:PartitionedPofCache\" Type : [DistributedCache] Backup Count : [1] Backup Count After Writebehind : [1] .... Issues adding correct cluster when WebLogic Server has multiple Coherence clusters Problem When adding a connection to a WebLogic Server environment with multiple Coherence clusters, present, by default only the first cluster will be added. In the example below we have a WebLogic Server environment with two Coherence clusters: CoherenceCluster and CoherenceCluster2. <markup lang=\"bash\" >cohctl add cluster wls1 -U weblogic -u http://host:7001/management/coherence/latest/clusters Output: <markup lang=\"bash\" >Enter password: ***** Added cluster wls1 with type http and URL http://thost:7001/management/coherence/latest/clusters Display the clusters. <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://host:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic Solution You must supply the cluster name on the URL to add a specific cluster, rather than adding the default one found. <markup lang=\"bash\" >cohctl add cluster wls2 -U weblogic -u http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Output: <markup lang=\"bash\" >Enter password: ****** Added cluster wls2 with type http and URL http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 Display the clusters. <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX wls1 http http://hostname:7001/management/coherence/latest/clusters 14.1.1.0.0 CoherenceCluster WebLogic wls2 http http://hostname:7001/management/coherence/latest/clusters/CoherenceCluster2 14.1.1.0.0 CoherenceCluster2 WebLogic Issues setting reporter path on Windows Problem When trying to set the reporter output path when your server is running on Windows, you receive an error response=500 Internal Server Error . For example: <markup lang=\"bash\" >cohctl -y set reporter 1 -a outputPath -v D:\\Temp\\my_path Output: <markup lang=\"bash\" >cannot set value D:\\Temp\\my_path for attribute outputPath : response=500 Internal Server Error, url=http://host:port/management/coherence/cluster/reporters/1 On inspecting the server log you may see a message similar to Unrecognized character escape . Solution You must escape any backslash ( \\ ) in the path with an additional backslash: <markup lang=\"bash\" >cohctl -y set reporter 1 -a outputPath -v D:\\\\Temp\\\\my_path Output: <markup lang=\"bash\" >operation completed Issues creating or starting clusters If you have used the cohctl create cluster or cohctl start cluster and you cannot show the cluster information using a command such as cohctl get members , then you can do the following to check if there are any issues. The main reasons for clusters not starting up are that you have not used the correct JDK version. For example for 22.09 and above clusters you must have JDK 17+. Solution Check the logfile for the cluster The logfiles for a created cluster are in the following location $HOME/.cohctl/logs/&lt;cluster&gt; and you should check these if you cluster is not starting up. <markup lang=\"bash\" >cat ~/.cohctl/logs/local/storage-0.log If you see the following message, this indicates that you are not using a compatible JDK for the Coherence version. <markup lang=\"bash\" >Error: LinkageError occurred while loading main class com.tangosol.net.Coherence java.lang.UnsupportedClassVersionError: com/tangosol/net/Coherence has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0 Issues using command completion with services, caches or topics with $ in the name If you use command completion, and you try to describe services, caches or topics with $ in the name then the command completion may not work correctly. For example, using cohctl get services you see: <markup lang=\"bash\" >cohctl get services Output: <markup lang=\"bash\" >Using cluster connection 'main' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS \"$SYS:Config\" DistributedCache 3 NODE-SAFE 3 257 \"$SYS:HealthHttpProxy\" Proxy 3 n/a -1 -1 \"$SYS:SystemProxy\" Proxy 3 n/a -1 -1 ManagementHttpProxy Proxy 1 n/a -1 -1 PartitionedCache DistributedCache 3 NODE-SAFE 3 257 PartitionedTopic PagedTopic 3 NODE-SAFE 3 257 Proxy Proxy 3 n/a -1 -1 If you try to use cohctl describe service then press TAB twice, you will see: <markup lang=\"bash\" >cohctl describe service Output: <markup lang=\"bash\" >\"$SYS:Config\" \"$SYS:HealthHttpProxy\" \"$SYS:SystemProxy\" ManagementHttpProxy PartitionedCache PartitionedTopic Proxy You cannot complete any services using command completion with $ in their name using TAB twice. Solution For any services that have $ such as \"$SYS:Config\" you need to copy/paste the service name to describe and enclose the name in single quote. For example: <markup lang=\"bash\" >cohctl describe service '\"$SYS:Config\"' ",
            "title": "Contents"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'add cluster' command adds a new connection to a Coherence cluster. You can specify the full url such as https://&lt;host&gt;:&lt;management-port&gt;/management/coherence/cluster . You can also specify host:port (for http connections) and the url will be automatically populated constructed. Usage cohctl add cluster connection-name [flags] Flags -h, --help help for cluster -t, --type string connection type, http (default \"http\") -u, --url string connection URL Examples <markup lang=\"bash\" >cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Notes Cluster connections are in one of two formats: Standalone Coherence - http://host:management-port/management/coherence/cluster WebLogic Server - http://&lt;admin-host&gt;:&lt;admin-port&gt;/management/coherence/latest/clusters If you are connecting to WebLogic Server or a Management over REST endpoint that has authentication, you can specify the user using the -U option. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) You can also specify just a host:port and cohctl will construct a http connection using those in the correct format. <markup lang=\"bash\" >cohctl add cluster local -u localhost:30000 Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster If you wish to add a https connection, you must enter the entire URL. You can set the HTTP_PROXY environment variable to use a Proxy Server to connect to your cluster endpoint. ",
            "title": "Add Cluster"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'discover clusters' command discovers Coherence clusters using the Name Service. You can specify a list of either host:port pairs or if you specify a host name the default cluster port of 7574 will be used. You will be presented with a list of clusters that have Management over REST configured and you can confirm if you wish to add the discovered clusters. Usage cohctl discover clusters [host[:port]...] [flags] Flags -h, --help help for clusters -I, --ignore ignore errors from NS lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl discover clusters Output: <markup lang=\"bash\" >Attempting to discover clusters using the following NameService addresses: [localhost] Discovering Management URL for my-cluster on localhost:7574 ... Discovering Management URL for test-cluster on localhost:63868 ... Clusters found: 2 Without Http Mgmt: 1 With Http Mgmt: 1 The following clusters do not have Management over REST enabled and cannot be added Cluster: test-cluster, Name Service address: localhost:63868 CONNECTION CLUSTER NAME HOST NS PORT URL my-cluster my-cluster localhost 7574 http://127.0.0.1:30000/management/coherence/cluster Are you sure you want to add the above 1 cluster(s)? (y/n) y Added cluster my-cluster with type http and URL http://127.0.0.1:30000/management/coherence/cluster Display the clusters <markup lang=\"bash\" >cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX CREATED my-cluster http http://127.0.0.1:30000/management/coherence/cluster 14.1.1.0.13 my-cluster Standalone N The cluster connection is automatically generated from the cluster name. If it already exists you will be asked for specify a name. If there are two or more Management URL&#8217;s, you will be asked to select one. ",
            "title": "Discover Clusters"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'remove cluster' command removes a cluster connection. Usage cohctl remove cluster connection-name [flags] Flags -h, --help help for cluster -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl remove cluster local Output: <markup lang=\"bash\" >Are you sure you want to remove the connection to cluster local? (y/n) y Removed connection for cluster local This command only removes the connection to the cluster that cohctl stores. It does not affect the running Coherence cluster in any way. ",
            "title": "Remove Cluster"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'get clusters' command displays the list of cluster connections. The 'LOCAL' column is set to 'true' if the cluster has been created using the 'cohctl create cluster' command. You can also use the '-o wide' option to see if the cluster is running. Usage cohctl get clusters [flags] Flags -h, --help help for clusters Examples <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone false Notes: An asterix will show in the CTX column if the cluster has been set using the cohctl set context command. The LOCAL column indicates if the cluster was a local cluster manually created via the cohctl create cluster command. If you use the -o wide option, an additional column is displayed showing if the management endpoint is running. This doesn&#8217;t mean the cluster if fully up, but that at least the management is. With this option, each cluster connection is checked and may take a while if you have a large number of connections. See below <markup lang=\"bash\" >cohctl get clusters -o wide Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL RUNNING local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone false true ",
            "title": "Get Clusters"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'describe cluster' command shows cluster information related to a specific cluster connection, including: cluster overview, members, machines, services, caches, reporters, proxy servers and Http servers. You can specify '-o wide' to display addition information as well as '-v' to displayed additional information. Usage cohctl describe cluster cluster-name [flags] Flags -h, --help help for cluster -v, --verbose include verbose output including individual members, reporters and executor details Examples <markup lang=\"bash\" >cohctl describe cluster local ",
            "title": "Describe Cluster"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'get cluster-config' displays the cluster operational config for a cluster using the current context or a cluster specified by using '-c'. Only available in most recent Coherence versions Usage cohctl get cluster-config [flags] Flags -h, --help help for cluster-config Examples <markup lang=\"bash\" >cohctl get cluster-config ",
            "title": "Get Cluster Config"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " The 'get cluster-description' command displays information regarding a cluster and it&#8217;s members. Only available in most recent Coherence versions. Usage cohctl get cluster-description [flags] Flags -h, --help help for cluster-description Examples <markup lang=\"bash\" >cohctl get cluster-description -c local ",
            "title": "Get Cluster Description"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " There are various cluster commands that allow you to work with and manage cluster connections. cohctl add cluster - adds a cluster connection cohctl discover clusters - discovers clusters using the Name Service cohctl remove cluster - removes a cluster connection cohctl get clusters - returns the list of cluster connections cohctl describe cluster - describes a cluster referred to by a cluster connection cohctl get cluster-config - displays the cluster operational config cohctl get cluster-description - displays the cluster description including members Add Cluster The 'add cluster' command adds a new connection to a Coherence cluster. You can specify the full url such as https://&lt;host&gt;:&lt;management-port&gt;/management/coherence/cluster . You can also specify host:port (for http connections) and the url will be automatically populated constructed. Usage cohctl add cluster connection-name [flags] Flags -h, --help help for cluster -t, --type string connection type, http (default \"http\") -u, --url string connection URL Examples <markup lang=\"bash\" >cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Notes Cluster connections are in one of two formats: Standalone Coherence - http://host:management-port/management/coherence/cluster WebLogic Server - http://&lt;admin-host&gt;:&lt;admin-port&gt;/management/coherence/latest/clusters If you are connecting to WebLogic Server or a Management over REST endpoint that has authentication, you can specify the user using the -U option. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) You can also specify just a host:port and cohctl will construct a http connection using those in the correct format. <markup lang=\"bash\" >cohctl add cluster local -u localhost:30000 Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster If you wish to add a https connection, you must enter the entire URL. You can set the HTTP_PROXY environment variable to use a Proxy Server to connect to your cluster endpoint. Discover Clusters The 'discover clusters' command discovers Coherence clusters using the Name Service. You can specify a list of either host:port pairs or if you specify a host name the default cluster port of 7574 will be used. You will be presented with a list of clusters that have Management over REST configured and you can confirm if you wish to add the discovered clusters. Usage cohctl discover clusters [host[:port]...] [flags] Flags -h, --help help for clusters -I, --ignore ignore errors from NS lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl discover clusters Output: <markup lang=\"bash\" >Attempting to discover clusters using the following NameService addresses: [localhost] Discovering Management URL for my-cluster on localhost:7574 ... Discovering Management URL for test-cluster on localhost:63868 ... Clusters found: 2 Without Http Mgmt: 1 With Http Mgmt: 1 The following clusters do not have Management over REST enabled and cannot be added Cluster: test-cluster, Name Service address: localhost:63868 CONNECTION CLUSTER NAME HOST NS PORT URL my-cluster my-cluster localhost 7574 http://127.0.0.1:30000/management/coherence/cluster Are you sure you want to add the above 1 cluster(s)? (y/n) y Added cluster my-cluster with type http and URL http://127.0.0.1:30000/management/coherence/cluster Display the clusters <markup lang=\"bash\" >cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX CREATED my-cluster http http://127.0.0.1:30000/management/coherence/cluster 14.1.1.0.13 my-cluster Standalone N The cluster connection is automatically generated from the cluster name. If it already exists you will be asked for specify a name. If there are two or more Management URL&#8217;s, you will be asked to select one. Remove Cluster The 'remove cluster' command removes a cluster connection. Usage cohctl remove cluster connection-name [flags] Flags -h, --help help for cluster -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl remove cluster local Output: <markup lang=\"bash\" >Are you sure you want to remove the connection to cluster local? (y/n) y Removed connection for cluster local This command only removes the connection to the cluster that cohctl stores. It does not affect the running Coherence cluster in any way. Get Clusters The 'get clusters' command displays the list of cluster connections. The 'LOCAL' column is set to 'true' if the cluster has been created using the 'cohctl create cluster' command. You can also use the '-o wide' option to see if the cluster is running. Usage cohctl get clusters [flags] Flags -h, --help help for clusters Examples <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone false Notes: An asterix will show in the CTX column if the cluster has been set using the cohctl set context command. The LOCAL column indicates if the cluster was a local cluster manually created via the cohctl create cluster command. If you use the -o wide option, an additional column is displayed showing if the management endpoint is running. This doesn&#8217;t mean the cluster if fully up, but that at least the management is. With this option, each cluster connection is checked and may take a while if you have a large number of connections. See below <markup lang=\"bash\" >cohctl get clusters -o wide Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL RUNNING local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone false true Describe Cluster The 'describe cluster' command shows cluster information related to a specific cluster connection, including: cluster overview, members, machines, services, caches, reporters, proxy servers and Http servers. You can specify '-o wide' to display addition information as well as '-v' to displayed additional information. Usage cohctl describe cluster cluster-name [flags] Flags -h, --help help for cluster -v, --verbose include verbose output including individual members, reporters and executor details Examples <markup lang=\"bash\" >cohctl describe cluster local Get Cluster Config The 'get cluster-config' displays the cluster operational config for a cluster using the current context or a cluster specified by using '-c'. Only available in most recent Coherence versions Usage cohctl get cluster-config [flags] Flags -h, --help help for cluster-config Examples <markup lang=\"bash\" >cohctl get cluster-config Get Cluster Description The 'get cluster-description' command displays information regarding a cluster and it&#8217;s members. Only available in most recent Coherence versions. Usage cohctl get cluster-description [flags] Flags -h, --help help for cluster-description Examples <markup lang=\"bash\" >cohctl get cluster-description -c local ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " Setting up Management over REST Securing Oracle Coherence HTTP Management Over REST Server Contexts NS Lookup Setting request timeout Creating Development Clusters ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/05_clusters",
            "text": " Overview There are various cluster commands that allow you to work with and manage cluster connections. cohctl add cluster - adds a cluster connection cohctl discover clusters - discovers clusters using the Name Service cohctl remove cluster - removes a cluster connection cohctl get clusters - returns the list of cluster connections cohctl describe cluster - describes a cluster referred to by a cluster connection cohctl get cluster-config - displays the cluster operational config cohctl get cluster-description - displays the cluster description including members Add Cluster The 'add cluster' command adds a new connection to a Coherence cluster. You can specify the full url such as https://&lt;host&gt;:&lt;management-port&gt;/management/coherence/cluster . You can also specify host:port (for http connections) and the url will be automatically populated constructed. Usage cohctl add cluster connection-name [flags] Flags -h, --help help for cluster -t, --type string connection type, http (default \"http\") -u, --url string connection URL Examples <markup lang=\"bash\" >cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Notes Cluster connections are in one of two formats: Standalone Coherence - http://host:management-port/management/coherence/cluster WebLogic Server - http://&lt;admin-host&gt;:&lt;admin-port&gt;/management/coherence/latest/clusters If you are connecting to WebLogic Server or a Management over REST endpoint that has authentication, you can specify the user using the -U option. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) You can also specify just a host:port and cohctl will construct a http connection using those in the correct format. <markup lang=\"bash\" >cohctl add cluster local -u localhost:30000 Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster If you wish to add a https connection, you must enter the entire URL. You can set the HTTP_PROXY environment variable to use a Proxy Server to connect to your cluster endpoint. Discover Clusters The 'discover clusters' command discovers Coherence clusters using the Name Service. You can specify a list of either host:port pairs or if you specify a host name the default cluster port of 7574 will be used. You will be presented with a list of clusters that have Management over REST configured and you can confirm if you wish to add the discovered clusters. Usage cohctl discover clusters [host[:port]...] [flags] Flags -h, --help help for clusters -I, --ignore ignore errors from NS lookup -t, --timeout int32 timeout in seconds for NS Lookup requests (default 30) -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl discover clusters Output: <markup lang=\"bash\" >Attempting to discover clusters using the following NameService addresses: [localhost] Discovering Management URL for my-cluster on localhost:7574 ... Discovering Management URL for test-cluster on localhost:63868 ... Clusters found: 2 Without Http Mgmt: 1 With Http Mgmt: 1 The following clusters do not have Management over REST enabled and cannot be added Cluster: test-cluster, Name Service address: localhost:63868 CONNECTION CLUSTER NAME HOST NS PORT URL my-cluster my-cluster localhost 7574 http://127.0.0.1:30000/management/coherence/cluster Are you sure you want to add the above 1 cluster(s)? (y/n) y Added cluster my-cluster with type http and URL http://127.0.0.1:30000/management/coherence/cluster Display the clusters <markup lang=\"bash\" >cohctl get clusters CONNECTION TYPE URL VERSION CLUSTER NAME TYPE CTX CREATED my-cluster http http://127.0.0.1:30000/management/coherence/cluster 14.1.1.0.13 my-cluster Standalone N The cluster connection is automatically generated from the cluster name. If it already exists you will be asked for specify a name. If there are two or more Management URL&#8217;s, you will be asked to select one. Remove Cluster The 'remove cluster' command removes a cluster connection. Usage cohctl remove cluster connection-name [flags] Flags -h, --help help for cluster -y, --yes automatically confirm the operation Examples <markup lang=\"bash\" >cohctl remove cluster local Output: <markup lang=\"bash\" >Are you sure you want to remove the connection to cluster local? (y/n) y Removed connection for cluster local This command only removes the connection to the cluster that cohctl stores. It does not affect the running Coherence cluster in any way. Get Clusters The 'get clusters' command displays the list of cluster connections. The 'LOCAL' column is set to 'true' if the cluster has been created using the 'cohctl create cluster' command. You can also use the '-o wide' option to see if the cluster is running. Usage cohctl get clusters [flags] Flags -h, --help help for clusters Examples <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone false Notes: An asterix will show in the CTX column if the cluster has been set using the cohctl set context command. The LOCAL column indicates if the cluster was a local cluster manually created via the cohctl create cluster command. If you use the -o wide option, an additional column is displayed showing if the management endpoint is running. This doesn&#8217;t mean the cluster if fully up, but that at least the management is. With this option, each cluster connection is checked and may take a while if you have a large number of connections. See below <markup lang=\"bash\" >cohctl get clusters -o wide Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL RUNNING local http http://localhost:30000/management/coherence/cluster 21.06.1 my-cluster Standalone false true Describe Cluster The 'describe cluster' command shows cluster information related to a specific cluster connection, including: cluster overview, members, machines, services, caches, reporters, proxy servers and Http servers. You can specify '-o wide' to display addition information as well as '-v' to displayed additional information. Usage cohctl describe cluster cluster-name [flags] Flags -h, --help help for cluster -v, --verbose include verbose output including individual members, reporters and executor details Examples <markup lang=\"bash\" >cohctl describe cluster local Get Cluster Config The 'get cluster-config' displays the cluster operational config for a cluster using the current context or a cluster specified by using '-c'. Only available in most recent Coherence versions Usage cohctl get cluster-config [flags] Flags -h, --help help for cluster-config Examples <markup lang=\"bash\" >cohctl get cluster-config Get Cluster Description The 'get cluster-description' command displays information regarding a cluster and it&#8217;s members. Only available in most recent Coherence versions. Usage cohctl get cluster-description [flags] Flags -h, --help help for cluster-description Examples <markup lang=\"bash\" >cohctl get cluster-description -c local See Also Setting up Management over REST Securing Oracle Coherence HTTP Management Over REST Server Contexts NS Lookup Setting request timeout Creating Development Clusters ",
            "title": "Clusters"
        },
        {
            "location": "/docs/about/02_introduction",
            "text": " The Coherence command line interface, cohctl , is a lightweight tool, in the tradition of tools such as kubectl, which can be scripted or used interactively to manage and monitor Coherence clusters. You can use cohctl to view cluster information such as services, caches, members, etc, as well as perform various management operations against clusters. The CLI accesses clusters using the HTTP Management over REST interface and therefore requires this to be enabled on any clusters you want to monitor or manage. See the Coherence Documentation for more information on setting up Management over REST. The CLI is certified with the latest Coherence Community Edition (CE) versions as well as Coherence Commercial versions 12.2.1.4, 14.1.1.0.x, 14.1.1.2206.x and above. To view the release notes for the latest version of the CLI (1.6.0), see GitHub . The CLI does not replace current management and monitoring tools such as the Coherence VisualVM Plugin , Enterprise Manager , or Grafana Dashboards , but complements and provides a lightweight and scriptable alternative. Experimental Features This version introduces an experimental set of commands to allow you to create and scale local only, development based clusters. See Creating Clusters section for more details. ",
            "title": "What is the Coherence CLI?"
        },
        {
            "location": "/docs/about/02_introduction",
            "text": " The CLI complements your existing Coherence management tools and allows you to: Interactively monitor your Coherence clusters from a lightweight terminal-based interface Monitor service \"StatusHA\" during rolling restarts of Coherence clusters Script Coherence monitoring and incorporate results into other management tooling Output results in various formats including text, JSON and utilize JsonPath to extract attributes of interest Gather information that may be useful for Oracle Support to help diagnose issues Connect to standalone or WebLogic Server based clusters from commercial versions 12.2.1.4 and above as well as all Coherence Community Edition (CE) versions Retrieve thread dumps and Java Flight Recordings across members Make changes to various modifiable JMX attributes on services, caches and members There are experimental features in this release which allow you to create/ start/ stop/ scale Coherence clusters for development purposes only. See Creating Clusters documentation for more information. ",
            "title": "Why use the Coherence CLI?"
        },
        {
            "location": "/docs/about/02_introduction",
            "text": " Install the Coherence CLI Run the Quick Start Explore the Command Reference ",
            "title": "Next Steps"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " To enable basic authentication for Management over REST, please follow the instructions in the basic authentication section of the Coherence documentation. ",
            "title": "Enabling Basic Authentication"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " To enable SSL to provide authentication for Management over REST, please follow the instructions in the SSL authentication section of the Coherence documentation. ",
            "title": "Enabling SSL Authentication"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " If you have enabled basic authentication for your Management over REST endpoint, or you are connecting to a WebLogic Server cluster, you must provide the -U username option on all cohctl commands. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) <markup lang=\"bash\" >cohctl get members -U username Output: <markup lang=\"bash\" >Enter password: ***** ",
            "title": "Working with secured REST endpoints"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " REST API for Managing Oracle Coherence Securing Oracle Coherence HTTP Management Over REST Server ",
            "title": "See Also"
        },
        {
            "location": "/docs/security/01_overview",
            "text": " The Coherence CLI accesses cluster information using the Management over REST endpoint for the cluster as described in the Coherence documentation . Coherence HTTP Management server authentication and authorization are disabled by default. We recommend that this is enabled as outlined in the sections below. Another option for securing access to the management endpoint is to restrict HTTP access to the REST endpoint from trusted or management subnets using standard networking firewall rules. Enabling Basic Authentication To enable basic authentication for Management over REST, please follow the instructions in the basic authentication section of the Coherence documentation. Enabling SSL Authentication To enable SSL to provide authentication for Management over REST, please follow the instructions in the SSL authentication section of the Coherence documentation. Working with secured REST endpoints If you have enabled basic authentication for your Management over REST endpoint, or you are connecting to a WebLogic Server cluster, you must provide the -U username option on all cohctl commands. To specify a password, you have the following options: Enter the password when prompted for, or Use the -i or --stdin option to read the password from standard in. (Useful for GitHub actions or automated processes) <markup lang=\"bash\" >cohctl get members -U username Output: <markup lang=\"bash\" >Enter password: ***** See Also REST API for Managing Oracle Coherence Securing Oracle Coherence HTTP Management Over REST Server ",
            "title": "Securing CLI Access"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Retrieve the cluster name, version and cluster size from cohctl describe cluster . <markup lang=\"bash\" >cohctl describe cluster my-cluster -o jsonpath=\"$.cluster..['clusterName', 'version', 'clusterSize']\" Output: <markup lang=\"bash\" >[\"cluster1\",\"21.12\",2] ",
            "title": "Cluster"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get all service members where the requestAverageDuration &gt; 10 millis. <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 10)]..['nodeId','name','requestAverageDuration']\" | jq Output: <markup lang=\"bash\" >[ \"6\", \"PartitionedTopic\", 11.815331, \"5\", \"PartitionedTopic\", 14.489567, \"10\", \"PartitionedTopic\", 11.648249, \"7\", \"PartitionedCache\", 13.946078 ] ",
            "title": "Services"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get all members where the available memory &lt; 250MB <markup lang=\"bash\" >cohctl get members -o jsonpath=\"$.items[?(@.memoryAvailableMB &lt; 250)]..['nodeId','memoryMaxMB','memoryAvailableMB']\" | jq Output: <markup lang=\"bash\" >[ \"9\", 256, 221 ] ",
            "title": "Members"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get caches where total puts &gt; 10000. <markup lang=\"bash\" >cohctl get caches -o jsonpath=\"$.items[?(@.totalPuts &gt; 10000)]..['service','name','totalPuts']\" | jq Output: <markup lang=\"bash\" >[ \"PartitionedCache2\", \"test-3\", 2000000, \"PartitionedCache\", \"test\", 220000, \"PartitionedCache2\", \"test-2\", 23000 ] ",
            "title": "Caches"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " Get http proxy servers where total request count &gt; 40. <markup lang=\"bash\" >cohctl get http-servers -o jsonpath=\"$.items[?(@.totalRequestCount &gt; 15)]..['nodeId','name','totalRequestCount']\" Output: <markup lang=\"bash\" >[\"1\",\"ManagementHttpProxy\",45] Get persistence where latency average &gt; 0.020ms or 20 micros. <markup lang=\"bash\" >cohctl get persistence -o jsonpath=\"$.items[?(@.persistenceLatencyAverage &gt; 0.020)]..['nodeId','name','persistenceLatencyAverage']\" | jq Output: <markup lang=\"bash\" >[ \"4\", \"PartitionedCache2\", 0.027694767, \"3\", \"PartitionedCache2\", 0.029615732, \"2\", \"PartitionedCache2\", 0.027542727, \"1\", \"PartitionedCache2\", 0.02668317 ] ",
            "title": "Http Proxy Servers"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " JSONPath is a standard way to query elements of a JSON object. The Coherence CLI allows you to use JSONPath expressions to filter and select data when retrieving information. Below are some examples of how you could use JSONPath with the CLI. This is not an exhaustive list and the use is only limited by you imagination! In the examples below, we are also using the jq utility to format the JSON output. Cluster Examples Services Examples Members Examples Caches Examples Http Proxies Examples Cluster Retrieve the cluster name, version and cluster size from cohctl describe cluster . <markup lang=\"bash\" >cohctl describe cluster my-cluster -o jsonpath=\"$.cluster..['clusterName', 'version', 'clusterSize']\" Output: <markup lang=\"bash\" >[\"cluster1\",\"21.12\",2] Services Get all service members where the requestAverageDuration &gt; 10 millis. <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 10)]..['nodeId','name','requestAverageDuration']\" | jq Output: <markup lang=\"bash\" >[ \"6\", \"PartitionedTopic\", 11.815331, \"5\", \"PartitionedTopic\", 14.489567, \"10\", \"PartitionedTopic\", 11.648249, \"7\", \"PartitionedCache\", 13.946078 ] Members Get all members where the available memory &lt; 250MB <markup lang=\"bash\" >cohctl get members -o jsonpath=\"$.items[?(@.memoryAvailableMB &lt; 250)]..['nodeId','memoryMaxMB','memoryAvailableMB']\" | jq Output: <markup lang=\"bash\" >[ \"9\", 256, 221 ] Caches Get caches where total puts &gt; 10000. <markup lang=\"bash\" >cohctl get caches -o jsonpath=\"$.items[?(@.totalPuts &gt; 10000)]..['service','name','totalPuts']\" | jq Output: <markup lang=\"bash\" >[ \"PartitionedCache2\", \"test-3\", 2000000, \"PartitionedCache\", \"test\", 220000, \"PartitionedCache2\", \"test-2\", 23000 ] Http Proxy Servers Get http proxy servers where total request count &gt; 40. <markup lang=\"bash\" >cohctl get http-servers -o jsonpath=\"$.items[?(@.totalRequestCount &gt; 15)]..['nodeId','name','totalRequestCount']\" Output: <markup lang=\"bash\" >[\"1\",\"ManagementHttpProxy\",45] Get persistence where latency average &gt; 0.020ms or 20 micros. <markup lang=\"bash\" >cohctl get persistence -o jsonpath=\"$.items[?(@.persistenceLatencyAverage &gt; 0.020)]..['nodeId','name','persistenceLatencyAverage']\" | jq Output: <markup lang=\"bash\" >[ \"4\", \"PartitionedCache2\", 0.027694767, \"3\", \"PartitionedCache2\", 0.029615732, \"2\", \"PartitionedCache2\", 0.027542727, \"1\", \"PartitionedCache2\", 0.02668317 ] ",
            "title": "Using JSONPath"
        },
        {
            "location": "/docs/examples/10_jsonpath",
            "text": " An Introduction to JQ JSONPath examples Run the Quick Start ",
            "title": "See Also"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " In this example we have a cluster of 3 storage-enabled members and a cache called test . Our context has been set to local for our local cluster. <markup lang=\"bash\" ># Get the members cohctl get members Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total cluster members: 3 Cluster Heap - Total: 1.500GB, Used: 394MB, Available: 1.115GB (74.3%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 hostname-mac/192.168.1.124 60172 77425 n/a Management 512MB 44MB 468MB 2 hostname-mac/192.168.1.124 60178 77469 n/a TangosolNetCoherence 512MB 190MB 322MB 3 hostname-mac/192.168.1.124 60175 77447 n/a TangosolNetCoherence 512MB 160MB 352MB Get the caches for the PartitionedCache service <markup lang=\"bash\" >cohctl get caches -s PartitionedCache Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total Caches: 1, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache test 0 0 0MB ",
            "title": "1. List the members and caches"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " Use the following to retrieve the expiry delay and nodes for the cache test. <markup lang=\"bash\" >cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq Output: <markup lang=\"bash\" >[ \"test\", [ 0 ], [ \"1\", \"2\", \"3\" ] ] You will see only 1 value of 0 for expiry delay because this query returns the distinct values. ",
            "title": "2. Use JsonPath to display the current expiryDelay"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " The default tier is back and can be changed using the -t option to front if required. <markup lang=\"bash\" >cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed You will now see a value of 30 for all nodes. ",
            "title": "3. Set the expiry delay for all nodes to 30 seconds"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": "<markup lang=\"bash\" >cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq Output: <markup lang=\"bash\" >[ \"test\", [ 30 ], [ \"1\", \"2\", \"3\" ] ] ",
            "title": "4. Re-query the expiry delay"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": "<markup lang=\"bash\" >cohctl set cache test -a expiryDelay -v 120 -s PartitionedCache -n 1 Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 120 in tier back for 1 node(s)? (y/n) y operation completed ",
            "title": "5. Set the expiry delay for node 1 to 120 seconds"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": "<markup lang=\"bash\" >cohctl describe cache test -s PartitionedCache -o jsonpath=\"$.items[?(@.name == 'test')]..['expiryDelay','nodeId']\" |jq Output: <markup lang=\"bash\" >[ 30, \"3\", 120, \"1\", 30, \"2\" ] ",
            "title": "6. Re-query the expiry delay by describing the cache"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " Cache MBean Reference ",
            "title": "See Also"
        },
        {
            "location": "/docs/examples/15_set_cache_attrs",
            "text": " This example shows you how to set various attributes for a cache at runtime. Only the settable attributes such as the following can be modified: expiryDelay, highUnits, lowUnits, batchFactor, refreshFactor and requeueThreshold. See the Cache MBean Reference for more information on the above attributes. In the example below, we will set the expiryDelay for a cache. If you restart a cache node after setting an attribute, it will be reset to whatever the value was in the cache configuration. 1. List the members and caches In this example we have a cluster of 3 storage-enabled members and a cache called test . Our context has been set to local for our local cluster. <markup lang=\"bash\" ># Get the members cohctl get members Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total cluster members: 3 Cluster Heap - Total: 1.500GB, Used: 394MB, Available: 1.115GB (74.3%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE MAX HEAP USED HEAP AVAIL HEAP 1 hostname-mac/192.168.1.124 60172 77425 n/a Management 512MB 44MB 468MB 2 hostname-mac/192.168.1.124 60178 77469 n/a TangosolNetCoherence 512MB 190MB 322MB 3 hostname-mac/192.168.1.124 60175 77447 n/a TangosolNetCoherence 512MB 160MB 352MB Get the caches for the PartitionedCache service <markup lang=\"bash\" >cohctl get caches -s PartitionedCache Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total Caches: 1, Total primary storage: 0MB SERVICE CACHE CACHE SIZE BYTES MB PartitionedCache test 0 0 0MB 2. Use JsonPath to display the current expiryDelay Use the following to retrieve the expiry delay and nodes for the cache test. <markup lang=\"bash\" >cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq Output: <markup lang=\"bash\" >[ \"test\", [ 0 ], [ \"1\", \"2\", \"3\" ] ] You will see only 1 value of 0 for expiry delay because this query returns the distinct values. 3. Set the expiry delay for all nodes to 30 seconds The default tier is back and can be changed using the -t option to front if required. <markup lang=\"bash\" >cohctl set cache test -a expiryDelay -v 30 -s PartitionedCache Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 30 in tier back for all 3 nodes? (y/n) y operation completed You will now see a value of 30 for all nodes. 4. Re-query the expiry delay <markup lang=\"bash\" >cohctl get caches -o jsonpath=\"$.items[?(@.name == 'test')]..['name','expiryDelay','nodeId']\" |jq Output: <markup lang=\"bash\" >[ \"test\", [ 30 ], [ \"1\", \"2\", \"3\" ] ] 5. Set the expiry delay for node 1 to 120 seconds <markup lang=\"bash\" >cohctl set cache test -a expiryDelay -v 120 -s PartitionedCache -n 1 Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Selected service/cache: PartitionedCache/test Are you sure you want to set the value of attribute expiryDelay to 120 in tier back for 1 node(s)? (y/n) y operation completed 6. Re-query the expiry delay by describing the cache <markup lang=\"bash\" >cohctl describe cache test -s PartitionedCache -o jsonpath=\"$.items[?(@.name == 'test')]..['expiryDelay','nodeId']\" |jq Output: <markup lang=\"bash\" >[ 30, \"3\", 120, \"1\", 30, \"2\" ] See Also Cache MBean Reference ",
            "title": "Setting Cache Attributes"
        },
        {
            "location": "/docs/reference/26_view_caches",
            "text": " The 'get view-caches' command displays view caches for a cluster. If no service name is specified then all services are queried. Usage cohctl get view-caches [flags] Flags -h, --help help for view-caches -s, --service string Service name Examples Display all view caches. <markup lang=\"bash\" >cohctl get view-caches -c local Output: <markup lang=\"bash\" >Total View Caches: 2 SERVICE VIEW NAME MEMBERS DistributedCacheService view-cache-1 3 DistributedCacheService view-cache-2 3 ",
            "title": "Get View Caches"
        },
        {
            "location": "/docs/reference/26_view_caches",
            "text": " The 'describe view-cache' command displays information related to a specific view-cache. Usage cohctl describe view-cache cache-name [flags] Flags -h, --help help for view-cache -s, --service string Service name Examples <markup lang=\"bash\" >cohctl describe view-cache view-cache-1 -c local Output: <markup lang=\"bash\" >Service: DistributedCacheService View Cache: view-cache-1 NODE ID VIEW SIZE RECONNECT FILTER TRANSFORMED TRANSFORMER READ ONLY 3 5 0.0s AlwaysFilter false n/a false 4 5 0.0s AlwaysFilter false n/a false 5 5 0.0s AlwaysFilter false n/a false You may omit the service name option if the view cache name is unique. ",
            "title": "Describe View Cache"
        },
        {
            "location": "/docs/reference/26_view_caches",
            "text": " There are various commands that allow you to work with and manage cluster view caches. cohctl get view-caches - displays the view caches for a cluster cohctl describe view-cache - shows information related to a specific view cache and service Get View Caches The 'get view-caches' command displays view caches for a cluster. If no service name is specified then all services are queried. Usage cohctl get view-caches [flags] Flags -h, --help help for view-caches -s, --service string Service name Examples Display all view caches. <markup lang=\"bash\" >cohctl get view-caches -c local Output: <markup lang=\"bash\" >Total View Caches: 2 SERVICE VIEW NAME MEMBERS DistributedCacheService view-cache-1 3 DistributedCacheService view-cache-2 3 Describe View Cache The 'describe view-cache' command displays information related to a specific view-cache. Usage cohctl describe view-cache cache-name [flags] Flags -h, --help help for view-cache -s, --service string Service name Examples <markup lang=\"bash\" >cohctl describe view-cache view-cache-1 -c local Output: <markup lang=\"bash\" >Service: DistributedCacheService View Cache: view-cache-1 NODE ID VIEW SIZE RECONNECT FILTER TRANSFORMED TRANSFORMER READ ONLY 3 5 0.0s AlwaysFilter false n/a false 4 5 0.0s AlwaysFilter false n/a false 5 5 0.0s AlwaysFilter false n/a false You may omit the service name option if the view cache name is unique. ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/26_view_caches",
            "text": " Caches ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/26_view_caches",
            "text": " Overview There are various commands that allow you to work with and manage cluster view caches. cohctl get view-caches - displays the view caches for a cluster cohctl describe view-cache - shows information related to a specific view cache and service Get View Caches The 'get view-caches' command displays view caches for a cluster. If no service name is specified then all services are queried. Usage cohctl get view-caches [flags] Flags -h, --help help for view-caches -s, --service string Service name Examples Display all view caches. <markup lang=\"bash\" >cohctl get view-caches -c local Output: <markup lang=\"bash\" >Total View Caches: 2 SERVICE VIEW NAME MEMBERS DistributedCacheService view-cache-1 3 DistributedCacheService view-cache-2 3 Describe View Cache The 'describe view-cache' command displays information related to a specific view-cache. Usage cohctl describe view-cache cache-name [flags] Flags -h, --help help for view-cache -s, --service string Service name Examples <markup lang=\"bash\" >cohctl describe view-cache view-cache-1 -c local Output: <markup lang=\"bash\" >Service: DistributedCacheService View Cache: view-cache-1 NODE ID VIEW SIZE RECONNECT FILTER TRANSFORMED TRANSFORMER READ ONLY 3 5 0.0s AlwaysFilter false n/a false 4 5 0.0s AlwaysFilter false n/a false 5 5 0.0s AlwaysFilter false n/a false You may omit the service name option if the view cache name is unique. See Also Caches ",
            "title": "View Caches"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " This guide is a simple set of steps to get you started with the Coherence CLI. ",
            "title": "Overview"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " You must have downloaded and installed the CLI for your platform as described in the Coherence CLI Installation section . You must have a Coherence cluster running that has Management over REST configured. See the Coherence Documentation for more information on setting up Management over REST. If you do not have a cluster running with Management over REST, you can run the following Docker image to start a Coherence CE cluster and expose management on port 30000. <markup lang=\"bash\" >docker run -d -p 30000:30000 ghcr.io/oracle/coherence-ce:22.06.7 If you are connecting to a Coherence Commercial version you must be on at least the following patch sets: 12.2.1.4.x - minimum patch level of 12.2.1.4.10+ required 14.1.1.0.x - minimum patch level of 14.1.1.0.5+ required If you are connecting to WebLogic Server then see the Clusters Command Reference for more information on the connection requirements. ",
            "title": "Prerequisites"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Issue the following command to show the version details of the tool you are using. <markup lang=\"bash\" >cohctl version Output: <markup lang=\"bash\" >Coherence Command Line Interface CLI Version: 1.6.0 Date: 2023-07-13T02:36:48Z Commit: 6d1266bb473dad224a3672367126381263af OS: darwin OS Version: amd64 THE CLI creates a hidden directory off the users home directory called .cohctl to store the cluster connection information plus other information. You can issue ls -l ~/.cohctl on Mac/Linux to view the directory contents. ",
            "title": "1. Display the Coherence CLI version"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " If you run cohctl without any arguments you will see the usage. These options are explained in detail in Global Flags . <markup lang=\"bash\" >cohctl --help Output: <markup lang=\"bash\" >The Coherence Command Line Interface (CLI) provides a way to interact with, and monitor Coherence clusters via a terminal-based interface. Usage: cohctl [command] Available Commands: add add a resource archive archive a resource clear clears resources compact compact an elastic-data resource completion Generate the autocompletion script for the specified shell configure configure tracing connect connect a resource create create a resource describe show details of a specific resource disconnect disconnect a resource discover discover a cluster dump dump a resource get display one or many resources help Help about any command log log a resource notify notify a resource nslookup execute a Coherence Name Service lookup pause pause a resource recover recover a resource remove remove a resource replicate replicate a federated service reset reset statistics for various resources resume resume a resource retrieve retrieve a resource scale scale a cluster set set a configuration value shutdown shutdown a resource start start a resource stop stop a resource suspend suspend a resource truncate truncates resources version show version information Flags: -b, --bytes show sizes in bytes --config string config file (default is $HOME/.cohctl/cohctl.yaml) --config-dir string config directory (default is $HOME/.cohctl) -c, --connection string cluster connection name. (not required if context is set) -d, --delay int32 delay for watching in seconds (default 5) -g, --gb show sizes in gigabytes (default is bytes) -h, --help help for cohctl -k, --kb show sizes in kilobytes (default is bytes) -m, --mb show sizes in megabytes (default is bytes) -o, --output string output format: table, wide, json or jsonpath=\"...\" (default \"table\") -i, --stdin read password from stdin --tb show sizes in terabytes (default is bytes) -U, --username string basic auth username if authentication is required -w, --watch watch output (only available for get commands) -W, --watch-clear watch output with clear Use \"cohctl [command] --help\" for more information about a command. ",
            "title": "2. Display CLI usage"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Next, you must add a connection to a Coherence cluster. In this example the cluster is running on the local machine and the Management over REST port is 30000. Adjust for your Coherence cluster. When you add a cluster connection you give it a context name, which may be different that the cluster name and url to connect to. <markup lang=\"bash\" >cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Display the clusters <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL local http http://localhost:30000/management/coherence/cluster 23.03 my-cluster Standalone false If you are not using a Docker container, you can also use the cohctl discover clusters command to automatically discover clusters using the Name Service. ",
            "title": "3. Add a cluster connection"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Depending upon the services and caches running in your cluster, you will see something slightly different. You can also provide the -v (verbose) and -o wide (wide format) flags to display more details. By default, all memory and disk values are displayed in bytes as you can see above. You can change this by specifying -k for KB, -m for MB or -g for GB. This applies to all memory or disk values returned. ",
            "title": "Notes"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Now that the cluster connection is added, you can describe the cluster using the describe cluster command. <markup lang=\"bash\" >cohctl describe cluster local Output: <markup lang=\"bash\" >CLUSTER ------- Cluster Name: my-cluster Version: 23.03 Cluster Size: 3 License Mode: Development Departure Count: 0 Running: true MACHINES -------- MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 192.168.1.117 8 3.9067 34,359,738,368 1,671,991,296 4.87% Mac OS X x86_64 10.16 MEMBERS ------- Total cluster members: 3 Cluster Heap - Total: 4,563,402,752 Used: 171,966,464 Available: 4,391,436,288 (96.2%) Storage Heap - Total: 4,294,967,296 Used: 117,440,512 Available: 4,177,526,784 (97.3%) SERVICES -------- SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 257 PartitionedCache DistributedCache 3 NODE-SAFE 2 257 ManagementHttpProxy Proxy 1 n/a -1 -1 \"$SYS:Config\" DistributedCache 2 ENDANGERED 2 257 PERSISTENCE ----------- Total Active Space Used: 0 SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE SPACE AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 2 on-demand 0 0.000ms 0ms 1 Idle PartitionedCache2 2 on-demand 0 0.000ms 0ms 3 Idle PartitionedCache 2 on-demand 0 0.000ms 0ms 1 Idle \"$SYS:Config\" 2 on-demand 0 0.000ms 0ms 0 Idle CACHES ------ Total Caches: 2, Total primary storage: 19,030,328 SERVICE CACHE COUNT SIZE PartitionedCache customers 50,230 13,204,808 PartitionedCache orders 5,022 5,825,520 TOPICS ------ PROXY SERVERS ------------- NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:63984.55876 Proxy 0 0 0 2 0.0.0.0:63995.53744 Proxy 0 0 0 HTTP SERVERS ------------- NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:30000 ManagementHttpProxy com.tangosol.coherence.http.JavaHttpServer 0 0 Notes Depending upon the services and caches running in your cluster, you will see something slightly different. You can also provide the -v (verbose) and -o wide (wide format) flags to display more details. By default, all memory and disk values are displayed in bytes as you can see above. You can change this by specifying -k for KB, -m for MB or -g for GB. This applies to all memory or disk values returned. ",
            "title": "4. Describe the cluster"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " You can issue various get commands to display different resources. Issue the get services command to show the services for the cluster only. <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 All commands other than describe cluster require a -c option to specify the cluster you wish to connect to. You can use the cohctl set context &lt;name&gt; to specify the context (or cluster connection) you are working with, so you don&#8217;t have to specify -c each time. <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local cohctl get services Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 ",
            "title": "5. Display services"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Above we have issued a get services command and for all resources you can use a describe command to show specific details about a resource, or a service in our case. The output from a describe command will usually contain much more detailed information about the resource. <markup lang=\"bash\" >cohctl describe service PartitionedCache Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. SERVICE DETAILS --------------- Name : PartitionedCache Type : [DistributedCache] Backup Count : [1] ... SERVICE MEMBERS --------------- NODE ID THREADS IDLE THREAD UTIL MIN THREADS MAX THREADS 1 1 1 0.00% 1 2,147,483,647 2 1 1 0.00% 1 2,147,483,647 3 0 -1 n/a 1 2,147,483,647 SERVICE CACHES -------------- Total Caches: 2, Total primary storage: 37,888,448 SERVICE CACHE COUNT SIZE PartitionedCache customers 100,000 26,288,448 PartitionedCache orders 10,000 11,600,000 PERSISTENCE FOR SERVICE ----------------------- Total Active Space Used: 0 NODE ID PERSISTENCE MODE ACTIVE SPACE AVG LATENCY MAX LATENCY 1 on-demand 0 0.000ms 0ms 2 on-demand 0 0.000ms 0ms PERSISTENCE COORDINATOR ----------------------- Coordinator Id : 1 Idle : true Operation Status: Idle Snapshots : [snapshot-1] DISTRIBUTION INFORMATION ------------------------ Scheduled Distributions: No distributions are currently scheduled for this service. PARTITION INFORMATION --------------------- Service : PartitionedCache Strategy Name : SimpleAssignmentStrategy Average Partition Size KB : 143 Average Storage Size KB : 18500 Backup Count : 1 ... Service Node Count : 2 Service Rack Count : 1 Service Site Count : 1 Type : PartitionAssignment The output above has been truncated for brevity. ",
            "title": "6. Describe a service"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " For all the get commands, you can add the -w option to watch the resource continuously until CTRL-C has been pressed. In the example below we are watching the cluster members. You can also use the -W option which will clear the screen between displaying data. We are setting the -m option to show sizes in MB rather than the default of bytes. <markup lang=\"bash\" >cohctl get members -w -m Output: <markup lang=\"bash\" >2022-04-27 15:11:24.393725 +0800 AWST m=+0.031247503 Using cluster connection 'local' from current context. Total cluster members: 3 Storage enabled count: 2 Departure count: 0 Cluster Heap - Total: 4,352 MB Used: 261 MB Available: 4,091 MB (94.0%) Storage Heap - Total: 4,096 MB Used: 212 MB Available: 3,884 MB (94.8%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 192.168.1.117 63984 35372 n/a Management true 2,048 MB 127 MB 1,921 MB 2 192.168.1.117 63995 35398 n/a TangosolNetCoherence true 2,048 MB 85 MB 1,963 MB 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 49 MB 207 MB 2022-04-27 15:11:29.419558 +0800 AWST m=+5.057038216 Using cluster connection 'local' from current context. Total cluster members: 3 Storage enabled count: 2 Departure count: 0 Cluster Heap - Total: 4,352 MB Used: 263 MB Available: 4,089 MB (94.0%) Storage Heap - Total: 4,096 MB Used: 214 MB Available: 3,882 MB (94.8%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 192.168.1.117 63984 35372 n/a Management true 2,048 MB 129 MB 1,919 MB 2 192.168.1.117 63995 35398 n/a TangosolNetCoherence true 2,048 MB 85 MB 1,963 MB 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 49 MB 207 MB You can change the delay from the default of 5 seconds by using -d option and specifying the seconds to delay, e.g. cohctl get members -w -d 10 . You can also use -o wide to display more columns on most commands. ",
            "title": "7. Watching data"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " The default output format is text, but you can specify -o json on any command to get the output in Json format. You can also use -o jsonpath=\"&#8230;&#8203;\" to apply a JsonPath expression. Below we are changing the format for the get members to be Json and piping it thought the jq utility to format. <markup lang=\"bash\" >cohctl get members -o json | jq Output: <markup lang=\"bash\" >{ \"items\": [ { \"processName\": \"13981\", \"socketCount\": -1, \"siteName\": \"n/a\", \"publisherSuccessRate\": 1, \"trafficJamCount\": 8192, \"multicastEnabled\": true, \"refreshTime\": \"2021-10-13T15:12:58.476+08:00\", ... } We can also JSONPath expressions to select or query json output from any command. In the example below we get all service members where the requestAverageDuration &gt; 15 millis. <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 15)]..['nodeId','name','requestAverageDuration']\" Output: <markup lang=\"bash\" >[ \"2\", \"PartitionedCache2\", 25.51414, \"1\", \"PartitionedCache2\", 19.662437 ] See the JSONPath examples for more information. ",
            "title": "8. Change the output format to Json and using JSONPath"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Explore more of the commands here . ",
            "title": "Next Steps"
        },
        {
            "location": "/docs/about/03_quickstart",
            "text": " Display the Coherence CLI version Display CLI usage Add a cluster connection Describe the cluster Display services Describe a service Watching data Change the output format to Json and using JsonPath 1. Display the Coherence CLI version Issue the following command to show the version details of the tool you are using. <markup lang=\"bash\" >cohctl version Output: <markup lang=\"bash\" >Coherence Command Line Interface CLI Version: 1.6.0 Date: 2023-07-13T02:36:48Z Commit: 6d1266bb473dad224a3672367126381263af OS: darwin OS Version: amd64 THE CLI creates a hidden directory off the users home directory called .cohctl to store the cluster connection information plus other information. You can issue ls -l ~/.cohctl on Mac/Linux to view the directory contents. 2. Display CLI usage If you run cohctl without any arguments you will see the usage. These options are explained in detail in Global Flags . <markup lang=\"bash\" >cohctl --help Output: <markup lang=\"bash\" >The Coherence Command Line Interface (CLI) provides a way to interact with, and monitor Coherence clusters via a terminal-based interface. Usage: cohctl [command] Available Commands: add add a resource archive archive a resource clear clears resources compact compact an elastic-data resource completion Generate the autocompletion script for the specified shell configure configure tracing connect connect a resource create create a resource describe show details of a specific resource disconnect disconnect a resource discover discover a cluster dump dump a resource get display one or many resources help Help about any command log log a resource notify notify a resource nslookup execute a Coherence Name Service lookup pause pause a resource recover recover a resource remove remove a resource replicate replicate a federated service reset reset statistics for various resources resume resume a resource retrieve retrieve a resource scale scale a cluster set set a configuration value shutdown shutdown a resource start start a resource stop stop a resource suspend suspend a resource truncate truncates resources version show version information Flags: -b, --bytes show sizes in bytes --config string config file (default is $HOME/.cohctl/cohctl.yaml) --config-dir string config directory (default is $HOME/.cohctl) -c, --connection string cluster connection name. (not required if context is set) -d, --delay int32 delay for watching in seconds (default 5) -g, --gb show sizes in gigabytes (default is bytes) -h, --help help for cohctl -k, --kb show sizes in kilobytes (default is bytes) -m, --mb show sizes in megabytes (default is bytes) -o, --output string output format: table, wide, json or jsonpath=\"...\" (default \"table\") -i, --stdin read password from stdin --tb show sizes in terabytes (default is bytes) -U, --username string basic auth username if authentication is required -w, --watch watch output (only available for get commands) -W, --watch-clear watch output with clear Use \"cohctl [command] --help\" for more information about a command. 3. Add a cluster connection Next, you must add a connection to a Coherence cluster. In this example the cluster is running on the local machine and the Management over REST port is 30000. Adjust for your Coherence cluster. When you add a cluster connection you give it a context name, which may be different that the cluster name and url to connect to. <markup lang=\"bash\" >cohctl add cluster local -u http://localhost:30000/management/coherence/cluster Output: <markup lang=\"bash\" >Added cluster local with type http and URL http://localhost:30000/management/coherence/cluster Display the clusters <markup lang=\"bash\" >cohctl get clusters Output: <markup lang=\"bash\" >CONNECTION TYPE URL VERSION CLUSTER NAME CLUSTER TYPE CTX LOCAL local http http://localhost:30000/management/coherence/cluster 23.03 my-cluster Standalone false If you are not using a Docker container, you can also use the cohctl discover clusters command to automatically discover clusters using the Name Service. 4. Describe the cluster Now that the cluster connection is added, you can describe the cluster using the describe cluster command. <markup lang=\"bash\" >cohctl describe cluster local Output: <markup lang=\"bash\" >CLUSTER ------- Cluster Name: my-cluster Version: 23.03 Cluster Size: 3 License Mode: Development Departure Count: 0 Running: true MACHINES -------- MACHINE PROCESSORS LOAD TOTAL MEMORY FREE MEMORY % FREE OS ARCH VERSION 192.168.1.117 8 3.9067 34,359,738,368 1,671,991,296 4.87% Mac OS X x86_64 10.16 MEMBERS ------- Total cluster members: 3 Cluster Heap - Total: 4,563,402,752 Used: 171,966,464 Available: 4,391,436,288 (96.2%) Storage Heap - Total: 4,294,967,296 Used: 117,440,512 Available: 4,177,526,784 (97.3%) SERVICES -------- SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedTopic DistributedCache 2 NODE-SAFE 2 257 PartitionedCache2 DistributedCache 2 NODE-SAFE 2 257 PartitionedCache DistributedCache 3 NODE-SAFE 2 257 ManagementHttpProxy Proxy 1 n/a -1 -1 \"$SYS:Config\" DistributedCache 2 ENDANGERED 2 257 PERSISTENCE ----------- Total Active Space Used: 0 SERVICE NAME STORAGE COUNT PERSISTENCE MODE ACTIVE SPACE AVG LATENCY MAX LATENCY SNAPSHOTS STATUS PartitionedTopic 2 on-demand 0 0.000ms 0ms 1 Idle PartitionedCache2 2 on-demand 0 0.000ms 0ms 3 Idle PartitionedCache 2 on-demand 0 0.000ms 0ms 1 Idle \"$SYS:Config\" 2 on-demand 0 0.000ms 0ms 0 Idle CACHES ------ Total Caches: 2, Total primary storage: 19,030,328 SERVICE CACHE COUNT SIZE PartitionedCache customers 50,230 13,204,808 PartitionedCache orders 5,022 5,825,520 TOPICS ------ PROXY SERVERS ------------- NODE ID HOST IP SERVICE NAME CONNECTIONS BYTES SENT BYTES REC 1 0.0.0.0:63984.55876 Proxy 0 0 0 2 0.0.0.0:63995.53744 Proxy 0 0 0 HTTP SERVERS ------------- NODE ID HOST IP SERVICE NAME SERVER TYPE REQUESTS ERRORS 1 0.0.0.0:30000 ManagementHttpProxy com.tangosol.coherence.http.JavaHttpServer 0 0 Notes Depending upon the services and caches running in your cluster, you will see something slightly different. You can also provide the -v (verbose) and -o wide (wide format) flags to display more details. By default, all memory and disk values are displayed in bytes as you can see above. You can change this by specifying -k for KB, -m for MB or -g for GB. This applies to all memory or disk values returned. 5. Display services You can issue various get commands to display different resources. Issue the get services command to show the services for the cluster only. <markup lang=\"bash\" >cohctl get services -c local Output: <markup lang=\"bash\" >SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 All commands other than describe cluster require a -c option to specify the cluster you wish to connect to. You can use the cohctl set context &lt;name&gt; to specify the context (or cluster connection) you are working with, so you don&#8217;t have to specify -c each time. <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local cohctl get services Using cluster connection 'local' from current context. SERVICE NAME TYPE MEMBERS STATUS HA STORAGE PARTITIONS Proxy Proxy 2 n/a -1 -1 PartitionedCache DistributedCache 2 MACHINE-SAFE 2 31 ManagementHttpProxy Proxy 2 n/a -1 -1 6. Describe a service Above we have issued a get services command and for all resources you can use a describe command to show specific details about a resource, or a service in our case. The output from a describe command will usually contain much more detailed information about the resource. <markup lang=\"bash\" >cohctl describe service PartitionedCache Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. SERVICE DETAILS --------------- Name : PartitionedCache Type : [DistributedCache] Backup Count : [1] ... SERVICE MEMBERS --------------- NODE ID THREADS IDLE THREAD UTIL MIN THREADS MAX THREADS 1 1 1 0.00% 1 2,147,483,647 2 1 1 0.00% 1 2,147,483,647 3 0 -1 n/a 1 2,147,483,647 SERVICE CACHES -------------- Total Caches: 2, Total primary storage: 37,888,448 SERVICE CACHE COUNT SIZE PartitionedCache customers 100,000 26,288,448 PartitionedCache orders 10,000 11,600,000 PERSISTENCE FOR SERVICE ----------------------- Total Active Space Used: 0 NODE ID PERSISTENCE MODE ACTIVE SPACE AVG LATENCY MAX LATENCY 1 on-demand 0 0.000ms 0ms 2 on-demand 0 0.000ms 0ms PERSISTENCE COORDINATOR ----------------------- Coordinator Id : 1 Idle : true Operation Status: Idle Snapshots : [snapshot-1] DISTRIBUTION INFORMATION ------------------------ Scheduled Distributions: No distributions are currently scheduled for this service. PARTITION INFORMATION --------------------- Service : PartitionedCache Strategy Name : SimpleAssignmentStrategy Average Partition Size KB : 143 Average Storage Size KB : 18500 Backup Count : 1 ... Service Node Count : 2 Service Rack Count : 1 Service Site Count : 1 Type : PartitionAssignment The output above has been truncated for brevity. 7. Watching data For all the get commands, you can add the -w option to watch the resource continuously until CTRL-C has been pressed. In the example below we are watching the cluster members. You can also use the -W option which will clear the screen between displaying data. We are setting the -m option to show sizes in MB rather than the default of bytes. <markup lang=\"bash\" >cohctl get members -w -m Output: <markup lang=\"bash\" >2022-04-27 15:11:24.393725 +0800 AWST m=+0.031247503 Using cluster connection 'local' from current context. Total cluster members: 3 Storage enabled count: 2 Departure count: 0 Cluster Heap - Total: 4,352 MB Used: 261 MB Available: 4,091 MB (94.0%) Storage Heap - Total: 4,096 MB Used: 212 MB Available: 3,884 MB (94.8%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 192.168.1.117 63984 35372 n/a Management true 2,048 MB 127 MB 1,921 MB 2 192.168.1.117 63995 35398 n/a TangosolNetCoherence true 2,048 MB 85 MB 1,963 MB 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 49 MB 207 MB 2022-04-27 15:11:29.419558 +0800 AWST m=+5.057038216 Using cluster connection 'local' from current context. Total cluster members: 3 Storage enabled count: 2 Departure count: 0 Cluster Heap - Total: 4,352 MB Used: 263 MB Available: 4,089 MB (94.0%) Storage Heap - Total: 4,096 MB Used: 214 MB Available: 3,882 MB (94.8%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 192.168.1.117 63984 35372 n/a Management true 2,048 MB 129 MB 1,919 MB 2 192.168.1.117 63995 35398 n/a TangosolNetCoherence true 2,048 MB 85 MB 1,963 MB 3 192.168.1.117 64013 35430 n/a CoherenceConsole false 256 MB 49 MB 207 MB You can change the delay from the default of 5 seconds by using -d option and specifying the seconds to delay, e.g. cohctl get members -w -d 10 . You can also use -o wide to display more columns on most commands. 8. Change the output format to Json and using JSONPath The default output format is text, but you can specify -o json on any command to get the output in Json format. You can also use -o jsonpath=\"&#8230;&#8203;\" to apply a JsonPath expression. Below we are changing the format for the get members to be Json and piping it thought the jq utility to format. <markup lang=\"bash\" >cohctl get members -o json | jq Output: <markup lang=\"bash\" >{ \"items\": [ { \"processName\": \"13981\", \"socketCount\": -1, \"siteName\": \"n/a\", \"publisherSuccessRate\": 1, \"trafficJamCount\": 8192, \"multicastEnabled\": true, \"refreshTime\": \"2021-10-13T15:12:58.476+08:00\", ... } We can also JSONPath expressions to select or query json output from any command. In the example below we get all service members where the requestAverageDuration &gt; 15 millis. <markup lang=\"bash\" >cohctl get services -o jsonpath=\"$.items[?(@.requestAverageDuration &gt; 15)]..['nodeId','name','requestAverageDuration']\" Output: <markup lang=\"bash\" >[ \"2\", \"PartitionedCache2\", 25.51414, \"1\", \"PartitionedCache2\", 19.662437 ] See the JSONPath examples for more information. Next Steps Explore more of the commands here . ",
            "title": "Contents"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'create cluster' command creates a local cluster, adds to the cohctl.yaml file and starts it. You must have the 'mvn' executable and 'java' 17+ executable in your PATH for this to work. This cluster is only for development/testing purposes and should not be used, and is not supported in a production capacity. Supported versions are: CE 22.06 and above and commercial 14.1.1.2206.1 and above. Default version is currently CE 22.06.7. NOTE: This is an experimental feature and my be altered or removed in the future. Usage cohctl create cluster cluster-name [flags] Flags -a, --additional string additional comma separated Coherence artifacts or others in G:A:V format --cache-config string cache configuration file -p, --cluster-port int32 cluster port (default 7574) -C, --commercial use commercial Coherence groupID (default CE) -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -H, --http-port int32 http management port (default 30000) -j, --jmx-host string remote JMX RMI host for management member -J, --jmx-port int32 remote JMX port for management member -L, --log-destination string root directory to place log files in -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics --override-config string override override file -T, --partition-count int32 partition count (default 257) -s, --persistence-mode string persistence mode [on-demand active active-backup active-async] (default \"on-demand\") -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -I, --skip-deps skip pulling artifacts -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") -v, --version string cluster version (default \"22.06.7\") -K, --wka string well known address (default \"127.0.0.1\") -y, --yes automatically confirm the operation The log files are stored under the .cohctl/logs/ directory off your home directory. You can change this for an individual cluster by specifying the -L option when you create the cluster. Examples Add and start a cluster using all default values. After the cluster has been created, the current context is automatically set to the new cluster. <markup lang=\"bash\" >cohctl create cluster local Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 22.06.7 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 128m Persistence mode: on-demand Group ID: com.oracle.coherence.ce Additional artifacts: Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Checking 3 Maven dependencies... - com.oracle.coherence.ce:coherence:22.06.7 - com.oracle.coherence.ce:coherence-json:22.06.7 - org.jline:jline:3.20.0 Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started Current context is now local Display the cluster members <markup lang=\"bash\" >cohctl get members Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total cluster members: 3 Cluster Heap - Total: 384 MB Used: 123 MB Available: 261 MB (68.0%) Storage Heap - Total: 384 MB Used: 123 MB Available: 261 MB (68.0%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 /127.0.0.1 61565 63754 storage-1 CoherenceServer true 128 MB 28 MB 100 MB 2 /127.0.0.1 61566 63753 storage-0 CoherenceServer true 128 MB 25 MB 103 MB 3 /127.0.0.1 61567 63755 storage-2 CoherenceServer true 128 MB 70 MB 58 MB By default, Coherence CE groupId is used and the version is 22.06.7. You can change this via using -C for commercial and -v to change the Coherence version. Additional dependencies coherence-json is included to enable Management over REST and jline is included for CohQL history support. Add and start a commercial Coherence cluster (14.1.1.2206.5) and set initial memory for each cluster to 1g and use active persistence mode. <markup lang=\"bash\" >cohctl create cluster local -C -v 14.1.1-2206-5 -M 1g -P active -S Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 14.1.1-2206-5 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 1g Persistence mode: active Group ID: com.oracle.coherence Additional artifacts: Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Skipping downloading Maven artifcts Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started In this example we are using the -S option to skip downloading maven artifacts as we know they are already installed locally. Add and start a cluster using all default values but include additional coherence-rest and opentracing dependencies. <markup lang=\"bash\" >cohctl create cluster local -a coherence-rest,io.opentracing:opentracing-api:0.33.0,io.opentracing:opentracing-util:0.33.0 Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 22.06.7 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 128m Persistence mode: on-demand Group ID: com.oracle.coherence.ce Additional artifacts: coherence-rest,io.opentracing:opentracing-api:0.33.0,io.opentracing:opentracing-util:0.33.0 Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Checking 6 Maven dependencies... - com.oracle.coherence.ce:coherence:22.06.7 - com.oracle.coherence.ce:coherence-json:22.06.7 - com.oracle.coherence.ce:coherence-rest:22.06.7 - io.opentracing:opentracing-api:0.33.0 - io.opentracing:opentracing-util:0.33.0 - org.jline:jline:3.20.0 Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started with process ids: [3324 3330 3331] ",
            "title": "Create Cluster"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'scale cluster' command scales a cluster that was manually created. Usage cohctl scale cluster [flags] Flags -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") <markup lang=\"bash\" >cohctl scale cluster local -r 4 Output: <markup lang=\"bash\" >Are you sure you want to scale the cluster local up by 1 member(s) to 4 members? (y/n) y Starting cluster member storage-3... Cluster local scaled It is not yet supported to scale down a cluster. ",
            "title": "Scale Cluster"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'stop cluster' command stops a cluster that was manually created or started. Usage cohctl stop cluster [flags] Flags -h, --help help for cluster -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl stop cluster local Output: <markup lang=\"bash\" >Are you sure you want to stop 3 members for the cluster local? (y/n) y killed process 47760 killed process 47761 killed process 47762 3 processes were stopped for cluster local ",
            "title": "Stop Cluster"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'start cluster' command starts a cluster that was manually created. Usage cohctl start cluster [flags] Flags -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -j, --jmx-host string remote JMX RMI host for management member -J, --jmx-port int32 remote JMX port for management member -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") Examples Start a cluster and specify heap size of 1g . (default is 128m) <markup lang=\"bash\" >cohctl start cluster local -M 1g Output: <markup lang=\"bash\" >Are you sure you want to start 3 members for cluster local? (y/n) y Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster local and started Start a cluster and specify heap size of 1g with 4 replicas/members. <markup lang=\"bash\" >cohctl start cluster local -M 1g -r 4 Output: <markup lang=\"bash\" >Are you sure you want to start 4 members for cluster local? (y/n) y Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Starting cluster member storage-3... Cluster local and started If you wish to enable remote RMI management on you cluster, as well as HTTP management, you will need to use the following: <markup lang=\"bash\" >cohctl start cluster local -J 9999 -j hostname -J is the rmi port -j is the rmi host. You should set this to the hostname the cluster is running on. It will default to WKA address if not set. ",
            "title": "Start Cluster"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'start console' command starts a console client which connects to a cluster using the current context or a cluster specified by using '-c'. Usage cohctl start console [flags] Flags -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for console -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line Start a Coherence console. <markup lang=\"bash\" >cohctl start console -c local Output: <markup lang=\"bash\" >Starting client com.tangosol.net.CacheFactory... 2022-08-29 16:00:01.346/0.620 Oracle Coherence 22.06.7 (thread=main, member=n/a): Loaded operational configuration from \"jar:file:/Users/user/.m2/repository/com/oracle/coherence/ce/coherence/22.06.7/coherence-22.06.7.jar!/tangosol-coherence.xml\" ... Map (?): Use bye to quit the console. ",
            "title": "Start Console"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'start cohql' command starts a CohQL client which connects to a cluster using the current context or a cluster specified by using '-c'.. Usage cohctl start cohql [flags] Flags -X, --extend start CohQL as Extend client. Only works for default cache config -f, --file string file name to read CohQL commands from -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cohql -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line -S, --statement string statement to execute enclosed in double quotes Start a CohQL session. <markup lang=\"bash\" >cohctl start cohql -c local Output: <markup lang=\"bash\" >Starting client com.tangosol.coherence.dslquery.QueryPlus... Coherence Command Line Tool CohQL&gt; Use bye to quit the console. Start a CohQL Session and execute a statement <markup lang=\"bash\" >cohctl start cohql -c local -S \"insert into test key(1) value(1)\" Start a CohQL Session and execute statements from a file. <markup lang=\"bash\" >cohctl start cohql -c local -f /tmp/run.cohql ",
            "title": "Start CohQL"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'start class' command starts a specific Java class which connects to a cluster using the current context or a cluster specified by using '-c'. The class name must include the full package and class name and must be included in an artefact included in the initial cluster creation. Usage cohctl start class [flags] Flags -X, --extend start a class as Extend client. Only works for default cache config -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for class -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line <markup lang=\"bash\" >cohctl start class com.my.company.Class -c local Output: <markup lang=\"bash\" >Starting client com.my.company.Class... ",
            "title": "Start Class"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'set use-gradle' command sets whether to use gradle for dependency management. This setting only affects when you create a cluster. If set to false, the default of Maven will be used. Usage cohctl set use-gradle {true|false} [flags] Flags -h, --help help for use-gradle <markup lang=\"bash\" >cohctl set use-gradle true Output: <markup lang=\"bash\" >Use Gradle is now set to true ",
            "title": "Set Use Gradle"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'get use-gradle' command displays the current setting for whether to use gradle for dependency management. If set to false, the default of Maven is used. Usage cohctl get use-gradle [flags] Flags -h, --help help for use-gradle <markup lang=\"bash\" >cohctl get use-gradle Output: <markup lang=\"bash\" >Use Gradle: true ",
            "title": "Get Use Gradle"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'set default-heap' command sets the default heap when creating and starting cluster. Valid values are in the format suitable for -Xms such as 256m, 1g, etc. Usage cohctl set default-heap value [flags] Flags -h, --help help for default-heap Set default heap to 512m. <markup lang=\"bash\" >cohctl set default-heap 512m Output: <markup lang=\"bash\" >Default heap is now set to 512m ",
            "title": "Set Default Heap"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'get default-heap' displays the default heap for creating and starting clusters. Usage cohctl get default-heap [flags] Flags -h, --help help for default-heap <markup lang=\"bash\" >cohctl get default-heap Output: <markup lang=\"bash\" >Current default heap: 512m ",
            "title": "Get Default Heap"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'clear default-heap' clears the default heap for creating and starting clusters. Usage cohctl clear default-heap [flags] Flags -h, --help help for default-heap <markup lang=\"bash\" >cohctl clear default-heap Output: <markup lang=\"bash\" >Default heap has been cleared If no default-heap is set, then the default of 128m is used unless a value for -M is specified. ",
            "title": "Clear Default Heap"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'set profile' command sets a profile value for creating and starting clusters. Profiles can be specified using the '-P' option when creating and starting clusters. They contain property values to be set prior to the final class and must be surrounded by quotes and be space delimited. If you set a profile that exists, it will be overwritten. Usage cohctl set profile profile-name [flags] Flags -h, --help help for profile -v, --value string profile value to set -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl set profile debug-enabled -v \"-Dmy.debug.enabled=true -Dmy.debug.level=10\" Output: <markup lang=\"bash\" >Are you sure you want to set the profile debug-enabled to a value of [-Dmy.debug.enabled=true -Dmy.debug.level=10]? (y/n) y profile debug-enabled was set to value [-Dmy.debug.enabled=true -Dmy.debug.level=10] When you have set the profile you can startup or create a cluster using that profile by specifying -P profile-name for the cohctl start cluster or cohctl create cluster commands. ",
            "title": "Set Profile"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'remove profile' command removes a profile value from the list of profiles. Usage cohctl remove profile profile-name [flags] Flags -h, --help help for profile -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl remove profile debug-enabled Output: <markup lang=\"bash\" >Are you sure you want to remove the profile debug-enabled? (y/n) y profile debug-enabled was removed ",
            "title": "Remove Profile"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " The 'get profiles' displays the profiles that have been created. Usage cohctl get profiles [flags] Flags -h, --help help for profiles <markup lang=\"bash\" >cohctl get profiles Output: <markup lang=\"bash\" >PROFILE VALUE profile1 -Dproperty1.value=2 profile2 -Dproperty2.value=2 -Dproperty3.value=4 ",
            "title": "Get Profiles"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " There are various cluster commands that allow you to create and work with local development based clusters. These commands allow you to create local only development based clusters (scoped to localhost) for Coherence CE 22.06.x and Commercial 14.1.1.2206.x versions and above. You must have the following setup for this to work: Java 17+ executable on the PATH, if you are using the default Coherence CE 22.06.7 version. Maven 3.6+ or JDK compatible Gradle version 7.+ executable on the PATH. Maven is used by default for dependency resolution and classpath generation, but if you prefer Gradle, then use the following: cohctl set use-grade true . You can revert to Maven by using cohctl set use-gradle false . Once you create a local cluster, you can manage and monitor these clusters in the same way as you can with discovered or manually added clusters. You can also run the Coherence console and CohQL (Query client) against these clusters. When you create a cluster, the first node started will always have management over REST enabled. You may also specify a profile when you start a cluster using the -P option. The value of the profile , which is a string containing -Dkey=value pairs, will be included in the cache servers started. On first creation of a Coherence cluster, if your Maven or Gradle repository is empty, it may take a short while to download the minimal depdencies. These commands are experimental only and may be changed or removed in the future. It is not supported to use these commands to create production clusters. Creating and controlling clusters cohctl create cluster - creates a local cluster and adds to the cohctl.yaml file cohctl scale cluster - scales a cluster that was manually created cohctl stop cluster - stops a cluster that was manually created or started cohctl start cluster - starts a cluster that was manually created cohctl start console - starts a console client against a cluster that was manually created cohctl start cohql - starts a CohQL client against a cluster that was manually created cohctl start class - starts a specific Java class against a cluster that was manually created Setting dependency tool cohctl set use-gradle - sets whether to use gradle for dependency management cohctl get use-gradle - displays the current setting for using gradle for dependency management Setting default heap sizes cohctl set default-heap - sets default heap for creating and starting clusters cohctl get default-heap - gets default heap for creating and starting clusters cohctl clear default-heap - clears default heap for creating and starting clusters Creating and managing profiles cohctl set profile - set a profile value for creating and starting clusters cohctl remove profile - removes a profile value from the list of profile cohctl get profiles - displays the profiles that have been created Create Cluster The 'create cluster' command creates a local cluster, adds to the cohctl.yaml file and starts it. You must have the 'mvn' executable and 'java' 17+ executable in your PATH for this to work. This cluster is only for development/testing purposes and should not be used, and is not supported in a production capacity. Supported versions are: CE 22.06 and above and commercial 14.1.1.2206.1 and above. Default version is currently CE 22.06.7. NOTE: This is an experimental feature and my be altered or removed in the future. Usage cohctl create cluster cluster-name [flags] Flags -a, --additional string additional comma separated Coherence artifacts or others in G:A:V format --cache-config string cache configuration file -p, --cluster-port int32 cluster port (default 7574) -C, --commercial use commercial Coherence groupID (default CE) -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -H, --http-port int32 http management port (default 30000) -j, --jmx-host string remote JMX RMI host for management member -J, --jmx-port int32 remote JMX port for management member -L, --log-destination string root directory to place log files in -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics --override-config string override override file -T, --partition-count int32 partition count (default 257) -s, --persistence-mode string persistence mode [on-demand active active-backup active-async] (default \"on-demand\") -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -I, --skip-deps skip pulling artifacts -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") -v, --version string cluster version (default \"22.06.7\") -K, --wka string well known address (default \"127.0.0.1\") -y, --yes automatically confirm the operation The log files are stored under the .cohctl/logs/ directory off your home directory. You can change this for an individual cluster by specifying the -L option when you create the cluster. Examples Add and start a cluster using all default values. After the cluster has been created, the current context is automatically set to the new cluster. <markup lang=\"bash\" >cohctl create cluster local Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 22.06.7 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 128m Persistence mode: on-demand Group ID: com.oracle.coherence.ce Additional artifacts: Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Checking 3 Maven dependencies... - com.oracle.coherence.ce:coherence:22.06.7 - com.oracle.coherence.ce:coherence-json:22.06.7 - org.jline:jline:3.20.0 Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started Current context is now local Display the cluster members <markup lang=\"bash\" >cohctl get members Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total cluster members: 3 Cluster Heap - Total: 384 MB Used: 123 MB Available: 261 MB (68.0%) Storage Heap - Total: 384 MB Used: 123 MB Available: 261 MB (68.0%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 /127.0.0.1 61565 63754 storage-1 CoherenceServer true 128 MB 28 MB 100 MB 2 /127.0.0.1 61566 63753 storage-0 CoherenceServer true 128 MB 25 MB 103 MB 3 /127.0.0.1 61567 63755 storage-2 CoherenceServer true 128 MB 70 MB 58 MB By default, Coherence CE groupId is used and the version is 22.06.7. You can change this via using -C for commercial and -v to change the Coherence version. Additional dependencies coherence-json is included to enable Management over REST and jline is included for CohQL history support. Add and start a commercial Coherence cluster (14.1.1.2206.5) and set initial memory for each cluster to 1g and use active persistence mode. <markup lang=\"bash\" >cohctl create cluster local -C -v 14.1.1-2206-5 -M 1g -P active -S Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 14.1.1-2206-5 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 1g Persistence mode: active Group ID: com.oracle.coherence Additional artifacts: Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Skipping downloading Maven artifcts Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started In this example we are using the -S option to skip downloading maven artifacts as we know they are already installed locally. Add and start a cluster using all default values but include additional coherence-rest and opentracing dependencies. <markup lang=\"bash\" >cohctl create cluster local -a coherence-rest,io.opentracing:opentracing-api:0.33.0,io.opentracing:opentracing-util:0.33.0 Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 22.06.7 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 128m Persistence mode: on-demand Group ID: com.oracle.coherence.ce Additional artifacts: coherence-rest,io.opentracing:opentracing-api:0.33.0,io.opentracing:opentracing-util:0.33.0 Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Checking 6 Maven dependencies... - com.oracle.coherence.ce:coherence:22.06.7 - com.oracle.coherence.ce:coherence-json:22.06.7 - com.oracle.coherence.ce:coherence-rest:22.06.7 - io.opentracing:opentracing-api:0.33.0 - io.opentracing:opentracing-util:0.33.0 - org.jline:jline:3.20.0 Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started with process ids: [3324 3330 3331] Scale Cluster The 'scale cluster' command scales a cluster that was manually created. Usage cohctl scale cluster [flags] Flags -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") <markup lang=\"bash\" >cohctl scale cluster local -r 4 Output: <markup lang=\"bash\" >Are you sure you want to scale the cluster local up by 1 member(s) to 4 members? (y/n) y Starting cluster member storage-3... Cluster local scaled It is not yet supported to scale down a cluster. Stop Cluster The 'stop cluster' command stops a cluster that was manually created or started. Usage cohctl stop cluster [flags] Flags -h, --help help for cluster -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl stop cluster local Output: <markup lang=\"bash\" >Are you sure you want to stop 3 members for the cluster local? (y/n) y killed process 47760 killed process 47761 killed process 47762 3 processes were stopped for cluster local Start Cluster The 'start cluster' command starts a cluster that was manually created. Usage cohctl start cluster [flags] Flags -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -j, --jmx-host string remote JMX RMI host for management member -J, --jmx-port int32 remote JMX port for management member -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") Examples Start a cluster and specify heap size of 1g . (default is 128m) <markup lang=\"bash\" >cohctl start cluster local -M 1g Output: <markup lang=\"bash\" >Are you sure you want to start 3 members for cluster local? (y/n) y Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster local and started Start a cluster and specify heap size of 1g with 4 replicas/members. <markup lang=\"bash\" >cohctl start cluster local -M 1g -r 4 Output: <markup lang=\"bash\" >Are you sure you want to start 4 members for cluster local? (y/n) y Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Starting cluster member storage-3... Cluster local and started If you wish to enable remote RMI management on you cluster, as well as HTTP management, you will need to use the following: <markup lang=\"bash\" >cohctl start cluster local -J 9999 -j hostname -J is the rmi port -j is the rmi host. You should set this to the hostname the cluster is running on. It will default to WKA address if not set. Start Console The 'start console' command starts a console client which connects to a cluster using the current context or a cluster specified by using '-c'. Usage cohctl start console [flags] Flags -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for console -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line Start a Coherence console. <markup lang=\"bash\" >cohctl start console -c local Output: <markup lang=\"bash\" >Starting client com.tangosol.net.CacheFactory... 2022-08-29 16:00:01.346/0.620 Oracle Coherence 22.06.7 (thread=main, member=n/a): Loaded operational configuration from \"jar:file:/Users/user/.m2/repository/com/oracle/coherence/ce/coherence/22.06.7/coherence-22.06.7.jar!/tangosol-coherence.xml\" ... Map (?): Use bye to quit the console. Start CohQL The 'start cohql' command starts a CohQL client which connects to a cluster using the current context or a cluster specified by using '-c'.. Usage cohctl start cohql [flags] Flags -X, --extend start CohQL as Extend client. Only works for default cache config -f, --file string file name to read CohQL commands from -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cohql -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line -S, --statement string statement to execute enclosed in double quotes Start a CohQL session. <markup lang=\"bash\" >cohctl start cohql -c local Output: <markup lang=\"bash\" >Starting client com.tangosol.coherence.dslquery.QueryPlus... Coherence Command Line Tool CohQL&gt; Use bye to quit the console. Start a CohQL Session and execute a statement <markup lang=\"bash\" >cohctl start cohql -c local -S \"insert into test key(1) value(1)\" Start a CohQL Session and execute statements from a file. <markup lang=\"bash\" >cohctl start cohql -c local -f /tmp/run.cohql Start Class The 'start class' command starts a specific Java class which connects to a cluster using the current context or a cluster specified by using '-c'. The class name must include the full package and class name and must be included in an artefact included in the initial cluster creation. Usage cohctl start class [flags] Flags -X, --extend start a class as Extend client. Only works for default cache config -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for class -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line <markup lang=\"bash\" >cohctl start class com.my.company.Class -c local Output: <markup lang=\"bash\" >Starting client com.my.company.Class... Set Use Gradle The 'set use-gradle' command sets whether to use gradle for dependency management. This setting only affects when you create a cluster. If set to false, the default of Maven will be used. Usage cohctl set use-gradle {true|false} [flags] Flags -h, --help help for use-gradle <markup lang=\"bash\" >cohctl set use-gradle true Output: <markup lang=\"bash\" >Use Gradle is now set to true Get Use Gradle The 'get use-gradle' command displays the current setting for whether to use gradle for dependency management. If set to false, the default of Maven is used. Usage cohctl get use-gradle [flags] Flags -h, --help help for use-gradle <markup lang=\"bash\" >cohctl get use-gradle Output: <markup lang=\"bash\" >Use Gradle: true Set Default Heap The 'set default-heap' command sets the default heap when creating and starting cluster. Valid values are in the format suitable for -Xms such as 256m, 1g, etc. Usage cohctl set default-heap value [flags] Flags -h, --help help for default-heap Set default heap to 512m. <markup lang=\"bash\" >cohctl set default-heap 512m Output: <markup lang=\"bash\" >Default heap is now set to 512m Get Default Heap The 'get default-heap' displays the default heap for creating and starting clusters. Usage cohctl get default-heap [flags] Flags -h, --help help for default-heap <markup lang=\"bash\" >cohctl get default-heap Output: <markup lang=\"bash\" >Current default heap: 512m Clear Default Heap The 'clear default-heap' clears the default heap for creating and starting clusters. Usage cohctl clear default-heap [flags] Flags -h, --help help for default-heap <markup lang=\"bash\" >cohctl clear default-heap Output: <markup lang=\"bash\" >Default heap has been cleared If no default-heap is set, then the default of 128m is used unless a value for -M is specified. Set Profile The 'set profile' command sets a profile value for creating and starting clusters. Profiles can be specified using the '-P' option when creating and starting clusters. They contain property values to be set prior to the final class and must be surrounded by quotes and be space delimited. If you set a profile that exists, it will be overwritten. Usage cohctl set profile profile-name [flags] Flags -h, --help help for profile -v, --value string profile value to set -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl set profile debug-enabled -v \"-Dmy.debug.enabled=true -Dmy.debug.level=10\" Output: <markup lang=\"bash\" >Are you sure you want to set the profile debug-enabled to a value of [-Dmy.debug.enabled=true -Dmy.debug.level=10]? (y/n) y profile debug-enabled was set to value [-Dmy.debug.enabled=true -Dmy.debug.level=10] When you have set the profile you can startup or create a cluster using that profile by specifying -P profile-name for the cohctl start cluster or cohctl create cluster commands. Remove Profile The 'remove profile' command removes a profile value from the list of profiles. Usage cohctl remove profile profile-name [flags] Flags -h, --help help for profile -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl remove profile debug-enabled Output: <markup lang=\"bash\" >Are you sure you want to remove the profile debug-enabled? (y/n) y profile debug-enabled was removed Get Profiles The 'get profiles' displays the profiles that have been created. Usage cohctl get profiles [flags] Flags -h, --help help for profiles <markup lang=\"bash\" >cohctl get profiles Output: <markup lang=\"bash\" >PROFILE VALUE profile1 -Dproperty1.value=2 profile2 -Dproperty2.value=2 -Dproperty3.value=4 ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " Clusters ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/98_create_clusters",
            "text": " Overview There are various cluster commands that allow you to create and work with local development based clusters. These commands allow you to create local only development based clusters (scoped to localhost) for Coherence CE 22.06.x and Commercial 14.1.1.2206.x versions and above. You must have the following setup for this to work: Java 17+ executable on the PATH, if you are using the default Coherence CE 22.06.7 version. Maven 3.6+ or JDK compatible Gradle version 7.+ executable on the PATH. Maven is used by default for dependency resolution and classpath generation, but if you prefer Gradle, then use the following: cohctl set use-grade true . You can revert to Maven by using cohctl set use-gradle false . Once you create a local cluster, you can manage and monitor these clusters in the same way as you can with discovered or manually added clusters. You can also run the Coherence console and CohQL (Query client) against these clusters. When you create a cluster, the first node started will always have management over REST enabled. You may also specify a profile when you start a cluster using the -P option. The value of the profile , which is a string containing -Dkey=value pairs, will be included in the cache servers started. On first creation of a Coherence cluster, if your Maven or Gradle repository is empty, it may take a short while to download the minimal depdencies. These commands are experimental only and may be changed or removed in the future. It is not supported to use these commands to create production clusters. Creating and controlling clusters cohctl create cluster - creates a local cluster and adds to the cohctl.yaml file cohctl scale cluster - scales a cluster that was manually created cohctl stop cluster - stops a cluster that was manually created or started cohctl start cluster - starts a cluster that was manually created cohctl start console - starts a console client against a cluster that was manually created cohctl start cohql - starts a CohQL client against a cluster that was manually created cohctl start class - starts a specific Java class against a cluster that was manually created Setting dependency tool cohctl set use-gradle - sets whether to use gradle for dependency management cohctl get use-gradle - displays the current setting for using gradle for dependency management Setting default heap sizes cohctl set default-heap - sets default heap for creating and starting clusters cohctl get default-heap - gets default heap for creating and starting clusters cohctl clear default-heap - clears default heap for creating and starting clusters Creating and managing profiles cohctl set profile - set a profile value for creating and starting clusters cohctl remove profile - removes a profile value from the list of profile cohctl get profiles - displays the profiles that have been created Create Cluster The 'create cluster' command creates a local cluster, adds to the cohctl.yaml file and starts it. You must have the 'mvn' executable and 'java' 17+ executable in your PATH for this to work. This cluster is only for development/testing purposes and should not be used, and is not supported in a production capacity. Supported versions are: CE 22.06 and above and commercial 14.1.1.2206.1 and above. Default version is currently CE 22.06.7. NOTE: This is an experimental feature and my be altered or removed in the future. Usage cohctl create cluster cluster-name [flags] Flags -a, --additional string additional comma separated Coherence artifacts or others in G:A:V format --cache-config string cache configuration file -p, --cluster-port int32 cluster port (default 7574) -C, --commercial use commercial Coherence groupID (default CE) -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -H, --http-port int32 http management port (default 30000) -j, --jmx-host string remote JMX RMI host for management member -J, --jmx-port int32 remote JMX port for management member -L, --log-destination string root directory to place log files in -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics --override-config string override override file -T, --partition-count int32 partition count (default 257) -s, --persistence-mode string persistence mode [on-demand active active-backup active-async] (default \"on-demand\") -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -I, --skip-deps skip pulling artifacts -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") -v, --version string cluster version (default \"22.06.7\") -K, --wka string well known address (default \"127.0.0.1\") -y, --yes automatically confirm the operation The log files are stored under the .cohctl/logs/ directory off your home directory. You can change this for an individual cluster by specifying the -L option when you create the cluster. Examples Add and start a cluster using all default values. After the cluster has been created, the current context is automatically set to the new cluster. <markup lang=\"bash\" >cohctl create cluster local Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 22.06.7 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 128m Persistence mode: on-demand Group ID: com.oracle.coherence.ce Additional artifacts: Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Checking 3 Maven dependencies... - com.oracle.coherence.ce:coherence:22.06.7 - com.oracle.coherence.ce:coherence-json:22.06.7 - org.jline:jline:3.20.0 Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started Current context is now local Display the cluster members <markup lang=\"bash\" >cohctl get members Output: <markup lang=\"bash\" >Using cluster connection 'local' from current context. Total cluster members: 3 Cluster Heap - Total: 384 MB Used: 123 MB Available: 261 MB (68.0%) Storage Heap - Total: 384 MB Used: 123 MB Available: 261 MB (68.0%) NODE ID ADDRESS PORT PROCESS MEMBER ROLE STORAGE MAX HEAP USED HEAP AVAIL HEAP 1 /127.0.0.1 61565 63754 storage-1 CoherenceServer true 128 MB 28 MB 100 MB 2 /127.0.0.1 61566 63753 storage-0 CoherenceServer true 128 MB 25 MB 103 MB 3 /127.0.0.1 61567 63755 storage-2 CoherenceServer true 128 MB 70 MB 58 MB By default, Coherence CE groupId is used and the version is 22.06.7. You can change this via using -C for commercial and -v to change the Coherence version. Additional dependencies coherence-json is included to enable Management over REST and jline is included for CohQL history support. Add and start a commercial Coherence cluster (14.1.1.2206.5) and set initial memory for each cluster to 1g and use active persistence mode. <markup lang=\"bash\" >cohctl create cluster local -C -v 14.1.1-2206-5 -M 1g -P active -S Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 14.1.1-2206-5 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 1g Persistence mode: active Group ID: com.oracle.coherence Additional artifacts: Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Skipping downloading Maven artifcts Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started In this example we are using the -S option to skip downloading maven artifacts as we know they are already installed locally. Add and start a cluster using all default values but include additional coherence-rest and opentracing dependencies. <markup lang=\"bash\" >cohctl create cluster local -a coherence-rest,io.opentracing:opentracing-api:0.33.0,io.opentracing:opentracing-util:0.33.0 Output: <markup lang=\"bash\" >Cluster name: local Cluster version: 22.06.7 Cluster port: 7574 Partition count: 257 Management port: 30000 Server count: 3 Initial memory: 128m Persistence mode: on-demand Group ID: com.oracle.coherence.ce Additional artifacts: coherence-rest,io.opentracing:opentracing-api:0.33.0,io.opentracing:opentracing-util:0.33.0 Log destination root: Dependency tool: mvn Are you sure you want to create the cluster with the above details? (y/n) y Checking 6 Maven dependencies... - com.oracle.coherence.ce:coherence:22.06.7 - com.oracle.coherence.ce:coherence-json:22.06.7 - com.oracle.coherence.ce:coherence-rest:22.06.7 - io.opentracing:opentracing-api:0.33.0 - io.opentracing:opentracing-util:0.33.0 - org.jline:jline:3.20.0 Starting 3 cluster members for cluster local Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster added and started with process ids: [3324 3330 3331] Scale Cluster The 'scale cluster' command scales a cluster that was manually created. Usage cohctl scale cluster [flags] Flags -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") <markup lang=\"bash\" >cohctl scale cluster local -r 4 Output: <markup lang=\"bash\" >Are you sure you want to scale the cluster local up by 1 member(s) to 4 members? (y/n) y Starting cluster member storage-3... Cluster local scaled It is not yet supported to scale down a cluster. Stop Cluster The 'stop cluster' command stops a cluster that was manually created or started. Usage cohctl stop cluster [flags] Flags -h, --help help for cluster -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl stop cluster local Output: <markup lang=\"bash\" >Are you sure you want to stop 3 members for the cluster local? (y/n) y killed process 47760 killed process 47761 killed process 47762 3 processes were stopped for cluster local Start Cluster The 'start cluster' command starts a cluster that was manually created. Usage cohctl start cluster [flags] Flags -e, --health-port int32 starting port for health -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cluster -j, --jmx-host string remote JMX RMI host for management member -J, --jmx-port int32 remote JMX port for management member -l, --log-level int32 coherence log level (default 5) -t, --metrics-port int32 starting port for metrics -P, --profile string profile to add to cluster startup command line -r, --replicas int32 number of replicas (default 3) -S, --start-class string class name to start server with (default from Coherence version) -D, --startup-delay string startup delay in millis for each server (default \"0ms\") Examples Start a cluster and specify heap size of 1g . (default is 128m) <markup lang=\"bash\" >cohctl start cluster local -M 1g Output: <markup lang=\"bash\" >Are you sure you want to start 3 members for cluster local? (y/n) y Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Cluster local and started Start a cluster and specify heap size of 1g with 4 replicas/members. <markup lang=\"bash\" >cohctl start cluster local -M 1g -r 4 Output: <markup lang=\"bash\" >Are you sure you want to start 4 members for cluster local? (y/n) y Starting cluster member storage-0... Starting cluster member storage-1... Starting cluster member storage-2... Starting cluster member storage-3... Cluster local and started If you wish to enable remote RMI management on you cluster, as well as HTTP management, you will need to use the following: <markup lang=\"bash\" >cohctl start cluster local -J 9999 -j hostname -J is the rmi port -j is the rmi host. You should set this to the hostname the cluster is running on. It will default to WKA address if not set. Start Console The 'start console' command starts a console client which connects to a cluster using the current context or a cluster specified by using '-c'. Usage cohctl start console [flags] Flags -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for console -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line Start a Coherence console. <markup lang=\"bash\" >cohctl start console -c local Output: <markup lang=\"bash\" >Starting client com.tangosol.net.CacheFactory... 2022-08-29 16:00:01.346/0.620 Oracle Coherence 22.06.7 (thread=main, member=n/a): Loaded operational configuration from \"jar:file:/Users/user/.m2/repository/com/oracle/coherence/ce/coherence/22.06.7/coherence-22.06.7.jar!/tangosol-coherence.xml\" ... Map (?): Use bye to quit the console. Start CohQL The 'start cohql' command starts a CohQL client which connects to a cluster using the current context or a cluster specified by using '-c'.. Usage cohctl start cohql [flags] Flags -X, --extend start CohQL as Extend client. Only works for default cache config -f, --file string file name to read CohQL commands from -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for cohql -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line -S, --statement string statement to execute enclosed in double quotes Start a CohQL session. <markup lang=\"bash\" >cohctl start cohql -c local Output: <markup lang=\"bash\" >Starting client com.tangosol.coherence.dslquery.QueryPlus... Coherence Command Line Tool CohQL&gt; Use bye to quit the console. Start a CohQL Session and execute a statement <markup lang=\"bash\" >cohctl start cohql -c local -S \"insert into test key(1) value(1)\" Start a CohQL Session and execute statements from a file. <markup lang=\"bash\" >cohctl start cohql -c local -f /tmp/run.cohql Start Class The 'start class' command starts a specific Java class which connects to a cluster using the current context or a cluster specified by using '-c'. The class name must include the full package and class name and must be included in an artefact included in the initial cluster creation. Usage cohctl start class [flags] Flags -X, --extend start a class as Extend client. Only works for default cache config -M, --heap-memory string heap memory to allocate for JVM if default-heap not set (default \"128m\") -h, --help help for class -l, --log-level int32 coherence log level (default 5) -P, --profile string profile to add to cluster startup command line <markup lang=\"bash\" >cohctl start class com.my.company.Class -c local Output: <markup lang=\"bash\" >Starting client com.my.company.Class... Set Use Gradle The 'set use-gradle' command sets whether to use gradle for dependency management. This setting only affects when you create a cluster. If set to false, the default of Maven will be used. Usage cohctl set use-gradle {true|false} [flags] Flags -h, --help help for use-gradle <markup lang=\"bash\" >cohctl set use-gradle true Output: <markup lang=\"bash\" >Use Gradle is now set to true Get Use Gradle The 'get use-gradle' command displays the current setting for whether to use gradle for dependency management. If set to false, the default of Maven is used. Usage cohctl get use-gradle [flags] Flags -h, --help help for use-gradle <markup lang=\"bash\" >cohctl get use-gradle Output: <markup lang=\"bash\" >Use Gradle: true Set Default Heap The 'set default-heap' command sets the default heap when creating and starting cluster. Valid values are in the format suitable for -Xms such as 256m, 1g, etc. Usage cohctl set default-heap value [flags] Flags -h, --help help for default-heap Set default heap to 512m. <markup lang=\"bash\" >cohctl set default-heap 512m Output: <markup lang=\"bash\" >Default heap is now set to 512m Get Default Heap The 'get default-heap' displays the default heap for creating and starting clusters. Usage cohctl get default-heap [flags] Flags -h, --help help for default-heap <markup lang=\"bash\" >cohctl get default-heap Output: <markup lang=\"bash\" >Current default heap: 512m Clear Default Heap The 'clear default-heap' clears the default heap for creating and starting clusters. Usage cohctl clear default-heap [flags] Flags -h, --help help for default-heap <markup lang=\"bash\" >cohctl clear default-heap Output: <markup lang=\"bash\" >Default heap has been cleared If no default-heap is set, then the default of 128m is used unless a value for -M is specified. Set Profile The 'set profile' command sets a profile value for creating and starting clusters. Profiles can be specified using the '-P' option when creating and starting clusters. They contain property values to be set prior to the final class and must be surrounded by quotes and be space delimited. If you set a profile that exists, it will be overwritten. Usage cohctl set profile profile-name [flags] Flags -h, --help help for profile -v, --value string profile value to set -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl set profile debug-enabled -v \"-Dmy.debug.enabled=true -Dmy.debug.level=10\" Output: <markup lang=\"bash\" >Are you sure you want to set the profile debug-enabled to a value of [-Dmy.debug.enabled=true -Dmy.debug.level=10]? (y/n) y profile debug-enabled was set to value [-Dmy.debug.enabled=true -Dmy.debug.level=10] When you have set the profile you can startup or create a cluster using that profile by specifying -P profile-name for the cohctl start cluster or cohctl create cluster commands. Remove Profile The 'remove profile' command removes a profile value from the list of profiles. Usage cohctl remove profile profile-name [flags] Flags -h, --help help for profile -y, --yes automatically confirm the operation <markup lang=\"bash\" >cohctl remove profile debug-enabled Output: <markup lang=\"bash\" >Are you sure you want to remove the profile debug-enabled? (y/n) y profile debug-enabled was removed Get Profiles The 'get profiles' displays the profiles that have been created. Usage cohctl get profiles [flags] Flags -h, --help help for profiles <markup lang=\"bash\" >cohctl get profiles Output: <markup lang=\"bash\" >PROFILE VALUE profile1 -Dproperty1.value=2 profile2 -Dproperty2.value=2 -Dproperty3.value=4 See Also Clusters ",
            "title": "Creating Clusters"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " The 'set context' command sets the current context or connection for running commands in. Usage cohctl set context connection-name [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local ",
            "title": "Set Context"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " The 'get context' command displays the current context. Usage cohctl get context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl get context Output: <markup lang=\"bash\" >Current context: local ",
            "title": "Get Context"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " The 'clear context' command clears the current context for running commands in. Usage cohctl clear context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl clear context Output: <markup lang=\"bash\" >Current context was cleared ",
            "title": "Clear Context"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " A context allows you to specify which cluster connection you are working with, so you do no have to specify the connection option, -c , with each command. These include: cohctl set context - Sets the context cohctl get context - Get the current context cohctl clear context - Clears the current context Set Context The 'set context' command sets the current context or connection for running commands in. Usage cohctl set context connection-name [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local Get Context The 'get context' command displays the current context. Usage cohctl get context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl get context Output: <markup lang=\"bash\" >Current context: local Clear Context The 'clear context' command clears the current context for running commands in. Usage cohctl clear context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl clear context Output: <markup lang=\"bash\" >Current context was cleared ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " Clusters ",
            "title": "See Also"
        },
        {
            "location": "/docs/reference/10_contexts",
            "text": " Overview A context allows you to specify which cluster connection you are working with, so you do no have to specify the connection option, -c , with each command. These include: cohctl set context - Sets the context cohctl get context - Get the current context cohctl clear context - Clears the current context Set Context The 'set context' command sets the current context or connection for running commands in. Usage cohctl set context connection-name [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl set context local Output: <markup lang=\"bash\" >Current context is now local Get Context The 'get context' command displays the current context. Usage cohctl get context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl get context Output: <markup lang=\"bash\" >Current context: local Clear Context The 'clear context' command clears the current context for running commands in. Usage cohctl clear context [flags] Flags -h, --help help for context Examples <markup lang=\"bash\" >cohctl clear context Output: <markup lang=\"bash\" >Current context was cleared See Also Clusters ",
            "title": "Contexts"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " The 'get elastic-data' command displays the Flash Journal and RAM Journal details for the cluster. Usage cohctl get elastic-data [flags] Flags -h, --help help for elastic-data Examples Display elastic data. <markup lang=\"bash\" >cohctl get http-servers -c local -m Output: <markup lang=\"bash\" >NAME USED FILES TOTAL FILES % USED MAX FILE SIZE USED SPACE COMMITTED HIGHEST LOAD COMPACTIONS EXHAUSTIVE RamJournalRM 80 19,600 0.41% 1 MB 0 MB 80 MB 0.0041 0 0 FlashJournalRM 81 41,391 0.20% 2,048 MB 0 MB 162,000 GB 0.0020 0 0 ",
            "title": "Get Elastic Data"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " The 'describe elastic-data' command shows information related to a specific journal type. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl describe elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data Examples <markup lang=\"bash\" >cohctl describe elastic-data RamJournalRM -c local ",
            "title": "Describe Elastic Data"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " The 'compact elastic-data' command compacts (garbage collects) a specific journal type for all or specific nodes. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl compact elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation Examples Compact flash journal for all nodes. <markup lang=\"bash\" >cohctl compact elastic-data FlashJournalRM -c local Output: <markup lang=\"bash\" >Are you sure you want to compact flash for all 2 nodes? (y/n) y operation completed Compact ram journal for 1 node. <markup lang=\"bash\" >cohctl compact elastic-data RamJournalRM -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to compact ram for 1 node(s)? (y/n) y operation completed ",
            "title": "Compact Elastic Data"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " There are various commands that allow you to work with and manage Elastic Data. cohctl get elastic-data - displays the elastic data details cohctl describe elastic-data - shows information related to a specific journal type cohctl compact elastic-data - compacts a flash or ram journal This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Elastic Data The 'get elastic-data' command displays the Flash Journal and RAM Journal details for the cluster. Usage cohctl get elastic-data [flags] Flags -h, --help help for elastic-data Examples Display elastic data. <markup lang=\"bash\" >cohctl get http-servers -c local -m Output: <markup lang=\"bash\" >NAME USED FILES TOTAL FILES % USED MAX FILE SIZE USED SPACE COMMITTED HIGHEST LOAD COMPACTIONS EXHAUSTIVE RamJournalRM 80 19,600 0.41% 1 MB 0 MB 80 MB 0.0041 0 0 FlashJournalRM 81 41,391 0.20% 2,048 MB 0 MB 162,000 GB 0.0020 0 0 Describe Elastic Data The 'describe elastic-data' command shows information related to a specific journal type. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl describe elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data Examples <markup lang=\"bash\" >cohctl describe elastic-data RamJournalRM -c local Compact Elastic Data The 'compact elastic-data' command compacts (garbage collects) a specific journal type for all or specific nodes. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl compact elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation Examples Compact flash journal for all nodes. <markup lang=\"bash\" >cohctl compact elastic-data FlashJournalRM -c local Output: <markup lang=\"bash\" >Are you sure you want to compact flash for all 2 nodes? (y/n) y operation completed Compact ram journal for 1 node. <markup lang=\"bash\" >cohctl compact elastic-data RamJournalRM -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to compact ram for 1 node(s)? (y/n) y operation completed ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/56_elastic_data",
            "text": " Overview There are various commands that allow you to work with and manage Elastic Data. cohctl get elastic-data - displays the elastic data details cohctl describe elastic-data - shows information related to a specific journal type cohctl compact elastic-data - compacts a flash or ram journal This is a Coherence Grid Edition feature only and is not available with Community Edition. Get Elastic Data The 'get elastic-data' command displays the Flash Journal and RAM Journal details for the cluster. Usage cohctl get elastic-data [flags] Flags -h, --help help for elastic-data Examples Display elastic data. <markup lang=\"bash\" >cohctl get http-servers -c local -m Output: <markup lang=\"bash\" >NAME USED FILES TOTAL FILES % USED MAX FILE SIZE USED SPACE COMMITTED HIGHEST LOAD COMPACTIONS EXHAUSTIVE RamJournalRM 80 19,600 0.41% 1 MB 0 MB 80 MB 0.0041 0 0 FlashJournalRM 81 41,391 0.20% 2,048 MB 0 MB 162,000 GB 0.0020 0 0 Describe Elastic Data The 'describe elastic-data' command shows information related to a specific journal type. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl describe elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data Examples <markup lang=\"bash\" >cohctl describe elastic-data RamJournalRM -c local Compact Elastic Data The 'compact elastic-data' command compacts (garbage collects) a specific journal type for all or specific nodes. The allowable values are RamJournalRM or FlashJournalRM. Usage cohctl compact elastic-data {FlashJournalRM|RamJournalRM} [flags] Flags -h, --help help for elastic-data -n, --node string comma separated node ids to target (default \"all\") -y, --yes automatically confirm the operation Examples Compact flash journal for all nodes. <markup lang=\"bash\" >cohctl compact elastic-data FlashJournalRM -c local Output: <markup lang=\"bash\" >Are you sure you want to compact flash for all 2 nodes? (y/n) y operation completed Compact ram journal for 1 node. <markup lang=\"bash\" >cohctl compact elastic-data RamJournalRM -n 1 -c local Output: <markup lang=\"bash\" >Are you sure you want to compact ram for 1 node(s)? (y/n) y operation completed ",
            "title": "Elastic Data"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get version' command displays version and build details for the Coherence-CLI. Use the '-u' option to check for updates. Usage cohctl version [flags] Flags -u, --check-updates if true, will check for updates -h, --help help for version Examples <markup lang=\"bash\" >cohctl version Output: <markup lang=\"bash\" >Coherence Command Line Interface CLI Version: 1.0.0 Date: 2021-10-18T02:03:03Z Commit: 954a008eb87fc9312894d5bbb90edeec8f92bd3a OS: darwin OS Version: amd64 You can also use the -u option to check for updates. If you are behind a proxy server, you must also set the environment variable HTTP_PROXY=http://proxy-host:proxy-port/ so that the update site may be contacted. ",
            "title": "Version"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get ignore-certs' command displays the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl get ignore-certs [flags] Flags -h, --help help for ignore-certs WARNING: You should only use this option when you are sure of the identity of the target server Examples <markup lang=\"bash\" >cohctl get ignore-certs Output: <markup lang=\"bash\" >Current setting: false ",
            "title": "Get Ignore Certs"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set ignore-certs' set the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl set ignore-certs {true|false} [flags] Flags -h, --help help for ignore-certs Examples <markup lang=\"bash\" >cohctl set ignore-certs true Output: <markup lang=\"bash\" >Value is now set to true When you have this option set you will get the following warning every time you execute the CLI so it is clear you have disabled SSL validation: WARNING: SSL Certificate validation has been explicitly disabled ",
            "title": "Set Ignore Certs"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get logs' command displays the current contents of the 'cohctl' log file. Usage cohctl get logs [flags] Flags -h, --help help for logs Examples <markup lang=\"bash\" >cohctl get logs The default log file location is $HOME/.cohctl/cohctl.log . See the config section for more details on changing the log file location. ",
            "title": "Get Logs"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get debug' command displays the current debug level. If 'on' then additional information is logged in the log file. Usage cohctl get debug [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >cohctl get debug Output: <markup lang=\"bash\" >Current debug level: off ",
            "title": "Get Debug"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set debug' command sets debug to on or off. If 'on' then additional information is logged in the log file (cohctl.log). Usage cohctl set debug {on|off}} [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >cohctl set debug on Output: <markup lang=\"bash\" >Debug is now set to on ",
            "title": "Set Debug"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get management' command displays the management information for a cluster. Usage cohctl get management [flags] Flags -h, --help help for management Examples <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-behind Expiry Delay : 1000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:48:17.739Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management ",
            "title": "Get Management"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set management' command sets a management attribute for the cluster. The following attribute names are allowed: expiryDelay and refreshPolicy. Usage cohctl set management [flags] Flags -a, --attribute string attribute name to set -h, --help help for management -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the expiryDelay to 5000ms for a cluster. <markup lang=\"bash\" >cohctl set management -a expiryDelay -v 5000 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute expiryDelay to 6000? (y/n) y operation completed <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-behind Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:50:21.370Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set the refreshPolicy to refresh-ahead for a cluster. <markup lang=\"bash\" >cohctl set management -a refreshPolicy -v refresh-ahead -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute refreshPolicy to refresh-ahead? (y/n) y <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-ahead Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:54:36.919Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management ",
            "title": "Set Management"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get timeout' command displays the current request timeout (in seconds) for any HTTP requests. Usage cohctl get timeout [flags] Flags -h, --help help for timeout Examples Displays the current request timeout. <markup lang=\"bash\" >cohctl get timeout -c local Output: <markup lang=\"bash\" >Current timeout: 15 ",
            "title": "get Timeout"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set timeout' command sets the request timeout (in seconds) for any HTTP requests. Usage cohctl set timeout value [flags] Flags -h, --help help for timeout Examples Set the request timeout ot 15 seconds. <markup lang=\"bash\" >cohctl set timeout 15 -c local Output: <markup lang=\"bash\" >Timeout is now set to 15 ",
            "title": "Set Timeout"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'get color' command displays the current color formatting setting. If 'on' then formatting of output when using a terminal highlights columns requiring attention. Usage cohctl get color [flags] Flags -h, --help help for color Examples <markup lang=\"bash\" >cohctl get color Output: <markup lang=\"bash\" >Color formatting is: off ",
            "title": "Get Color"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " The 'set color' command sets color formatting to on or off. If 'on' then formatting of output when using a terminal highlights columns requiring attention. Usage cohctl set color {on|off} [flags] Flags -h, --help help for color Examples <markup lang=\"bash\" >cohctl set color on Output: <markup lang=\"bash\" >Color formatting is now set to on ",
            "title": "Set Color"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " This section contains miscellaneous commands for various settings. cohctl version - displays the CLI version cohctl get ignore-certs - displays the current setting for ignoring invalid SSL certificates cohctl set ignore-certs - sets the current setting for ignoring invalid SSL certificates to true or false cohctl get logs - displays the cohctl logs cohctl set debug - displays the debug level cohctl get debug - sets the debug level on or off cohctl get management - displays management information for a cluster cohctl set management - sets management information for a cluster cohctl get timeout - displays the current request timeout (in seconds) for any HTTP requests cohctl set timeout - sets the request timeout (in seconds) for any HTTP requests cohctl set color - sets color formatting to be on or off cohctl get color - displays the current color formatting setting Version The 'get version' command displays version and build details for the Coherence-CLI. Use the '-u' option to check for updates. Usage cohctl version [flags] Flags -u, --check-updates if true, will check for updates -h, --help help for version Examples <markup lang=\"bash\" >cohctl version Output: <markup lang=\"bash\" >Coherence Command Line Interface CLI Version: 1.0.0 Date: 2021-10-18T02:03:03Z Commit: 954a008eb87fc9312894d5bbb90edeec8f92bd3a OS: darwin OS Version: amd64 You can also use the -u option to check for updates. If you are behind a proxy server, you must also set the environment variable HTTP_PROXY=http://proxy-host:proxy-port/ so that the update site may be contacted. Get Ignore Certs The 'get ignore-certs' command displays the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl get ignore-certs [flags] Flags -h, --help help for ignore-certs WARNING: You should only use this option when you are sure of the identity of the target server Examples <markup lang=\"bash\" >cohctl get ignore-certs Output: <markup lang=\"bash\" >Current setting: false Set Ignore Certs The 'set ignore-certs' set the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl set ignore-certs {true|false} [flags] Flags -h, --help help for ignore-certs Examples <markup lang=\"bash\" >cohctl set ignore-certs true Output: <markup lang=\"bash\" >Value is now set to true When you have this option set you will get the following warning every time you execute the CLI so it is clear you have disabled SSL validation: WARNING: SSL Certificate validation has been explicitly disabled Get Logs The 'get logs' command displays the current contents of the 'cohctl' log file. Usage cohctl get logs [flags] Flags -h, --help help for logs Examples <markup lang=\"bash\" >cohctl get logs The default log file location is $HOME/.cohctl/cohctl.log . See the config section for more details on changing the log file location. Get Debug The 'get debug' command displays the current debug level. If 'on' then additional information is logged in the log file. Usage cohctl get debug [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >cohctl get debug Output: <markup lang=\"bash\" >Current debug level: off Set Debug The 'set debug' command sets debug to on or off. If 'on' then additional information is logged in the log file (cohctl.log). Usage cohctl set debug {on|off}} [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >cohctl set debug on Output: <markup lang=\"bash\" >Debug is now set to on Get Management The 'get management' command displays the management information for a cluster. Usage cohctl get management [flags] Flags -h, --help help for management Examples <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-behind Expiry Delay : 1000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:48:17.739Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set Management The 'set management' command sets a management attribute for the cluster. The following attribute names are allowed: expiryDelay and refreshPolicy. Usage cohctl set management [flags] Flags -a, --attribute string attribute name to set -h, --help help for management -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the expiryDelay to 5000ms for a cluster. <markup lang=\"bash\" >cohctl set management -a expiryDelay -v 5000 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute expiryDelay to 6000? (y/n) y operation completed <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-behind Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:50:21.370Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set the refreshPolicy to refresh-ahead for a cluster. <markup lang=\"bash\" >cohctl set management -a refreshPolicy -v refresh-ahead -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute refreshPolicy to refresh-ahead? (y/n) y <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-ahead Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:54:36.919Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management get Timeout The 'get timeout' command displays the current request timeout (in seconds) for any HTTP requests. Usage cohctl get timeout [flags] Flags -h, --help help for timeout Examples Displays the current request timeout. <markup lang=\"bash\" >cohctl get timeout -c local Output: <markup lang=\"bash\" >Current timeout: 15 Set Timeout The 'set timeout' command sets the request timeout (in seconds) for any HTTP requests. Usage cohctl set timeout value [flags] Flags -h, --help help for timeout Examples Set the request timeout ot 15 seconds. <markup lang=\"bash\" >cohctl set timeout 15 -c local Output: <markup lang=\"bash\" >Timeout is now set to 15 Get Color The 'get color' command displays the current color formatting setting. If 'on' then formatting of output when using a terminal highlights columns requiring attention. Usage cohctl get color [flags] Flags -h, --help help for color Examples <markup lang=\"bash\" >cohctl get color Output: <markup lang=\"bash\" >Color formatting is: off Set Color The 'set color' command sets color formatting to on or off. If 'on' then formatting of output when using a terminal highlights columns requiring attention. Usage cohctl set color {on|off} [flags] Flags -h, --help help for color Examples <markup lang=\"bash\" >cohctl set color on Output: <markup lang=\"bash\" >Color formatting is now set to on ",
            "title": "Overview"
        },
        {
            "location": "/docs/reference/95_misc",
            "text": " Overview This section contains miscellaneous commands for various settings. cohctl version - displays the CLI version cohctl get ignore-certs - displays the current setting for ignoring invalid SSL certificates cohctl set ignore-certs - sets the current setting for ignoring invalid SSL certificates to true or false cohctl get logs - displays the cohctl logs cohctl set debug - displays the debug level cohctl get debug - sets the debug level on or off cohctl get management - displays management information for a cluster cohctl set management - sets management information for a cluster cohctl get timeout - displays the current request timeout (in seconds) for any HTTP requests cohctl set timeout - sets the request timeout (in seconds) for any HTTP requests cohctl set color - sets color formatting to be on or off cohctl get color - displays the current color formatting setting Version The 'get version' command displays version and build details for the Coherence-CLI. Use the '-u' option to check for updates. Usage cohctl version [flags] Flags -u, --check-updates if true, will check for updates -h, --help help for version Examples <markup lang=\"bash\" >cohctl version Output: <markup lang=\"bash\" >Coherence Command Line Interface CLI Version: 1.0.0 Date: 2021-10-18T02:03:03Z Commit: 954a008eb87fc9312894d5bbb90edeec8f92bd3a OS: darwin OS Version: amd64 You can also use the -u option to check for updates. If you are behind a proxy server, you must also set the environment variable HTTP_PROXY=http://proxy-host:proxy-port/ so that the update site may be contacted. Get Ignore Certs The 'get ignore-certs' command displays the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl get ignore-certs [flags] Flags -h, --help help for ignore-certs WARNING: You should only use this option when you are sure of the identity of the target server Examples <markup lang=\"bash\" >cohctl get ignore-certs Output: <markup lang=\"bash\" >Current setting: false Set Ignore Certs The 'set ignore-certs' set the current setting for ignoring invalid SSL Certificates. If 'true' then invalid certificates such as self signed will be allowed. You should only use this option when you are sure of the identify of the target server. Usage cohctl set ignore-certs {true|false} [flags] Flags -h, --help help for ignore-certs Examples <markup lang=\"bash\" >cohctl set ignore-certs true Output: <markup lang=\"bash\" >Value is now set to true When you have this option set you will get the following warning every time you execute the CLI so it is clear you have disabled SSL validation: WARNING: SSL Certificate validation has been explicitly disabled Get Logs The 'get logs' command displays the current contents of the 'cohctl' log file. Usage cohctl get logs [flags] Flags -h, --help help for logs Examples <markup lang=\"bash\" >cohctl get logs The default log file location is $HOME/.cohctl/cohctl.log . See the config section for more details on changing the log file location. Get Debug The 'get debug' command displays the current debug level. If 'on' then additional information is logged in the log file. Usage cohctl get debug [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >cohctl get debug Output: <markup lang=\"bash\" >Current debug level: off Set Debug The 'set debug' command sets debug to on or off. If 'on' then additional information is logged in the log file (cohctl.log). Usage cohctl set debug {on|off}} [flags] Flags -h, --help help for debug Examples <markup lang=\"bash\" >cohctl set debug on Output: <markup lang=\"bash\" >Debug is now set to on Get Management The 'get management' command displays the management information for a cluster. Usage cohctl get management [flags] Flags -h, --help help for management Examples <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-behind Expiry Delay : 1000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:48:17.739Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set Management The 'set management' command sets a management attribute for the cluster. The following attribute names are allowed: expiryDelay and refreshPolicy. Usage cohctl set management [flags] Flags -a, --attribute string attribute name to set -h, --help help for management -v, --value string attribute value to set -y, --yes automatically confirm the operation Examples Set the expiryDelay to 5000ms for a cluster. <markup lang=\"bash\" >cohctl set management -a expiryDelay -v 5000 -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute expiryDelay to 6000? (y/n) y operation completed <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-behind Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:50:21.370Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management Set the refreshPolicy to refresh-ahead for a cluster. <markup lang=\"bash\" >cohctl set management -a refreshPolicy -v refresh-ahead -c local Output: <markup lang=\"bash\" >Are you sure you want to set the value of attribute refreshPolicy to refresh-ahead? (y/n) y <markup lang=\"bash\" >cohctl get management -c local Output: <markup lang=\"bash\" >Refresh Policy : refresh-ahead Expiry Delay : 6000 Refresh Count : 500 Refresh Excess Count : 143 Refresh On Query : false Refresh Prediction Count : 24389 Refresh Time : 2021-11-22T03:54:36.919Z Refresh Timeout Count : 0 Remote Notification Count: 0 Type : Management get Timeout The 'get timeout' command displays the current request timeout (in seconds) for any HTTP requests. Usage cohctl get timeout [flags] Flags -h, --help help for timeout Examples Displays the current request timeout. <markup lang=\"bash\" >cohctl get timeout -c local Output: <markup lang=\"bash\" >Current timeout: 15 Set Timeout The 'set timeout' command sets the request timeout (in seconds) for any HTTP requests. Usage cohctl set timeout value [flags] Flags -h, --help help for timeout Examples Set the request timeout ot 15 seconds. <markup lang=\"bash\" >cohctl set timeout 15 -c local Output: <markup lang=\"bash\" >Timeout is now set to 15 Get Color The 'get color' command displays the current color formatting setting. If 'on' then formatting of output when using a terminal highlights columns requiring attention. Usage cohctl get color [flags] Flags -h, --help help for color Examples <markup lang=\"bash\" >cohctl get color Output: <markup lang=\"bash\" >Color formatting is: off Set Color The 'set color' command sets color formatting to on or off. If 'on' then formatting of output when using a terminal highlights columns requiring attention. Usage cohctl set color {on|off} [flags] Flags -h, --help help for color Examples <markup lang=\"bash\" >cohctl set color on Output: <markup lang=\"bash\" >Color formatting is now set to on ",
            "title": "Miscellaneous"
        },
        {
            "location": "/docs/config/01_overview",
            "text": " This section contains various configuration options when using the Coherence CLI. Global Flags Overview of all global flags. Command Completion Using command completion scripts. Changing Config Locations Changing configuration file locations. Bytes Display Format Changing how bytes values are displayed. Get Config Display the Config in .cohctl.yaml in a human readible format. ",
            "title": "Configuration"
        },
        {
            "location": "/docs/config/06_bytes_display_format",
            "text": " The 'set bytes-format' command sets the default format for displaying memory or disk based sizes. Valid values are k - kilobytes, m - megabytes, g - gigabytes or t - terabytes. If not specified the default will be b - bytes. The default value will be overridden if you specify the -k, -m, -g or --tb options. Usage cohctl set bytes-format {k|m|g|t} [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl set bytes-format m Output: <markup lang=\"bash\" >Bytes format is now set to m ",
            "title": "Set Default Bytes Format"
        },
        {
            "location": "/docs/config/06_bytes_display_format",
            "text": " The 'get bytes-format' displays the current format for displaying memory or disk based sizes. Usage cohctl get bytes-format [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl get bytes-format Output: <markup lang=\"bash\" >Current bytes format: m ",
            "title": "Get Default Bytes Format"
        },
        {
            "location": "/docs/config/06_bytes_display_format",
            "text": " The 'clear bytes-format' clears the current format for displaying memory or disk based sizes. Usage cohctl clear bytes-format [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl clear bytes-format Output: <markup lang=\"bash\" >Default bytes format has been cleared ",
            "title": "Clear Default Bytes Format"
        },
        {
            "location": "/docs/config/06_bytes_display_format",
            "text": " If you prefer to always use a particular display format for output, you can use the following commands to control the default format: cohctl set bytes-format - set the default bytes format cohctl get bytes-format - display the current bytes format cohctl clear bytes-format - clear the current bytes format Set Default Bytes Format The 'set bytes-format' command sets the default format for displaying memory or disk based sizes. Valid values are k - kilobytes, m - megabytes, g - gigabytes or t - terabytes. If not specified the default will be b - bytes. The default value will be overridden if you specify the -k, -m, -g or --tb options. Usage cohctl set bytes-format {k|m|g|t} [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl set bytes-format m Output: <markup lang=\"bash\" >Bytes format is now set to m Get Default Bytes Format The 'get bytes-format' displays the current format for displaying memory or disk based sizes. Usage cohctl get bytes-format [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl get bytes-format Output: <markup lang=\"bash\" >Current bytes format: m Clear Default Bytes Format The 'clear bytes-format' clears the current format for displaying memory or disk based sizes. Usage cohctl clear bytes-format [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl clear bytes-format Output: <markup lang=\"bash\" >Default bytes format has been cleared ",
            "title": "Setting the Default Bytes Display Format"
        },
        {
            "location": "/docs/config/06_bytes_display_format",
            "text": " By default, any memory or disk based size value is displayed in bytes. You can use the following options on any command to change the display format: -k or --kb - display in kilobytes (KB) -m or --mb - display in megabytes (MB) -g or --gb - display in gigabytes (GB) --tb - display in terabytes (TB) For the purposes of display, units of 1024 are used to calculate the appropriate value. E.g. 1 KB = 1024 bytes. Specifying the above options will override any default you have set below. Setting the Default Bytes Display Format If you prefer to always use a particular display format for output, you can use the following commands to control the default format: cohctl set bytes-format - set the default bytes format cohctl get bytes-format - display the current bytes format cohctl clear bytes-format - clear the current bytes format Set Default Bytes Format The 'set bytes-format' command sets the default format for displaying memory or disk based sizes. Valid values are k - kilobytes, m - megabytes, g - gigabytes or t - terabytes. If not specified the default will be b - bytes. The default value will be overridden if you specify the -k, -m, -g or --tb options. Usage cohctl set bytes-format {k|m|g|t} [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl set bytes-format m Output: <markup lang=\"bash\" >Bytes format is now set to m Get Default Bytes Format The 'get bytes-format' displays the current format for displaying memory or disk based sizes. Usage cohctl get bytes-format [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl get bytes-format Output: <markup lang=\"bash\" >Current bytes format: m Clear Default Bytes Format The 'clear bytes-format' clears the current format for displaying memory or disk based sizes. Usage cohctl clear bytes-format [flags] Flags -h, --help help for bytes-format Examples <markup lang=\"bash\" >cohctl clear bytes-format Output: <markup lang=\"bash\" >Default bytes format has been cleared ",
            "title": "Bytes Display Format"
        }
 ]
}