# Copyright 2021, Oracle Corporation and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at
# https://oss.oracle.com/licenses/upl.

# ---------------------------------------------------------------------------
# Coherence CLI CI Snapshots.
# ---------------------------------------------------------------------------
name: CI Snapshots

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Every day at midnight
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch:
          - v14.1.1.0
          - main

#   Checkout the source, we need a depth of zero to fetch all of the history otherwise
#   the copyright check cannot work out the date of the files from Git.
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

#   This step will free up disc space on the runner by removing
#   lots of things that we do not need.
    - name: Image Cleanup
      shell: bash
      run: |
        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'monodoc-http'
        sudo apt-get remove -y 'php.*'
        sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
        echo "Removing large directories"
        rm -rf /usr/share/dotnet/
        df -h

    - name: Get Docker Images
      shell: bash
      run: |
        docker pull gcr.io/distroless/java:11

    - name: Set up JDK 11 for Build
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build Coherence Snapshot
      shell: bash
      env:
        COH_BRANCH: ${{ matrix.branch }}
        MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false
      run: |
        # Checkout the git repo for coherence snapshot and build
        DIR=`pwd`
        CLONE_DIR=coherence-$COH_BRANCH
        cd /tmp
        git clone https://github.com/oracle/coherence.git $CLONE_DIR
        cd $CLONE_DIR
        if [ $COH_BRANCH != "main" ] ; then
           git checkout $COH_BRANCH
        fi
        mvn --file prj/pom.xml --batch-mode -e -DskipTests clean install
        cd $DIR

    - name: Cache Go Modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mods-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-mods-

    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.x

    - name: Verify Coherence CLI
      env:
        COH_BRANCH: ${{ matrix.branch }}
      shell: bash
      run: |
        CLONE_DIR=coherence-$COH_BRANCH
        POM_FILE=/tmp/${CLONE_DIR}/prj/coherence-bom/pom.xml
        if [ ! -r $POM_FILE ] ; then
           POM_FILE=/tmp/${CLONE_DIR}/prj/pom.xml
        fi
        COH_VERSION=`cat ${POM_FILE} | grep '<revision>' | sed -e 's,^.*<revision>,,' -e 's,</revision>.*$,,'`

        echo "Running verify against $COH_VERSION"

        COHERENCE_VERSION=$COH_VERSION make clean build-test-images test-e2e-standalone
        COHERENCE_VERSION=$COH_VERSION make test-clean test-discovery

    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: test-output
        path: build/_output/test-logs
